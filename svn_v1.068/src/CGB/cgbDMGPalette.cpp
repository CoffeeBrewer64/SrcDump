/**
 * @file cgbDMGPalette.cpp
 * @author zhfang
 * @date 2010.03.24
 * @brief CGB Emulate For CTR - DMG Palette
 */
#include "cgbDMGPalette.h"
#include "cgbGlobal.h"
/** @brief Initialize DMG Palette */

u8 pCheckSumTable1[0x4F] =  //0x6c7--
{
	0x00,0x88,0x16,0x36,0xD1,0xDB,0xF2,0x3C,0x8C,0x92,0x3D,0x5C,0x58,0xC9,0x3E,0x70,
	0x1D,0x59,0x69,0x19,0x35,0xA8,0x14,0xAA,0x75,0x95,0x99,0x34,0x6F,0x15,0xFF,0x97,
	0x4B,0x90,0x17,0x10,0x39,0xF7,0xF6,0xA2,0x49,0x4E,0x43,0x68,0xE0,0x8B,0xF0,0xCE,
	0x0C,0x29,0xE8,0xB7,0x86,0x9A,0x52,0x01,0x9D,0x71,0x9C,0xBD,0x5D,0x6D,0x67,0x3F,
	0x6B,0xB3,0x46,0x28,0xA5,0xC6,0xD3,0x27,0x61,0x18,0x66,0x6A,0xBF,0x0D,0xF4
};

u8 pCompareTable[0x1D] = //0x716 
{
	0x42,0x45,0x46,0x41,0x41,0x52,0x42,0x45,0x4B,0x45,0x4B,0x20,0x52,0x2D,0x55,0x52,
	0x41,0x52,0x20,0x49,0x4E,0x41,0x49,0x4C,0x49,0x43,0x45,0x20,0x52
};

u8 pIndex2Table[0x5F] = //0x733 
{
	0x7C,0x08,0x12,0xA3,0xA2,0x07,0x87,0x4B,0x20,0x12,0x65,0xA8,0x16,0xA9,0x86,0xB1,
	0x68,0xA0,0x87,0x66,0x12,0xA1,0x30,0x3C,0x12,0x85,0x12,0x64,0x1B,0x07,0x06,0x6F,
	0x6E,0x6E,0xAE,0xAF,0x6F,0xB2,0xAF,0xB2,0xA8,0xAB,0x6F,0xAF,0x86,0xAE,0xA2,0xA2,
	0x12,0xAF,0x13,0x12,0xA1,0x6E,0xAF,0xAF,0xAD,0x06,0x4C,0x6E,0xAF,0xAF,0x12,0x7C,
	0xAC,0xA8,0x6A,0x6E,0x13,0xA0,0x2D,0xA8,0x2B,0xAC,0x64,0xAC,0x6D,0x87,0xBC,0x60,
	0xB4,0x13,0x72,0x7C,0xB5,0xAE,0xAE,0x7C,0x7C,0x65,0xA2,0x6C,0x64,0x85,0x80
};

u8 pPaletteTable[] =  //0x791--  3*0x1E ?? 
{
	0x80,0xB0,0x40,0x88,0x20,0x68,0xDE,0x00,0x70,0xDE,0x20,0x78,0x20,0x20,0x38,0x20,
	0xB0,0x90,0x20,0xB0,0xA0,0xE0,0xB0,0xC0,0x98,0xB6,0x48,0x80,0xE0,0x50,0x1E,0x1E,
	0x58,0x20,0xB8,0xE0,0x88,0xB0,0x10,0x20,0x00,0x10,0x20,0xE0,0x18,0xE0,0x18,0x00,
	0x18,0xE0,0x20,0xA8,0xE0,0x20,0x18,0xE0,0x00,0x20,0x18,0xD8,0xC8,0x18,0xE0,0x00,
	0xE0,0x40,0x28,0x28,0x28,0x18,0xE0,0x60,0x20,0x18,0xE0,0x00,0x00,0x08,0xE0,0x18,
	0x30,0xD0,0xD0,0xD0,0x20,0xE0,0xE8
};
 
u8 pColorTable[] =  //0x7e8--
{
	0xFF,0x7F,0xBF,0x32,0xD0,0x00,0x00,0x00,0x9F,0x63,0x79,0x42,0xB0,0x15,0xCB,0x04,
	0xFF,0x7F,0x31,0x6E,0x4A,0x45,0x00,0x00,0xFF,0x7F,0xEF,0x1B,0x00,0x02,0x00,0x00,
	0xFF,0x7F,0x1F,0x42,0xF2,0x1C,0x00,0x00,0xFF,0x7F,0x94,0x52,0x4A,0x29,0x00,0x00,
	0xFF,0x7F,0xFF,0x03,0x2F,0x01,0x00,0x00,0xFF,0x7F,0xEF,0x03,0xD6,0x01,0x00,0x00,
	0xFF,0x7F,0xB5,0x42,0xC8,0x3D,0x00,0x00,0x74,0x7E,0xFF,0x03,0x80,0x01,0x00,0x00,
	0xFF,0x67,0xAC,0x77,0x13,0x1A,0x6B,0x2D,0xD6,0x7E,0xFF,0x4B,0x75,0x21,0x00,0x00,
	0xFF,0x53,0x5F,0x4A,0x52,0x7E,0x00,0x00,0xFF,0x4F,0xD2,0x7E,0x4C,0x3A,0xE0,0x1C,
	0xED,0x03,0xFF,0x7F,0x5F,0x25,0x00,0x00,0x6A,0x03,0x1F,0x02,0xFF,0x03,0xFF,0x7F,
	0xFF,0x7F,0xDF,0x01,0x12,0x01,0x00,0x00,0x1F,0x23,0x5F,0x03,0xF2,0x00,0x09,0x00,
	0xFF,0x7F,0xEA,0x03,0x1F,0x01,0x00,0x00,0x9F,0x29,0x1A,0x00,0x0C,0x00,0x00,0x00,
	0xFF,0x7F,0x7F,0x02,0x1F,0x00,0x00,0x00,0xFF,0x7F,0xE0,0x03,0x06,0x02,0x20,0x01,
	0xFF,0x7F,0xEB,0x7E,0x1F,0x00,0x00,0x7C,0xFF,0x7F,0xFF,0x3F,0x00,0x7E,0x1F,0x00,
	0xFF,0x7F,0xFF,0x03,0x1F,0x00,0x00,0x00,0xFF,0x03,0x1F,0x00,0x0C,0x00,0x00,0x00,
	0xFF,0x7F,0x3F,0x03,0x93,0x01,0x00,0x00,0x00,0x00,0x00,0x42,0x7F,0x03,0xFF,0x7F,
	0xFF,0x7F,0x8C,0x7E,0x00,0x7C,0x00,0x00,0xFF,0x7F,0xEF,0x1B,0x80,0x61,0x00,0x00,
	0xFF,0x7F,0x00,0x7C,0xE0,0x03,0x1F,0x7C,0x1F,0x00,0xFF,0x03,0x40,0x41,0x42,0x20
};


u8 pbg, pobj1, pobj2;

#define CGB_BGRA2RGBA(v)	((((u16)(v&0x001F))<<11) | (((u16)(v&0x7C00))>>9) | ((v&0x03E0)<<1))
u16 cgbDMGPaletteGetColor(u32 index)
{
	int colorindex = 0;
	if(index < 4)
		colorindex = pbg;
	else if(index < 8)
		colorindex = pobj1;
	else
		colorindex = pobj2;

	index %= 4;
	colorindex += index*2;
	int tempcolor = *(u16*)(&pColorTable[colorindex]);	
	return CGB_BGRA2RGBA(tempcolor);
}

void cgbDMGPaletteInit()
{
	int i;
	int index1 = -1;  //0x0-0x5E

	if(g_pCgbROMHeader->nCompany == 0x33) //New Licensee Code
	{
		if(g_pCgbROMHeader->nNewCompany[0] != '0' || g_pCgbROMHeader->nNewCompany[1] != '1') //NewLicenseeCode != "01"  ...no Nintendo?
			index1 = 0;		
	}
	else if(g_pCgbROMHeader->nCompany != 0x1) //
		index1 = 0;

	if(index1 == -1)
	{
		u8 checksum = 0;
		for(i=0;i<0x10;i++)
			checksum += g_pCgbROM[i + 0x134];

		for(i=0;i<0x4F;i++)
		{
			if(checksum == pCheckSumTable1[i])
			{
				if(i<0x41)
				{
					index1 = i;
					break;
				}
				else
				{
					u8 n4thTitle = g_pCgbROM[0x137];
					int offset = i-0x41;
					if(pCompareTable[offset] == n4thTitle)
					{
						index1 = i;
						break;
					}
					else if(pCompareTable[offset + 0xE] == n4thTitle)
					{
						index1 = i + 0xE;
						break;
					}
					else if( (offset + 0xE*2) < 0x1D && (pCompareTable[offset + 0xE] == n4thTitle))
					{
						index1 = i + 0xE*2;
						break;
					}
					index1 = 0;
					break;
				}
			}
		}
	}	

	u8 index2 = pIndex2Table[index1];
	
	u8 up = (index2>>5)&0x3;
	u8 lower = (index2&0x1F);

	//lower should  < 0x1D
	
	u8 pa, pb, pc;
	pa = pPaletteTable[lower*3];
	pb = pPaletteTable[lower*3 +1];
	pc = pPaletteTable[lower*3 + 2];

	
	if( (up&1) == 0)
		pobj1 = pc;
	else
		pobj1 = pa;
	if( (up>>1) == 0)
		pobj2 = pc;
	else if( (up>>1) == 1)
		pobj2 = pa;
	else
		pobj2 = pb;
	pbg = pc;	
}
