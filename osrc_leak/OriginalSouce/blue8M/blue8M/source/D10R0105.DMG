
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	macro.h
	include	group.def


bank6	group	G_BANK6


	public	d10_room1_5f
	public	switch_talk


	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking


BUILDING_TYPE	equ	22
EXIT		=	0ffh


seq_d10r1f5	equ	seq_ctrl_buf + 57h


d10_room1_5f:
ysiz	=	9
xsiz	=	13
	db	BUILDING_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	nsilf_4			; map data adrs
	dw	msg_d10r1f5		; message tbl adrs
	dw	ev_d10r1f5		; event routine adrs
	db	0			; map link flg
	dw	sxy_d10r1f5


ev_d10r1f5:
	call	init$

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,d10r1f5_tbl
	ld	a,(seq_d10r1f5)
	call	battle_sequence
	ld	(seq_d10r1f5),a

	ret



init$:
	ld	hl,ptn_data
	bit	5,(hl)
	res	5,(hl)
	ret	z

	ld	hl,where
	extern	check_where1
	call	check_where1
	call	each_map_door

	ld	a,(ev_d10 + 9)
	bit	7,a
	ret	nz

	ld	a,05ch + 003h
	ld	(el_c),a
	ld	bc,6 * 256 + 2
	ld	a,B_BGCELL_CHANGE
	jp	bank2bank


where:
	db	6,2				; door-1
	db	0ffh


each_map_door:
	ld	a,(DA_BUF + 5)
	and	a
	ret	z

	ld	hl,ev_d10 + 9
	set	7,(hl)

	ret



d10r1f5_tbl:
	initndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after


msg_d10r1f5:
	msgndw	msg1,msg_shainm1
	ndw	msg2,msg_shainm2
	ndw	msg3,msg_shainw3
	ndw	msg4,msg_shainw4
	ndw	msg5,msg_shainm5
	ndw	msg6,msg_member1
	ndw	msg8,msg_sylpu_w
	ndw	msg9,msg_member2
	ndw	capsule_item,msg_capsule1
	ndw	capsule_item,msg_capsule2


dealer_talk:
d_talk1:
	db	msg_member1,020h
	dw	ev_d10 + 8
	dw	msg6_0
	dw	msg6_after
	dw	msg6_win
	dw	msg6_win

d_talk3:
	db	msg_sylpu_w,030h
	dw	ev_d10 + 8
	dw	msg8_0
	dw	msg8_after
	dw	msg8_win
	dw	msg8_win

d_talk4:
	db	msg_member2,020h
	dw	ev_d10 + 8
	dw	msg9_0
	dw	msg9_after
	dw	msg9_win
	dw	msg9_win

	db	0ffh



switch_talk:
	ld	a,(ev_d10 + 19)
	bit	7,a
	jr	nz,after$

	jr	rts$


after$:
	ld	h,d
	ld	l,e

rts$:
	jp	put_win_msg



msg1:
	db	CALL_MSG

	ld	hl,msg1_0$
	ld	de,msg1_1$
	call	switch_talk

	jp	msg_return


msg1_0$:
	extern	msg1_0_0_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg1_0_0_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_1$:
	extern	msg1_1_1_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg1_1_1_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg2:
	db	CALL_MSG

	ld	hl,msg2_0$
	ld	de,msg2_1$
	call	switch_talk

	jp	msg_return


msg2_0$:
	extern	msg2_0_2_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg2_0_2_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_1$:
	extern	msg2_1_3_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg2_1_3_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg3:
	db	CALL_MSG

	ld	hl,msg3_0$
	ld	de,msg3_1$
	call	switch_talk

	jp	msg_return


msg3_0$:
	extern	msg3_0_4_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg3_0_4_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_1$:
	extern	msg3_1_5_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg3_1_5_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg4:
	db	CALL_MSG

	ld	hl,msg4_0$
	ld	de,msg4_1$
	call	switch_talk

	jp	msg_return


msg4_0$:
	extern	msg4_0_6_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg4_0_6_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_1$:
	extern	msg4_1_7_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg4_1_7_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg5:
	db	CALL_MSG

	ld	hl,msg5_0$
	ld	de,msg5_1$
	call	switch_talk

	jp	msg_return


msg5_0$:
	extern	msg5_0_8_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg5_0_8_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_1$:
	extern	msg5_1_9_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg5_1_9_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg6:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg6_0:
	extern	msg6_0_10_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg6_0_10_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_win:
	extern	msg6_win_11_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg6_win_11_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_after:
	extern	msg6_after_12_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg6_after_12_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg8:
	db	CALL_MSG

	ld	hl,d_talk3
	call	DealerTalking

	jp	msg_return


msg8_0:
	extern	msg8_0_13_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg8_0_13_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg8_win:
	extern	msg8_win_14_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg8_win_14_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg8_after:
	extern	msg8_after_15_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg8_after_15_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg9:
	db	CALL_MSG

	ld	hl,d_talk4
	call	DealerTalking

	jp	msg_return


msg9_0:
	extern	msg9_0_16_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg9_0_16_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg9_win:
	extern	msg9_win_17_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg9_win_17_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg9_after:
	extern	msg9_after_18_D10R0105
	db I_MSG2	; mvmsg追加
	dw msg9_after_18_D10R0105	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加




sxy_d10r1f5:
	include	..\sxy\d10r0105.sxy


nsilf_4:
	include	..\mapdata\nsilf_4.map

