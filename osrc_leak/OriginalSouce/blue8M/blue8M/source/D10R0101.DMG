
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	vanish.def
	include	macro.h
	include	group.def


bank16	group	G_BANK16


	public	d10_room1


	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking


BUILDING_TYPE	equ	22
EXIT		=	0ffh


seq_d10r1f1	equ	seq_ctrl_buf + 53h


d10_room1:
ysiz	=	9
xsiz	=	15
	db	BUILDING_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	nsilf_1			; map data adrs
	dw	msg_d10r1f1		; message tbl adrs
	dw	ev_d10r1f1		; event routine adrs
	db	0			; map link flg
	dw	sxy_d10r1f1


ev_d10r1f1:
	call	init$

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,d10r1f1_tbl
	ld	a,(seq_d10r1f1)
	call	battle_sequence
	ld	(seq_d10r1f1),a

	ret


init$:
	ld	hl,ptn_data
	bit	5,(hl)
	res	5,(hl)
	ret	z

	ld	hl,where
	call	check_where
	call	each_map_door

	ld	a,(ev_d10 + 1)
	bit	5,a
	jr	nz,next_door1$

	push	af

	ld	a,054h + 000h
	ld	(el_c),a
	ld	bc,2 * 256 + 2
	ld	a,B_BGCELL_CHANGE
	call	bank2bank

	pop	af

next_door1$:
	bit	6,a
	ret	nz

	ld	a,054h + 000h
	ld	(el_c),a
	ld	bc,5 * 256 + 2
	ld	a,B_BGCELL_CHANGE
	jp	bank2bank


where:
	db	2,2				; door-1
	db	5,2				; door-2
	db	0ffh


	public	check_where
check_where:
	push	hl

	ld	hl,checker_flag + 0
	ld	a,(hli)
	ld	b,a				; mapscloll_y
	ld	a,(hl)
	ld	c,a				; mapscloll_x

	xor	a
	ld	(DA_BUF + 5),a

	pop	hl

lp$:
	ld	a,(hli)
	cp	0ffh
	jr	z,exit$

	push	hl
	ld	hl,DA_BUF + 5			; 1-origin value(result)
	inc	(hl)
	pop	hl

	cp	b
	jr	z,ok$

	inc	hl

	jr	lp$


ok$:
	ld	a,(hli)
	cp	c
	jr	nz,lp$

	ld	hl,checker_flag + 0
	xor	a
	ld	(hli),a
	ld	(hl),a

	ret


exit$:
	xor	a
	ld	(DA_BUF + 5),a

	ret


each_map_door:
	ld	hl,ev_d10 + 1

	ld	a,(DA_BUF + 5)
	and	a
	ret	z

	cp	1
	jr	nz,d2$

	set	5,(hl)

	ret


d2$:
	set	6,(hl)

	ret



d10r1f1_tbl:
	initndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after


msg_d10r1f1:
	msgndw	msg1,msg_shainw
	ndw	msg3,msg_sylpu_w1
	ndw	msg4,msg_sylpu_w2
	ndw	msg6,msg_member1
	ndw	msg7,msg_member2



dealer_talk:
d_talk2:
	db	msg_sylpu_w1,030h
	dw	ev_d10 + 0
	dw	msg3_0
	dw	msg3_after
	dw	msg3_win
	dw	msg3_win

d_talk3:
	db	msg_sylpu_w2,040h
	dw	ev_d10 + 0
	dw	msg4_0
	dw	msg4_after
	dw	msg4_win
	dw	msg4_win

d_talk5:
	db	msg_member1,030h
	dw	ev_d10 + 0
	dw	msg6_0
	dw	msg6_after
	dw	msg6_win
	dw	msg6_win

d_talk6:
	db	msg_member2,030h
	dw	ev_d10 + 0
	dw	msg7_0
	dw	msg7_after
	dw	msg7_win
	dw	msg7_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	a,(ev_d10 + 1)
	bit	7,a
	jr	nz,yet$

	ld	hl,msg1_0$
	call	put_win_msg

	ld	bc,236 * 256 + 1
	call	take_item
	ld	hl,msg1_3$
	jr	nc,rts$

	ld	hl,ev_d10 + 1
	set	7,(hl)

	ld	hl,msg1_1$

	jr	rts$


yet$:
	ld	hl,msg1_2$

rts$:
	call	put_win_msg

	jp	msg_return


msg1_0$:
	extern	msg1_0_0_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg1_0_0_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_1$:
	extern	msg1_1_1_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg1_1_1_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db	FANFARE
	db	EOM


msg1_2$:
	extern	msg1_2_2_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg1_2_2_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_3$:
	extern	msg1_3_3_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg1_3_3_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3:
	db	CALL_MSG

	ld	hl,d_talk2
	call	DealerTalking

	jp	msg_return



msg4:
	db	CALL_MSG

	ld	hl,d_talk3
	call	DealerTalking

	jp	msg_return


msg6:
	db	CALL_MSG

	ld	hl,d_talk5
	call	DealerTalking

	jp	msg_return



msg7:
	db	CALL_MSG

	ld	hl,d_talk6
	call	DealerTalking

	jp	msg_return




msg3_0:
	extern	msg3_0_4_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg3_0_4_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_win:
	extern	msg3_win_5_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg3_win_5_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_after:
	extern	msg3_after_6_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg3_after_6_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_0:
	extern	msg4_0_7_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg4_0_7_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_win:
	extern	msg4_win_8_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg4_win_8_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_after:
	extern	msg4_after_9_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg4_after_9_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_0:
	extern	msg6_0_10_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg6_0_10_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_win:
	extern	msg6_win_11_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg6_win_11_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_after:
	extern	msg6_after_12_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg6_after_12_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7_0:
	extern	msg7_0_13_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg7_0_13_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7_win:
	extern	msg7_win_14_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg7_win_14_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7_after:
	extern	msg7_after_15_D10R0101
	db I_MSG2	; mvmsg追加
	dw msg7_after_15_D10R0101	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


sxy_d10r1f1:
	include	..\sxy\d10r0101.sxy


nsilf_1:
	include	..\mapdata\nsilf_1.map

