
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	vanish.def
	include	dealer.def
	include	macro.h
	include	group.def


bank18	group	G_BANK18


	public	d10_room1_10f


	extern	T11msg8

	extern	SetActorSite
	extern	look_guide
	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stopping
	extern	capsule_item

	extern	put_wait
	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking
	extern	CheckAssignPos

	extern	D10R1F1msg1


MANIA_TYPE	equ	16
EXIT		=	0ffh


seq_d10r1f10	equ	seq_ctrl_buf + 69h


d10_room1_10f:
ysiz	=	9
xsiz	=	9
	db	MANIA_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	silf_11f			; map data adrs
	dw	msg_d10r1f10		; message tbl adrs
	dw	ev_d10r1f10		; event routine adrs
	db	0			; map link flg
	dw	sxy_d10r1f10


ev_d10r1f10:
	call	init$

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,d10r1f10_tbl
	ld	a,(seq_d10r1f10)
	call	battle_sequence
	ld	(seq_d10r1f10),a

	ret


init$:
	ld	hl,ptn_data
	bit	5,(hl)
	res	5,(hl)
	ret	z

	ld	hl,where
	call	check_where
	call	each_map_door

	ld	a,(ev_d10 + 19)
	bit	0,a
	ret	nz

	ld	a,020h + 000h
	ld	(el_c),a
	ld	bc,6 * 256 + 3
	ld	a,B_BGCELL_CHANGE
	jp	bank2bank


where:
	db	6,3				; door-1
	db	0ffh


check_where:
	push	hl

	ld	hl,checker_flag + 0
	ld	a,(hli)
	ld	b,a				; mapscloll_y
	ld	a,(hl)
	ld	c,a				; mapscloll_x

	xor	a
	ld	(DA_BUF + 5),a

	pop	hl

lp$:
	ld	a,(hli)
	cp	0ffh
	jr	z,exit$

	push	hl
	ld	hl,DA_BUF + 5			; 1-origin value(result)
	inc	(hl)
	pop	hl

	cp	b
	jr	z,ok$

	inc	hl

	jr	lp$


ok$:
	ld	a,(hli)
	cp	c
	jr	nz,lp$

	ld	hl,checker_flag + 0
	xor	a
	ld	(hli),a
	ld	(hl),a

	ret


exit$:
	xor	a
	ld	(DA_BUF + 5),a

	ret


each_map_door:
	ld	a,(DA_BUF + 5)
	and	a
	ret	z

	ld	hl,ev_d10 + 19
	set	0,(hl)

	ret


vanish_d10r0101:
	ld	hl,vanish_tbl$

lp$:
	ld	a,(hli)
	cp	0ffh
	jr	z,appear$

	push	hl
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank
	pop	hl

	jr	lp$


appear$:
	ld	hl,appear_tbl$

loop$:
	ld	a,(hli)
	cp	0ffh
	ret	z

	push	hl
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_APPEAR
	call	bank2bank
	pop	hl

	jr	loop$


appear_tbl$:
	db	T11msg8
	db	T11msg9
	db	T11msg10
	db	T11msg11
	db	T11msg12
	db	T11msg13
	db	0ffh


vanish_tbl$:
	db	T11msg1
	db	T11msg2
	db	T11msg3
	db	T11msg4
	db	T11msg5
	db	T11msg6
	db	T11msg7
	db	T11msg14
	db	T11msg15

	db	D10R1F1msg2
	db	D10R1F1msg3
	db	D10R1F1msg4
	db	D10R1F1msg5

	db	D10R1F2msg2
	db	D10R1F2msg3

	db	D10R1F3msg2
	db	D10R1F3msg3
	db	D10R1F3msg4

	db	D10R1F4msg2
	db	D10R1F4msg3
	db	D10R1F4msg4
	db	D10R1F4msg5

	db	D10R1F5msg6
	db	D10R1F5msg7
	db	D10R1F5msg8

	db	D10R1F6msg5
	db	D10R1F6msg6
	db	D10R1F6msg7
	db	D10R1F6msg8

	db	D10R1F7msg2
	db	D10R1F7msg3
	db	D10R1F7msg4

	db	D10R1F8msg2
	db	D10R1F8msg3
	db	D10R1F8msg4

	db	D10R1F9msg1
	db	D10R1F9msg2

	db	D10R1F10msg3
	db	D10R1F10msg4
	db	D10R1F10msg5

	db	0ffh


return:
	xor	a
	ld	(cancel_key),a


next_seq:
	ld	(seq_d10r1f10),a
	ld	(AdrsDealerTalk + 9),a

	ret



d10r1f10_tbl:
	initndw	d10r1f10_main,seq_d10r1f10_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after
	ndw	step,seq_step
	ndw	battle_in,seq_battle_in
	ndw	vs_after,seq_vs_after


d10r1f10_main:
	ld	a,(ev_d10 + 19)
	bit	7,a				; clear event
	ret	nz

	ld	hl,cross$
	call	CheckAssignPos
	jp	nc,battle_main

	ld	a,(usr_buf + 0)
	ld	(event_check),a

	xor	a
	ld	(joy_status),a

	ld	a,0f0h
	ld	(cancel_key),a

	ld	a,msg_boss
	ld	(work1),a
	call	talk_map

	ld	a,msg_boss
	ld	(work1),a
	call	obj_stopping

	ld	de,near_step$
;	ld	a,msg_boss
;	ld	(work1),a
	call	actor_anime_set

	ld	a,seq_step
	jp	next_seq


cross$:
	db	00dh,006h			; left
	db	00ch,007h			; right
	db	0ffh


near_step$:
	db	000h
	db	000h
	db	000h
	db	0ffh


site_set:
	ld	(watashi_muki),a

	ld	a,msg_boss
	ld	(work1),a
	ld	a,b
	ld	(work2),a
	jp	SetActorSite



vs_after:
	ld	a,(fighting_flg)
	cp	0ffh
	jp	z,return			; to okido school(losing)

	ld	a,(event_check)
	cp	1
	jr	z,non_site$

	ld	a,2
	ld	b,0ch

	jr	set$


non_site$:
	ld	a,8
	ld	b,0

set$:
	call	site_set

	ld	a,0f0h
	ld	(cancel_key),a

	ld	a,msg_boss_after
	ld	(work1),a
	call	talk_map

	call	n_to_b

	call	vanish_d10r0101

	call	actor_blanch
	call	put_wait

	call	b_to_n

	ld	hl,ev_d10 + 19
	set	7,(hl)				; clear event

	xor	a
	ld	(cancel_key),a

	jp	next_seq


step:
	ld	a,(obs_system)
	bit	0,a
	ret	nz

	ld	a,msg_boss
	ld	(work1),a
	call	obj_stopping

	ld	a,(event_check)
	cp	1
	jr	z,non_site$

	ld	a,2
	ld	b,0ch

	jr	set$


non_site$:
	ld	a,8
	ld	b,0

set$:
	call	site_set
	call	put_wait

	ld	a,seq_battle_in
	jp	next_seq


battle_in:
	ld	hl,event_flg
	set	6,(hl)
	set	7,(hl)

	ld	hl,msg3_win			; hero lose
	ld	de,msg3_win			; hero win
	call	set_battle_msg

	ld	a,(work1)
	ld	(sv_msg_no),a
	call	set_battle
	call	set_battle_data

	xor	a
	ld	(cancel_key),a

	ld	a,seq_vs_after
	jp	next_seq



msg_d10r1f10:
	msgndw	msg1,msg_shathou
	ndw	msg2,msg_hotelw
	ndw	msg3,msg_boss
	ndw	msg4,msg_member1
	ndw	msg5,msg_member2
	ndw	msg3_after,msg_boss_after



dealer_talk:
d_talk1:
	db	msg_member1,040h
	dw	ev_d10 + 18
	dw	msg4_0
	dw	msg4_after
	dw	msg4_win
	dw	msg4_win

d_talk2:
	db	msg_member2,030h
	dw	ev_d10 + 18
	dw	msg5_0
	dw	msg5_after
	dw	msg5_win
	dw	msg5_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	a,(ev_d10 + 19)
	bit	5,a				; check obtain
	jp	nz,yet$

	ld	hl,msg1_0$
	call	put_win_msg

	ld	bc,1 * 256 + 1
	call	take_item
	jr	nc,full$

	ld	hl,msg1_1$
	call	put_win_msg

	ld	hl,ev_d10 + 19
	set	5,(hl)

	jr	rts$


full$:
	ld	hl,msg1_3$
	call	put_win_msg

	jr	rts$


yet$:
	ld	hl,msg1_2$
	call	put_win_msg

rts$:
	jp	msg_return


msg1_0$:
	extern	msg1_0_0_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg1_0_0_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_1$:
	extern	msg1_1_1_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg1_1_1_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db	FANFARE6
	db	EOM


msg1_2$:
	extern	msg1_2_2_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg1_2_2_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_3$:
	extern	msg1_3_3_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg1_3_3_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2:
	extern	msg2_4_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg2_4_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg3:
	extern	msg3_5_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg3_5_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_win:
	extern	msg3_win_6_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg3_win_6_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_after:
	extern	msg3_after_7_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg3_after_7_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg4:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg4_0:
	extern	msg4_0_8_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg4_0_8_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_win:
	extern	msg4_win_9_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg4_win_9_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_after:
	extern	msg4_after_10_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg4_after_10_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg5:
	db	CALL_MSG

	ld	hl,d_talk2
	call	DealerTalking

	jp	msg_return


msg5_0:
	extern	msg5_0_11_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg5_0_11_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_win:
	extern	msg5_win_12_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg5_win_12_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_after:
	extern	msg5_after_13_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg5_after_13_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg6:
	db	CALL_MSG

	ld	hl,msg6_0$
	call	put_win_msg

	ld	a,170
	call	look_guide

	jp	msg_return


msg6_0$:
	extern	msg6_0_14_D10R0110
	db I_MSG2	; mvmsg追加
	dw msg6_0_14_D10R0110	; mvmsg追加
	db 021h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



sxy_d10r1f10:
	include	..\sxy\d10r0110.sxy

silf_11f:
	include	..\mapdata\silf_11f.map


