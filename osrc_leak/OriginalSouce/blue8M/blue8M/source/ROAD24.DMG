
	include		common.def
	include		fntequ.def
	include		maphead.def
	include		dealer.def
	include		vanish.def
	include		macro.h
	include		group.def


bank14	group	G_BANK14



	public	road24_event
	public	road24_msg

	extern	table_jump
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking

seq_r24		equ	seq_ctrl_buf + 012h


road24_event:
	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,r24_tbl
	ld	a,(seq_r24)
	call	battle_sequence
	ld	(seq_r24),a

	ret


return:
	xor	a
	ld	(cancel_key),a
	ld	(seq_r24),a
	ld	(AdrsDealerTalk + 9),a

	ret


r24_tbl:
	initndw	danin_stopper,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after
	ndw	vs_after,seq_vs_after
	ndw	stepback,seq_stepback


danin_stopper:
	ld	a,(ev_r24 + 0)
	bit	0,a				; obtained "kin-no-tama"
	jp	nz,battle_main

	ld	hl,stopper$
	extern	CheckAssignPos
	call	CheckAssignPos
	jp	nc,battle_main

	xor	a
	ld	(joy_status),a

	ld	a,msg_danin1
	ld	(work1),a
	call	talk_map

	ld	hl,ev_r24 + 1
	bit	1,(hl)
	res	1,(hl)
	ret	z

	ld	a,080h				; animetion pattern
	ld	(ctrl_move_val),a
	ld	a,1				; animetion pattern lot
	ld	(ctrl_move_cnt),a

	extern	init_hero_anime
	call	init_hero_anime

	ld	a,seq_stepback
	ld	(seq_r24),a
	ld	(AdrsDealerTalk + 9),a

	ret


stopper$:
	db	00fh,00ah
	db	0ffh


stepback:
	ld	a,(ctrl_move_cnt)
	and	a
	ret	nz

	extern	put_wait
	call	put_wait

	ld	a,seq_battle_main
	ld	(seq_r24),a
	ld	(AdrsDealerTalk + 9),a

	ret


vs_after:
	ld	a,(fighting_flg)
	cp	0ffh
	jp	z,return			; to okido school(losing)

	call	actor_blanch

	ld	a,0f0h
	ld	(cancel_key),a

	ld	hl,ev_r24 + 0
	set	1,(hl)

	ld	a,msg_danin1
	ld	(work1),a
	call	talk_map

	xor	a
	ld	(cancel_key),a

	ld	a,seq_battle_main
	ld	(seq_r24),a
	ld	(AdrsDealerTalk + 9),a

	ret



road24_msg:
	msgndw	msg1,msg_danin1			; 1
	ndw	msg2,msg_boysc1			; 2
	ndw	msg4,msg_boysc2			; 3
	ndw	msg5,msg_mini2			; 4
	ndw	msg6,msg_mushi1			; 5
	ndw	msg7,msg_mini3			; 6
	ndw	msg8,msg_mushi2			; 7
	ndw	capsule_item,MsgCapsule1



dealer_talk:
d_talk1:
	db	msg_boysc1,040h
	dw	ev_r24 + 0
	dw	msg2_0
	dw	msg2_after
	dw	msg2_win
	dw	msg2_win

d_talk3:
	db	msg_boysc2,010h
	dw	ev_r24 + 0
	dw	msg4_0
	dw	msg4_after
	dw	msg4_win
	dw	msg4_win

d_talk4:
	db	msg_mini2,010h
	dw	ev_r24 + 0
	dw	msg5_0
	dw	msg5_after
	dw	msg5_win
	dw	msg5_win

d_talk5:
	db	msg_mushi1,010h
	dw	ev_r24 + 0
	dw	msg6_0
	dw	msg6_after
	dw	msg6_win
	dw	msg6_win

d_talk6:
	db	msg_mini3,010h
	dw	ev_r24 + 0
	dw	msg7_0
	dw	msg7_after
	dw	msg7_win
	dw	msg7_win

d_talk7:
	db	msg_mushi2,010h
	dw	ev_r24 + 0
	dw	msg8_0
	dw	msg8_after
	dw	msg8_win
	dw	msg8_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	hl,ev_r24 + 1
	res	1,(hl)

	ld	a,(ev_r24 + 0)
	bit	0,a
	jr	nz,after$

golden$:
	ld	hl,msg1_0
	call	put_win_msg

	ld	bc,49 * 256 + 1
	call	take_item
	jr	nc,full$

	ld	hl,ev_r24 + 0
	set	0,(hl)

	ld	hl,msg1_1
	call	put_win_msg

	ld	hl,msg1_3
	call	put_win_msg

	ld	hl,event_flg
	set	6,(hl)
	set	7,(hl)

	ld	hl,msg1_4			; hero lose
	ld	de,msg1_4			; hero win
	call	set_battle_msg

	ld	a,(work1)
	ld	(sv_msg_no),a
	call	set_battle
	call	set_battle_data

	xor	a
	ld	(joy_status),a

	ld	a,seq_vs_after
	ld	(seq_r24),a
	ld	(AdrsDealerTalk + 9),a

	jp	msg_return


after$:
	ld	hl,msg1_5
	call	put_win_msg

	jp	msg_return


full$:
	ld	hl,msg1_2
	call	put_win_msg

	ld	hl,ev_r24 + 1
	set	1,(hl)

	jp	msg_return


msg1_0:
	extern	msg1_0_0_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg1_0_0_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db	FANFARE
	extern	msg1_0_1_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg1_0_1_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg1_1:
	extern	msg1_1_2_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg1_1_2_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db	FANFARE
	db	WAIT
	db	EOM

msg1_2:
	extern	msg1_2_3_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg1_2_3_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_3:
	extern	msg1_3_4_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg1_3_4_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_4:
	extern	msg1_4_5_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg1_4_5_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_5:
	extern	msg1_5_6_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg1_5_6_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg4:
	db	CALL_MSG

	ld	hl,d_talk3
	call	DealerTalking

	jp	msg_return


msg5:
	db	CALL_MSG

	ld	hl,d_talk4
	call	DealerTalking

	jp	msg_return



msg6:
	db	CALL_MSG

	ld	hl,d_talk5
	call	DealerTalking

	jp	msg_return


msg7:
	db	CALL_MSG

	ld	hl,d_talk6
	call	DealerTalking

	jp	msg_return


msg8:
	db	CALL_MSG

	ld	hl,d_talk7
	call	DealerTalking

	jp	msg_return


msg2_0:
	extern	msg2_0_7_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg2_0_7_ROAD24	; mvmsg追加
	db 024h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_win:
	extern	msg2_win_8_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg2_win_8_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_after:
	extern	msg2_after_9_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg2_after_9_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_0: 
	extern	msg4_0_10_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg4_0_10_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_win:
	extern	msg4_win_11_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg4_win_11_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_after:
	extern	msg4_after_12_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg4_after_12_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_0:
	extern	msg5_0_13_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg5_0_13_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_win:
	extern	msg5_win_14_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg5_win_14_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_after:
	extern	msg5_after_15_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg5_after_15_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_0:
	extern	msg6_0_16_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg6_0_16_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_win:
	extern	msg6_win_17_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg6_win_17_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_after:
	extern	msg6_after_18_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg6_after_18_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg7_0:
	extern	msg7_0_19_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg7_0_19_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7_win:
	extern	msg7_win_20_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg7_win_20_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7_after:
	extern	msg7_after_21_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg7_after_21_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg8_0:
	extern	msg8_0_22_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg8_0_22_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg8_win:
	extern	msg8_win_23_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg8_win_23_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg8_after:
	extern	msg8_after_24_ROAD24
	db I_MSG2	; mvmsg追加
	dw msg8_after_24_ROAD24	; mvmsg追加
	db 025h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


