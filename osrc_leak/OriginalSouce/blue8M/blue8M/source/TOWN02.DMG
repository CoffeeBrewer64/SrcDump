
	include		common.def
	include		fntequ.def
	include		anime.def
	include		maphead.def
	include		vanish.def
	include		macro.h
	include		group.def

	
bank6 	group	G_BANK6


	public	town2_event
	public	town2_msg


	extern	put_wait
	extern	table_jump
	extern	actor_anime_set
	extern	yes_no
	extern	pf_kanban
	extern	hotel_kanban
	extern	acttbl_l_adrs


seq_t2		equ	seq_ctrl_buf + 4	; event sequence number


town2_event:
	call	init_for_talkmap

	ld	hl,town02_tbl
	ld	a,(seq_t2)    
	jp	table_jump




town02_tbl:
	initndw	normal,seq_normal
	ndw	ball_event,seq_ball_event
	ndw	obs_ball_event,seq_obs_ball_event
	ndw	obs_stepback,seq_obs_stepback



normal:
	call	gym_stopper

	jp	way_stopper


gym_stopper:
	ld	a,(ev_t2)
	bit	0,a
	ret	nz				; event finished

	ld	a,(my_badge + 0)
	cp	07fh
	jr	nz,hook$

	ld	hl,ev_t2
	set	0,(hl)

	ret


hook$:
	ld	a,(mapscloll_y)
	cp	008h
	ret	nz

	ld	a,(mapscloll_x)
	cp	020h
	ret	nz

	ld	a,msg_gym_stop
	ld	(work1),a
	call	talk_map

	xor	a
	ld	(joy_status),a

	call	stepback

	ld	a,seq_obs_stepback
	ld	(seq_t2),a

	ret


way_stopper:
	ld	a,(ev_t1_3)
	bit	5,a
	ret	nz				; obtained pocket mguide-book

	ld	a,(mapscloll_y)
	cp	009h
	ret	nz

	ld	a,(mapscloll_x)
	cp	013h
	ret	nz

set$:
	ld	a,msg_gsan2
	ld	(work1),a
	call	talk_map

	xor	a
	ld	(joy_status),a

	call	stepback

	ld	a,seq_obs_stepback
	ld	(seq_t2),a

	ret


ball_event:
	ld	a,(actor_table + 034h)
	ld	(sv_box01),a
	ld	a,(actor_table + 036h)
	ld	(sv_box02),a
	ld	a,(actor_table + 134h)
	ld	(sv_box03),a
	ld	a,(actor_table + 135h)
	ld	(sv_box04),a

	xor	a
	ld	(scloll_sv),a
	ld	a,1
	ld	(demo_fight_no),a
	ld	a,5
	ld	(mons_level),a
	ld	a,112
	ld	(event_fight_no),a

	ld	a,seq_obs_ball_event
	ld	(seq_t2),a

	ret


obs_ball_event:
	ld	a,(sv_box01)
	ld	(actor_table + 034h),a
	ld	a,(sv_box02)
	ld	(actor_table + 036h),a
	ld	a,(sv_box03)
	ld	(actor_table + 134h),a
	ld	a,(sv_box04)
	ld	(actor_table + 135h),a

	call	actor_blanch

	call	put_wait

	xor	a
	ld	(cancel_key),a

	ld	a,msg_ball_after		; message after battle demo
	ld	(work1),a
	call	talk_map

	xor	a
	ld	(demo_fight_no),a
	ld	(cancel_key),a

	ld	a,seq_normal
	ld	(seq_t2),a

	ret


obs_stepback:
	ld	a,(ctrl_move_cnt)
	and	a
	ret	nz

	call	put_wait

	ld	a,seq_normal
	ld	(seq_t2),a

	ret


stepback:
	extern	init_hero_anime
	call	init_hero_anime

	ld	a,1				; animetion pattern lot
	ld	(ctrl_move_cnt),a
	ld	a,W_D				; animetion pattern
	ld	(ctrl_move_val),a

	xor	a
	ld	(actor_table + 009h),a
	ld	(cancel_key),a

	ret


town2_msg:
	msgndw	msg1,msg_shounen1
	ndw	msg2,msg_gsan1
	ndw	msg3,msg_seinen1
	ndw	msg4,msg_neechyan1
	ndw	msg5,msg_gsan2
	ndw	msg6,msg_seinen2
	ndw	msg7,msg_gsan3
	ndw	kanban1,msg_kanban1
	ndw	kanban2,msg_kanban2
	ndw	kanban3,msg_kanban3
	ndw	pf_kanban,msg_kanban4
	ndw	hotel_kanban,msg_kanban5
	ndw	kanban6,msg_kanban6
	ndw	gym_stop,msg_gym_stop
	ndw	ball_after,msg_ball_after



msg1:
	extern	msg1_0_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg1_0_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg2:
	db	CALL_MSG

	ld	a,(my_badge + 0)
	cp	07fh
	ld	hl,msg2_1$
	jr	z,rts$

	ld	a,(ev_t2_5 + 0)
	bit	1,a
	jr	nz,rts$

	ld	hl,msg2_0$

rts$:
	call	put_win_msg

	jp	msg_return


msg2_0$:
	extern	msg2_0_1_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg2_0_1_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg2_1$:
	extern	msg2_1_2_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg2_1_2_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3:
	db	CALL_MSG

	ld	hl,msg3_0$
	call	put_win_msg

	call	yes_no
	ld	a,(allow_cnt)
	and	a
	jr	nz,no_select$

	ld	hl,msg3_2$
	call	put_win_msg

	jr	rts$


no_select$:
	ld	hl,msg3_1$
	call	put_win_msg

rts$:
	jp	msg_return


msg3_0$:
	extern	msg3_0_3_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg3_0_3_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg3_1$:
	extern	msg3_1_4_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg3_1_4_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg3_2$:
	extern	msg3_2_5_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg3_2_5_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4:
	db	CALL_MSG

	ld	a,(ev_t1_3)
	bit	5,a				; check obtained guide-book
	jr	nz,obtained$

	ld	hl,msg4_0$
	call	put_win_msg

	jr	rts$


obtained$:
	ld	hl,msg4_1$
	call	put_win_msg

rts$:
	jp	msg_return


msg4_0$:
	extern	msg4_0_6_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg4_0_6_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg4_1$:
	extern	msg4_1_7_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg4_1_7_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5:
	db	CALL_MSG

	ld	hl,msg5_0$
	call	put_win_msg

	call	stepback

	ld	a,seq_obs_stepback
	ld	(seq_t2),a

	jp	msg_return


msg5_0$:
	extern	msg5_0_8_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg5_0_8_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6:
	db	CALL_MSG

	ld	a,(ev_t2)
	bit	1,a
	jr	nz,yet$

	ld	hl,msg6_0$
	call	put_win_msg

	ld	bc,242 * 256 + 1
	call	take_item
	jr	nc,full$

	ld	hl,msg6_1$
	call	put_win_msg

	ld	hl,ev_t2
	set	1,(hl)

	jr	rts$


full$:
	ld	hl,msg6_3$
	call	put_win_msg

	jr	rts$


yet$:
	ld	hl,msg6_2$
	call	put_win_msg

rts$:
	jp	msg_return


msg6_0$:
	extern	msg6_0_9_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg6_0_9_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_1$:
	extern	msg6_1_10_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg6_1_10_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db	FANFARE5
	db	EOM


msg6_2$:
	extern	msg6_2_11_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg6_2_11_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg6_3$:
	extern	msg6_3_12_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg6_3_12_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg7:
	db	CALL_MSG

	ld	hl,msg7_1$
	call	put_win_msg

	ld	c,2
	call	wait_vb_s

	call	yes_no
	ld	a,(allow_cnt)
	and	a
	jr	z,event_cancel$

	ld	hl,msg7_2$
	call	put_win_msg

	ld	a,seq_ball_event
	ld	(seq_t2),a

	jr	rts$


event_cancel$:
	ld	hl,msg7_3$
	call	put_win_msg

rts$:
	jp	msg_return


msg7_1$:
	extern	msg7_1_13_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg7_1_13_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7_2$:
	extern	msg7_2_14_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg7_2_14_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7_3$:
	extern	msg7_3_15_TOWN02
	db I_MSG2	; mvmsg追加
	dw msg7_3_15_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

ball_after:
	extern	ball_after_16_TOWN02
	db I_MSG2	; mvmsg追加
	dw ball_after_16_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


kanban1:
	extern	kanban1_17_TOWN02
	db I_MSG2	; mvmsg追加
	dw kanban1_17_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


kanban2:
	extern	kanban2_18_TOWN02
	db I_MSG2	; mvmsg追加
	dw kanban2_18_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


kanban3:
	extern	kanban3_19_TOWN02
	db I_MSG2	; mvmsg追加
	dw kanban3_19_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


kanban6:
	extern	kanban6_20_TOWN02
	db I_MSG2	; mvmsg追加
	dw kanban6_20_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

gym_stop:
	extern	gym_stop_21_TOWN02
	db I_MSG2	; mvmsg追加
	dw gym_stop_21_TOWN02	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


