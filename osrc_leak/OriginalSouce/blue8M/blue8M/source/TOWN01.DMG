
	include		common.def
	include		fntequ.def
	include		anime.def
	include		maphead.def
	include		banktool.def
	include		pm_debug.def
	include		dealer.def
	include		vanish.def
	include		macro.h
	include		group.def


bank6	group	G_BANK6


	public	ev_town01
	public	msg_town01


	extern	put_wait
	extern	bank_push_call
	extern	bank2bank
	extern	table_jump
	extern	memset
	extern	yes_no
	extern	actor_anime_set
	extern	acttbl_l_adrs
	extern	acttbl_h_adrs
	extern	set_battle_msg
	extern	capsule_item
	extern	set_battle
	extern	missing
	extern	set_battle_data
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	obj_stopping
	extern	SetActorSite

	extern	musohkido
	extern	direct_play


seq_t1		equ	seq_ctrl_buf + 1	; event sequence number


ev_town01:
	ld	a,(ev_t1_3)
	bit	4,a				; check obtained pm-ball
	jr	z,no_obtain_ball$

	ld	hl,ev_t1
	set	6,(hl)				; just after obtained pm

no_obtain_ball$:
	call	init_for_talkmap

	ld	hl,town01_tbl
	ld	a,(seq_t1)    
	jp	table_jump			; event routine address (hl)




;-----------------------------;
; event routine address table ;
;-----------------------------;
town01_tbl:
	initndw	t1_main,seq_t1_main
	ndw	okido_event,seq_okido_event
	ndw	okido_step0,seq_okido_step0
	ndw	okido_step1,seq_okido_step1

	ndw	obs_demo1,seq_obs_demo1
	ndw	t1_free,seq_t1_free
	ndw	t1_normal,seq_t1_normal


t1_main:
	ld	a,(ev_t1)
	bit	0,a
	ret	nz

	ld	a,(mapscloll_y)
	cp	01h
	ret	nz

	xor	a
	ld	(joy_status),a

	ld	a,4
	ld	(watashi_muki),a

	ld	a,0ffh				; Town Bank Initialize
	call	play

	ld	a,MUSIC_BANK1_NO		; Set Bank
	ld	c,a
	ld	a,< musohkido			; okido music
	call	direct_play

	ld	a,0fch
	ld	(cancel_key),a

	ld	hl,ev_t1_3
	set	7,(hl)				; missing okido in boarder

	ld	a,seq_okido_event
	ld	(seq_t1),a

	ret


;-------------------;
; okido event start ;
;-------------------;
okido_event:
	xor	a
	ld	(event_check),a			; first talk

	ld	a,msg_okido
	ld	(work1),a
	call	talk_map

	ld	a,0ffh
	ld	(cancel_key),a

	ld	a,T1msg1
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_APPEAR
	call	bank2bank

	ld	a,seq_okido_step0
	ld	(seq_t1),a

	ret


okido_step0:
	ld	a,msg_okido
	ld	(work1),a
	ld	a,04h
	ld	(work2),a
	call	SetActorSite

	call	put_wait

	ld	a,001h
	ld	(mapscloll_y),a

	ld	a,1
	ld	(calc_work6),a			; point of view as command
	ld	a,msg_okido
	swap	a				; * 010h
	ld	(calc_work0),a
	ld	a,B_OFFSET_ADRS
	call	bank2bank			; get character position

	ld	hl,calc_work0
	dec	(hl)				; front psoition ( north step )

	ld	a,B_MK_ANIME
	call	bank2bank			; get animetion commands

	ld	de,work_anime_buf
	ld	a,msg_okido
	ld	(work1),a
	call	actor_anime_set

	ld	a,0ffh
	ld	(cancel_key),a			; all key cancel

	ld	a,seq_okido_step1
	ld	(seq_t1),a

	ret


okido_step1:
	ld	a,(obs_system)
	bit	0,a
	ret	nz

	xor	a
	ld	(actor_table + 09h),a		; look lower

	ld	a,1
	ld	(event_check),a			; second talk

	ld	a,0fch
	ld	(cancel_key),a			; allow a, b button

	ld	a,msg_okido
	ld	(work1),a
	call	talk_map

	ld	a,0ffh
	ld	(cancel_key),a

	ld	a,msg_okido
	ld	(sv_msg_no),a

	xor	a
	ld	(seq_demo),a			; demo sequence number
	ld	a,1
	ld	(demo_flag + 0),a		; town01 1st event
	ld	a,(rombankno)
	ld	(demo_flag + 1),a		; demo prg bank

	ld	a,seq_obs_demo1
	ld	(seq_t1),a

	ret


obs_demo1:
	ld	a,(demo_flag + 0)
	and	a
	ret	nz

	ld	a,seq_t1_free
	ld	(seq_t1),a

	ret


t1_free:
	ld	a,(ev_t1_2)
	bit	2,a				; switch end
	jr	nz,other$

	and	00000011b
	cp	00000011b
	jr	nz,other$

	ld	hl,ev_t1_2
	set	2,(hl)				; once exist(from t01r0201)

	ld	a,T1R2F1msg1
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank

	ld	a,T1R2F1msg2
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_APPEAR
	jp	bank2bank


other$:
	ld	a,(ev_t1_3)
	bit	4,a
	ret	z

	ld	hl,ev_t1_3
	set	6,(hl)				; message table change(t1r3f1)


t1_normal:
	ret



;--------------------;
; conversation event ;
;--------------------;
msg_town01:
	msgndw	msg1,msg_okido
	ndw	msg2,msg_woman1
	ndw	msg3,msg_man1

	ndw	kan1,msg_labo
	ndw	kan2,msg_info1
	ndw	kan3,msg_myhome
	ndw	kan4,msg_rivalhome


msg1:
	db	CALL_MSG

	ld	a,(event_check)
	and	a
	jr	nz,second$

	ld	a,1
	ld	(wait_pass_flg),a

	ld	hl,msg1_0$

	jr	rts$


second$:
	ld	hl,msg1_1$

rts$:
	call	put_win_msg

	jp	msg_return


msg1_0$:
	extern	msg1_0_0_TOWN01
	db I_MSG2	; mvmsg追加
	dw msg1_0_0_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加

	db	CALL_MSG

	ld	c,10
	call	wait_vb_s

	xor	a
	ld	(usr_buf + 18),a
	ld	(usr_buf + 19),a
	ld	a,B_BIKKURI
	call	bank2bank

	ld	a,4
	ld	(watashi_muki),a

	jp	msg_return


msg1_1$:
	extern	msg1_1_1_TOWN01
	db I_MSG2	; mvmsg追加
	dw msg1_1_1_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2:
	extern	msg2_2_TOWN01
	db I_MSG2	; mvmsg追加
	dw msg2_2_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3:
	extern	msg3_3_TOWN01
	db I_MSG2	; mvmsg追加
	dw msg3_3_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

kan1:
	extern	kan1_4_TOWN01
	db I_MSG2	; mvmsg追加
	dw kan1_4_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


kan2:
	extern	kan2_5_TOWN01
	db I_MSG2	; mvmsg追加
	dw kan2_5_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


kan3:
	extern	kan3_6_TOWN01
	db I_MSG2	; mvmsg追加
	dw kan3_6_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


kan4:
	extern	kan4_7_TOWN01
	db I_MSG2	; mvmsg追加
	dw kan4_7_TOWN01	; mvmsg追加
	db 029h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



