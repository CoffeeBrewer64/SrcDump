
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	dealer.def
	include	vanish.def
	include	anime.def
	include	macro.h
	include	group.def


bank12	group	G_BANK12


	public	d2_room3


	extern	put_wait
	extern	obj_stopping
	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item
	extern	CheckAssignPos
	extern	SetActorSite
	extern	yes_no

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking



DOUKUTU_TYPE	equ	17
EXIT		=	0ffh


seq_d2r1f3	equ	seq_ctrl_buf + 017h


d2_room3:
ysiz	=	18
xsiz	=	20
	db	DOUKUTU_TYPE	
	db	ysiz,xsiz		; yx size
	dw	dungeon2_3		; map data adrs
	dw	msg_d2r1f3		; message tbl adrs
	dw	ev_d2r1f3		; event routine adrs
	db	0			; map link flg
	dw	sxy_d2r1f3


ev_d2r1f3:
	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,d2r1f3_tbl
	ld	a,(seq_d2r1f3)
	call	battle_sequence
	ld	(seq_d2r1f3),a

CheckNoEncount:
	ld	a,(ev_d2 + 1)
	bit	1,a				; check battle vs science
	ret	z

	ld	hl,NoEncountSpace$
	call	CheckAssignPos
	jr	nc,ne$

	ld	hl,obs_player
	set	4,(hl)

	ret


ne$:
	ld	hl,obs_player
	res	4,(hl)

	ret


NoEncountSpace$:
	db	005h,00bh
	db	005h,00ch
	db	005h,00dh
	db	005h,00eh
	db	006h,00bh
	db	006h,00ch
	db	006h,00dh
	db	006h,00eh
	db	007h,00bh
	db	007h,00ch
	db	007h,00dh
	db	007h,00eh
	db	008h,00bh
	db	008h,00ch
	db	008h,00dh
	db	008h,00eh
	db	0ffh


return:
	xor	a
	ld	(cancel_key),a
	ld	(seq_d2r1f3),a
	ld	(AdrsDealerTalk + 9),a

	ret


d2r1f3_tbl:
	initndw	check_science,seq_check_science
;	ndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after
	ndw	vs_after,seq_vs_after
	ndw	science_get,seq_science_get
	ndw	s_step,seq_s_step


check_science:
	ld	a,(ev_d2 + 1)
	bit	1,a				; check battle vs science
	jp	nz,other_check$

	ld	a,(mapscloll_y)
	cp	008h
	jp	nz,other_check$

	ld	a,(mapscloll_x)
	cp	00dh
	jp	nz,other_check$

	xor	a
	ld	(joy_status),a

	ld	a,msg_science1
	ld	(work1),a
	jp	talk_map			; (with setting sequence number)


other_check$:
	ld	a,(ev_d2 + 1)
	and	11000000b
	jp	z,battle_main

	ret


vs_after:
	ld	a,(fighting_flg)
	cp	0ffh
	jp	z,return			; losing return

;	ld	a,0f0h
;	ld	(cancel_key),a

;	ld	a,(event_flg)
;	bit	6,a				; battle wait check
;	ret	nz

	call	actor_blanch

	call	put_wait

	ld	hl,ev_d2 + 1
	set	1,(hl)

	xor	a
	ld	(cancel_key),a

	ld	a,seq_check_science
	ld	(seq_d2r1f3),a
	ld	(AdrsDealerTalk + 9),a

	ret


science_get:
	ld	a,msg_science1
	ld	(work1),a
	call	obj_stopping

	ld	hl,HeroPickPos1$		; check left fossil
	call	CheckAssignPos
	jr	c,left$

	ld	hl,HeroPickPos2$		; check right fossil
	call	CheckAssignPos
	jp	nc,battle_main

	ld	de,step_l$

	jr	rts$


left$:
	ld	de,step_r$

rts$:
	ld	a,msg_science1
	ld	(work1),a
	call	actor_anime_set

	ld	a,seq_s_step
	ld	(seq_d2r1f3),a
	ld	(AdrsDealerTalk + 9),a

	ret


HeroPickPos1$:
	db	007h,00ch
	db	006h,00bh
	db	005h,00ch
	db	0ffh


HeroPickPos2$:
	db	007h,00dh
	db	006h,00eh
	db	005h,00eh
	db	0ffh


step_r$:
	db	A_R

step_l$:
	db	A_U,A_E


s_step:
	ld	a,(obs_system)
	bit	0,a
	ret	nz

	ld	a,0f0h
	ld	(cancel_key),a

	ld	a,1
	ld	(wait_pass_flg),a

	ld	a,msg_msg1_get
	ld	(work1),a
	call	talk_map

	ld	a,(ev_d2 + 1)
	bit	6,a
	jr	z,oth$

	ld	a,D2R1F3msg7

	jr	vanish$


oth$:
	ld	a,D2R1F3msg6

vanish$:
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank

	xor	a
	ld	(cancel_key),a

	ld	a,seq_check_science
	ld	(seq_d2r1f3),a
	ld	(AdrsDealerTalk + 9),a

	ret


msg_d2r1f3:
	msgndw	msg1,msg_science1
	ndw	msg2,msg_member1
	ndw	msg3,msg_member2
	ndw	msg4,msg_member3
	ndw	msg5,msg_member4
	ndw	msg6,msg_capsule1
	ndw	msg7,msg_capsule2
	ndw	capsule_item,msg_capsule3
	ndw	capsule_item,msg_capsule4

	ndw	msg1_get,msg_msg1_get


dealer_talk:
d_talk1:
	db	msg_member1,040h
	dw	ev_d2 + 1
	dw	msg2_0
	dw	msg2_after
	dw	msg2_win
	dw	msg2_win

d_talk2:
	db	msg_member2,040h
	dw	ev_d2 + 1
	dw	msg3_0
	dw	msg3_after
	dw	msg3_win
	dw	msg3_win

d_talk3:
	db	msg_member3,040h
	dw	ev_d2 + 1
	dw	msg4_0
	dw	msg4_after
	dw	msg4_win
	dw	msg4_win

d_talk4:
	db	msg_member4,040h
	dw	ev_d2 + 1
	dw	msg5_0
	dw	msg5_after
	dw	msg5_win
	dw	msg5_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	a,(ev_d2 + 1)
	bit	1,a				; check battle experience
	jr	z,battle_invoke$

	and	11000000b
	jr	nz,obtained$

	ld	hl,after1
	call	put_win_msg			; before obtain fossil

	jr	rts$


battle_invoke$:
	ld	hl,msg1_0
	call	put_win_msg

	ld	hl,event_flg
	set	6,(hl)
	set	7,(hl)

	ld	hl,msg1_win			; hero lose
	ld	de,msg1_win			; hero win
	call	set_battle_msg

	ld	a,(work1)
	ld	(sv_msg_no),a
	call	set_battle
	call	set_battle_data

	ld	a,seq_vs_after
	ld	(seq_d2r1f3),a
	ld	(AdrsDealerTalk + 9),a

	jr	rts$


obtained$:
	ld	hl,after2
	call	put_win_msg			; after obtained fossil

rts$:
	jp	msg_return


msg2:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg3:
	db	CALL_MSG

	ld	hl,d_talk2
	call	DealerTalking

	jp	msg_return


msg4:
	db	CALL_MSG

	ld	hl,d_talk3
	call	DealerTalking

	jp	msg_return


msg5:
	db	CALL_MSG

	ld	hl,d_talk4
	call	DealerTalking

	jp	msg_return


msg6:
	db	CALL_MSG

	ld	a,1
	ld	(wait_pass_flg),a

	ld	hl,msg6_0$
	call	put_win_msg

	call	yes_no
	ld	a,(allow_cnt)
	and	a
	jr	nz,rts$

	ld	bc,41 * 256 + 1
	call	take_item
	jp	nc,fossil_full

	call	fossil_get

	ld	a,D2R1F3msg6
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank

	ld	hl,ev_d2 + 1
	set	6,(hl)

	ld	a,seq_science_get
	ld	(seq_d2r1f3),a
	ld	(AdrsDealerTalk + 9),a

rts$:
	jp	msg_return


msg6_0$:
	extern	msg6_0_0_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg6_0_0_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg7:
	db	CALL_MSG

	ld	a,1
	ld	(wait_pass_flg),a

	ld	hl,msg7_0$
	call	put_win_msg

	call	yes_no
	ld	a,(allow_cnt)
	and	a
	jr	nz,rts$

	ld	bc,42 * 256 + 1
	call	take_item
	jp	nc,fossil_full

	call	fossil_get

	ld	a,D2R1F3msg7
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank

	ld	hl,ev_d2 + 1
	set	7,(hl)

	ld	a,seq_science_get
	ld	(seq_d2r1f3),a
	ld	(AdrsDealerTalk + 9),a

rts$:
	jp	msg_return


msg7_0$:
	extern	msg7_0_1_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg7_0_1_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加




fossil_get:
	ld	hl,msg_fossil_get
	jp	put_win_msg


msg_fossil_get:
	extern	msg_fossil_get_2_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg_fossil_get_2_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db	FANFARE6
	db	WAIT_NP
	db	EOM



fossil_full:
	ld	hl,msg_fossil_full
	call	put_win_msg

	jp	msg_return


msg_fossil_full:
	extern	msg_fossil_full_3_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg_fossil_full_3_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db	WAIT_NP
	db	EOM


msg1_0:
	extern	msg1_0_4_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg1_0_4_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_win:
	extern	msg1_win_5_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg1_win_5_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


after1:
	extern	after1_6_D02R0103
	db I_MSG2	; mvmsg追加
	dw after1_6_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


after2:
	extern	after2_7_D02R0103
	db I_MSG2	; mvmsg追加
	dw after2_7_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_get:
	extern	msg1_get_8_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg1_get_8_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db	FANFARE6
	db	EOM


msg2_0:
	extern	msg2_0_9_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg2_0_9_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_win:
	extern	msg2_win_10_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg2_win_10_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_after:
	extern	msg2_after_11_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg2_after_11_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_0:
	extern	msg3_0_12_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg3_0_12_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_win:
	extern	msg3_win_13_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg3_win_13_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_after:
	extern	msg3_after_14_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg3_after_14_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_0:
	extern	msg4_0_15_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg4_0_15_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_win:
	extern	msg4_win_16_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg4_win_16_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_after:
	extern	msg4_after_17_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg4_after_17_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_0:
	extern	msg5_0_18_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg5_0_18_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_win:
	extern	msg5_win_19_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg5_win_19_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_after:
	extern	msg5_after_20_D02R0103
	db I_MSG2	; mvmsg追加
	dw msg5_after_20_D02R0103	; mvmsg追加
	db 020h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



sxy_d2r1f3:
	include	..\sxy\d02r0103.sxy

dungeon2_3:
	include	..\mapdata\otuki_b2.map   

