
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	dealer.def
	include macro.h
	include	group.def
	include	pm_debug.def



bank17	group	G_BANK17


	public	t6_room4


	extern	gym_setting
	extern	bank2bank
	extern	table_jump
	extern	actor_anime_set   
	extern	yes_no
	extern	search_hit
	extern	game_over
;;	extern	gym_judge
	extern	set_battle
	extern	set_battle_data
	extern	set_battle_msg
	extern	obj_stepping
	extern	obj_stopping

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking

	extern	musdoor



CHAMPCUP_TYPE	equ	7
EXIT		=	0ffh


seq_t6r4f1	equ	seq_ctrl_buf + 00eh


t6_room4:
ysiz	=	9
xsiz	=	5
	db	CHAMPCUP_TYPE
	db	ysiz,xsiz		; yx size
	dw	dojo_04			; map data adrs
	dw	msg_t6r4f1		; message tbl adrs
	dw	ev_t6r4f1		; event routine adrs
	db	0			; map link flg
	dw	sxy_t6r4f1


ev_t6r4f1:
	ld	hl,ptn_data
	bit	5,(hl)
	res	5,(hl)
	push	hl
	call	nz,init_gym
	pop	hl
	bit	6,(hl)
	res	6,(hl)
	call	nz,door_check

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,t6r4f1_tbl
	ld	a,(seq_t6r4f1)
	call	battle_sequence
	ld	(seq_t6r4f1),a

	ret


init_gym:
	ld	hl,t_name$
	ld	de,l_name$
	jp	gym_setting


t_name$:
  ifn	pm_jmsg
	db	ku__,ti__,ba__
	db	EOM
  else
	db	usf_v,usf_e,usf_r,usf_m,usf_i,usf_l,usf_i,usf_o,usf_n,spc@,usf_c,usf_i,usf_t,usf_y
	db	EOM
  endif


l_name$:
  ifn	pm_jmsg
	db	ma__,ti__,su__
	db	EOM
  else
	db	usf_l,usf_t,kten@,usf_s,usf_u,usf_r,usf_g,usf_e
	db	EOM
  endif



door_check:
	ld	a,(ev_t6_4)			; set in "ev_tool.src"
	bit	0,a
	jr	nz,open$

	ld	a,024h + 00h			; door cell-block

	jr	set$


open$:
	ld	a,musdoor
	call	play

	ld	a,005h + 00h			; floor cell-block

set$:
	ld	(el_c),a
	ld	bc,002h * 0100h + 002h
	ld	a,B_BGCELL_CHANGE
	jp	bank2bank



return:
	xor	a
	ld	(cancel_key),a
	ld	(seq_t6r4f1),a
	ld	(AdrsDealerTalk + 9),a

	ret


t6r4f1_tbl:
	initndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after
	ndw	vs_after,seq_vs_after


vs_after:
	ld	a,(fighting_flg)
	cp	0ffh
	jp	z,return			; to okido school(losing)

;	call	actor_blanch

	ld	a,0f0h
	ld	(cancel_key),a

obtain_machine:
	ld	a,msg_vs_after1
	ld	(work1),a
	call	talk_map

	ld	hl,ev_t6_4
	set	7,(hl)

	ld	bc,224 * 256 + 1
	call	take_item
	jr	nc,full$

	ld	a,msg_vs_after2
	ld	(work1),a
	call	talk_map

	ld	hl,ev_t6_4
	set	6,(hl)

	jr	rts$


full$:
	ld	a,msg_vs_after3
	ld	(work1),a
	call	talk_map

rts$:
	ld	hl,my_badge + 0
	set	2,(hl)

	ld	hl,ev_champ + 0
	set	2,(hl)

	ld	a,(ev_t6_4)
	or	00011100b
	ld	(ev_t6_4),a

	jp	return


msg_t6r4f1:
	msgndw	msg1,msg_matisu
	ndw	msg2,msg_estrange1
	ndw	msg3,msg_groove1
	ndw	msg4,msg_sailor1
	ndw	msg5,msg_danpei

	ndw	msg1_0,msg_vs_after1
	ndw	msg1_1,msg_vs_after2
	ndw	msg1_2,msg_vs_after3



dealer_talk:
d_talk1:
	db	msg_estrange1,030h
	dw	ev_t6_4
	dw	msg2_0
	dw	msg2_after
	dw	msg2_win
	dw	msg2_win

d_talk2:
	db	msg_groove1,020h
	dw	ev_t6_4
	dw	msg3_0
	dw	msg3_after
	dw	msg3_win
	dw	msg3_win

d_talk3:
	db	msg_sailor1,030h
	dw	ev_t6_4
	dw	msg4_0
	dw	msg4_after
	dw	msg4_win
	dw	msg4_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	a,(ev_t6_4)
	bit	7,a
	jr	z,battle$

	bit	6,a
	jr	nz,after$

	call	z,obtain_machine

	extern	WaitPass
	call	WaitPass

	jr	rts$


after$:
	ld	hl,msg1_after$
	call	put_win_msg

	jr	rts$


battle$:
	ld	hl,msg1_battle_in$
	call	put_win_msg

	ld	hl,event_flg
	set	6,(hl)
	set	7,(hl)

	ld	hl,msg1_win			; hero lose
	ld	de,msg1_win			; hero win
	call	set_battle_msg

	ld	a,(work1)
	ld	(sv_msg_no),a
	call	set_battle
	call	set_battle_data

	ld	a,3
	ld	(championcap_no),a

	xor	a
	ld	(joy_status),a

	ld	a,seq_vs_after
	ld	(seq_t6r4f1),a
	ld	(AdrsDealerTalk + 9),a

rts$:
	jp	msg_return


msg1_battle_in$:
	extern	msg1_battle_in_0_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg1_battle_in_0_T06R0401	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_after$:
	extern	msg1_after_1_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg1_after_1_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_0:
	extern	msg1_0_2_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg1_0_2_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_1:
	extern	msg1_1_3_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg1_1_3_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db	FANFARE6
	extern	msg1_1_4_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg1_1_4_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_2:
	extern	msg1_2_5_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg1_2_5_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_win:
	extern	msg1_win_6_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg1_win_6_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加

msg2:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg2_0:
	extern	msg2_0_7_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg2_0_7_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_win:
	extern	msg2_win_8_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg2_win_8_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_after:
	extern	msg2_after_9_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg2_after_9_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg3:
	db	CALL_MSG

	ld	hl,d_talk2
	call	DealerTalking

	jp	msg_return


msg3_0:
	extern	msg3_0_10_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg3_0_10_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_win:
	extern	msg3_win_11_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg3_win_11_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_after:
	extern	msg3_after_12_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg3_after_12_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4:
	db	CALL_MSG

	ld	hl,d_talk3
	call	DealerTalking

	jp	msg_return


msg4_0:
	extern	msg4_0_13_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg4_0_13_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_win:
	extern	msg4_win_14_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg4_win_14_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_after:
	extern	msg4_after_15_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg4_after_15_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg5:
	db	CALL_MSG

	ld	a,(ev_champ)
	bit	2,a
	jr	nz,after$

	ld	hl,msg5_0$
	call	put_win_msg

	jr	rts$


after$:
	ld	hl,msg5_1$
	call	put_win_msg

rts$:
	jp	msg_return


msg5_0$:
	extern	msg5_0_16_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg5_0_16_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg5_1$:
	extern	msg5_1_17_T06R0401
	db I_MSG2	; mvmsg追加
	dw msg5_1_17_T06R0401	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



sxy_t6r4f1:
	include	..\sxy\t06r0401.sxy


dojo_04:
	include	..\mapdata\gym_03.map




