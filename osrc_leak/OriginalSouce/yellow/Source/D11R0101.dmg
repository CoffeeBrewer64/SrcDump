
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	macro.h
	include	group.def


bank14	group	G_BANK14


	public	d11_room1

	public	sw_d11r1f1
	public	change_door


	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking
	extern	CheckAssignPos

	extern	musdoor
	extern	SEplay


BUILDING_TYPE	equ	22
EXIT		=	0ffh


seq_d11r1f1	equ	seq_ctrl_buf + 4ch


d11_room1:
ysiz	=	14
xsiz	=	15
	db	BUILDING_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	poke_2f			; map data adrs
	dw	msg_d11r1f1		; message tbl adrs
	dw	ev_d11r1f1		; event routine adrs
	db	0			; map link flg
	dw	sxy_d11r1f1


ev_d11r1f1:
	call	switch_door_open

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,d11r1f1_tbl
	ld	a,(seq_d11r1f1)
	call	battle_sequence
	ld	(seq_d11r1f1),a

	ret


switch_door_open:
	ld	hl,ptn_data
	bit	5,(hl)
	res	5,(hl)
	ret	z

	ld	a,(ev_t9 + 0)
	bit	0,a
	jr	nz,change$

	ld	a,00ch + 002h
	ld	bc,2 * 256 + 4
	call	link_door_tool			; door-a

	ld	a,054h + 000h
	ld	bc,4 * 256 + 9
	call	link_door_tool			; door-b

	ld	a,05ch + 003h
	ld	bc,11 * 256 + 3
	call	link_door_tool			; door-b

	ret


change$:
	ld	a,05ch + 003h
	ld	bc,2 * 256 + 4
	call	link_door_tool			; door-a

	ld	a,00ch + 002h
	ld	bc,4 * 256 + 9
	call	link_door_tool			; door-b

	ld	a,00ch + 002h
	ld	bc,11 * 256 + 3
	call	link_door_tool			; door-b

	ret



	public	link_door_tool

link_door_tool:
	ld	(el_c),a
	ld	a,B_BGCELL_CHANGE
	jp	bank2bank			; door-b



sw_d11r1f1:
	ld	a,(actor_table + 009h)
	cp	004h
	ret	nz

	xor	a
	ld	(joy_status),a

	ld	a,msg_door
	ld	(work1),a
	jp	talk_map



d11r1f1_tbl:
	initndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after


msg_d11r1f1:
	msgndw	msg4,msg_doro
	ndw	capsule_item,msg_capsule1
	ndw	msg7,msg_diary
	ndw	msg8,msg_diary2

	ndw	change_door,msg_door



dealer_talk:
d_talk4:
	db	msg_doro,000h
	dw	ev_d11 + 0
	dw	msg4_0
	dw	msg4_after
	dw	msg4_win
	dw	msg4_win

	db	0ffh


msg4:
	db	CALL_MSG

	ld	hl,d_talk4
	call	DealerTalking

	jp	msg_return


msg4_0:
	extern	msg4_0_0_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg4_0_0_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_win:
	extern	msg4_win_1_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg4_win_1_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_after:
	extern	msg4_after_2_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg4_after_2_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg7:
	extern	msg7_3_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg7_3_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg8:
	extern	msg8_4_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg8_4_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



change_door:
	db	CALL_MSG

	ld	hl,msg_sw_0$
	call	put_win_msg

	extern	yes_no
	call	yes_no
	ld	a,(allow_cnt)
	and	a
	jr	nz,no$

	ld	a,1
	ld	(wait_pass_flg),a

	ld	hl,ptn_data
	set	5,(hl)				; allow to change door

	ld	hl,msg_sw_1$
	call	put_win_msg

	ld	a,musdoor
	call	SEplay

	ld	hl,ev_t9 + 0
	bit	0,(hl)
	set	0,(hl)				; door-b
	jr	z,rts$

	res	0,(hl)				; door-a

	jr	rts$


no$:
	ld	hl,msg_sw_2$
	call	put_win_msg

rts$:
	jp	msg_return


msg_sw_0$:
	extern	msg_sw_0_5_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg_sw_0_5_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg_sw_1$:
	extern	msg_sw_1_6_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg_sw_1_6_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg_sw_2$:
	extern	msg_sw_2_7_D11R0101
	db I_MSG2	; mvmsg追加
	dw msg_sw_2_7_D11R0101	; mvmsg追加
	db 027h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



sxy_d11r1f1:
	include	..\sxy\d11r0101.sxy

poke_2f:
	include	..\mapdata\poke_2f.map

