
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	macro.h
	include	group.def


bank11	group	G_BANK11


	public	t9_room1
	public	sw_t9r1f1


	extern	yes_no
	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking
	extern	put_wait
	extern	CheckAssignPos

	extern	musdoor
	extern	SEplay



BUILDING_TYPE	equ	22
EXIT		=	0ffh


seq_t9r1f1	equ	seq_ctrl_buf + 4ah

DOOR_CLOSE	equ	02ch + 001h
DOOR_OPEN	equ	00ch + 002h


t9_room1:
ysiz	=	14
xsiz	=	15
	db	BUILDING_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	poke_1f			; map data adrs
	dw	msg_t9r1f1		; message tbl adrs
	dw	ev_t9r1f1		; event routine adrs
	db	0			; map link flg
	dw	room_str


ev_t9r1f1:
	call	switch_door_open

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,t9r1f1_tbl
	ld	a,(seq_t9r1f1)
	call	battle_sequence
	ld	(seq_t9r1f1),a

	ret


switch_door_open:
	ld	hl,ptn_data
	bit	5,(hl)
	res	5,(hl)
	ret	z

	ld	a,(ev_t9 + 0)
	bit	0,a
	jr	nz,change$			; door-a  -->  door-b

	ld	bc,6 * 256 + 12
	call	open_door$			; door-a open

	ld	bc,3 * 256 + 8
	call	close_door$			; door-b

	ld	bc,8 * 256 + 10
	call	close_door$			; door-b

	ld	bc,13 * 256 + 13
	jp	close_door$			; door-b


change$:
	ld	bc,6 * 256 + 12
	call	close_door$			; door-a open

	ld	bc,3 * 256 + 8
	call	open_door$			; door-b

	ld	bc,8 * 256 + 10
	call	open_door$			; door-b

	ld	bc,13 * 256 + 13
	jp	open_door$			; door-b


close_door$:
	ld	a,DOOR_CLOSE
	ld	(el_c),a

	jr	rts$


open_door$:
	ld	a,DOOR_OPEN
	ld	(el_c),a

rts$:
	ld	a,B_BGCELL_CHANGE
	call	bank2bank			; door-a

	ret



sw_t9r1f1:
	ld	a,(actor_table + 009h)
	cp	004h
	ret	nz

	xor	a
	ld	(joy_status),a

	ld	a,msg_switch
	ld	(work1),a
	jp	talk_map



t9r1f1_tbl:
	initndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after


msg_t9r1f1:
	msgndw	msg3,msg_sylph_w
	ndw	capsule_item,msg_capsule1
	ndw	capsule_item,msg_capsule2
	ndw	msg_sw,msg_switch


dealer_talk:
d_talk3:
	db	msg_sylph_w,030h
	dw	ev_t9_1 + 0
	dw	msg3_0
	dw	msg3_after
	dw	msg3_win
	dw	msg3_win

	db	0ffh



msg3:
	db	CALL_MSG

	ld	hl,d_talk3
	call	DealerTalking

	jp	msg_return


msg3_0:
	extern	msg3_0_0_T09R0101
	db I_MSG2	; mvmsg追加
	dw msg3_0_0_T09R0101	; mvmsg追加
	db 02ch	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_win:
	extern	msg3_win_1_T09R0101
	db I_MSG2	; mvmsg追加
	dw msg3_win_1_T09R0101	; mvmsg追加
	db 02ch	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_after:
	extern	msg3_after_2_T09R0101
	db I_MSG2	; mvmsg追加
	dw msg3_after_2_T09R0101	; mvmsg追加
	db 02ch	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg_sw:		
	db	CALL_MSG

	ld	hl,msg_sw_0$
	call	put_win_msg

	call	yes_no
	ld	a,(allow_cnt)
	and	a
	jr	nz,no$

	ld	a,1
	ld	(wait_pass_flg),a

	ld	hl,ptn_data
	set	5,(hl)				; allow to change door

	ld	hl,msg_sw_1$
	call	put_win_msg

	ld	a,musdoor
	call	SEplay

	ld	hl,ev_t9 + 0
	bit	0,(hl)
	set	0,(hl)				; door-b
	jr	z,rts$

	res	0,(hl)				; door-a

	jr	rts$


no$:
	ld	hl,msg_sw_2$
	call	put_win_msg

rts$:
	jp	msg_return


msg_sw_0$:
	extern	msg_sw_0_3_T09R0101
	db I_MSG2	; mvmsg追加
	dw msg_sw_0_3_T09R0101	; mvmsg追加
	db 02ch	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg_sw_1$:
	extern	msg_sw_1_4_T09R0101
	db I_MSG2	; mvmsg追加
	dw msg_sw_1_4_T09R0101	; mvmsg追加
	db 02ch	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg_sw_2$:
	extern	msg_sw_2_5_T09R0101
	db I_MSG2	; mvmsg追加
	dw msg_sw_2_5_T09R0101	; mvmsg追加
	db 02ch	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


room_str:
	include	..\sxy\t09r0101.sxy


poke_1f:
	include	..\mapdata\poke_1f.map

