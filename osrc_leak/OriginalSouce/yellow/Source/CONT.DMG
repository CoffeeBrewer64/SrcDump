
	include	common.def
	include	group.def

bank0	group	G_BANK0

;*************************************************
;*						*
;*	cont	[input key status]		*
;*						*
;*	ENT	none				*
;*						*
;*	RET	joy_status,reg A		*
;*		   ---pushing key		*
;*		joy_on				*
;*		   ---key 'on' this time	*
;*		joy_off				*
;*		   ---key 'off' this time	*
;*						*
;*	DATA	bit 7  6  5  4  3  2  1  0	*
;*		    dn up lf rg st se B  A	*
;*						*
;*	MOD	A,B,C,D				*
;*						*
;*************************************************


	public	sgb_reset
	public	joy_clear
	public	check_s_reset


	extern	bank_push_call

	extern	wait_vb
	extern	reset
	extern	soft_reset




sgb_reset:
;------------------ CGB チェック機構　1Apr,1998 村川追加ここから
	cp	011h
	jr	z,z0_EQU$
	xor	a
	jr	z0_RESULT$
z0_EQU$:
	ld	a,1
z0_RESULT$:
	ld	(cgb_flg),a
;------------------ CGB チェック機構　1Apr,1998 村川追加ここまで

	jp	reset




	public	cont
	public	KeyStatusGet

cont:
	ld	a,(rombankno)
	push	af
	ld	a,3
	extern	bank_change
	call	bank_change

	call	cont_main

	pop	af
	jp	bank_change

KeyStatusGet:
	ld	a,(rombankno)
	push	af
	ld	a,3
	call	bank_change

	call	KeyStatusGetMain

	pop	af
	jp	bank_change


bank3	group	G_BANK3

KeyStatusGetMain:
	ld	a,(key_status)
	and	a
	ret	nz

	ld	a,00100000b
	ld	(P1),a
	ld	a,(P1)
	ld	a,(P1)

	cpl
	and	00001111b
	swap	a
	ld	b,a

	ld	a,00010000b
	ld	(P1),a
	ld	a,(P1)
	ld	a,(P1)
	ld	a,(P1)
	ld	a,(P1)
	ld	a,(P1)
	ld	a,(P1)

	cpl
	and	00001111b
	or	b
	ld	(key_data),a

	ld	a,00110000b
	ld	(P1),a
	ret



cont_main:
	ld	a,(key_data)
	ld	b,a

	and     04fh
	cp	00fh			; A, B, SE, ST Key For Soft Reset Check
	jp	z,check_s_reset		; Check Soft Reset
set_status$:
	ld      a,(joy_data)		; Pre Key Status
	ld	e,a
	xor     b
	ld	d,a         
	and     e         
	ld	(joy_off),a    

	ld      a,d
	and	b
	ld	(joy_on),a

	ld	a,b
	ld	(joy_data),a		; Set Key Satus

chk_all_cancel$:
	ld	a,(obs_system)
	bit	5,a			; All Key Hook Bit
	jr	nz,joy_clear

	ld	a,(joy_data)
	ld	(joy_status),a

check_cancel$:
	ld	a,(cancel_key)		; Cancel Key MASK
	and	a
	ret	z

	cpl				; Reverse "cancel_key"
	ld	b,a

	ld	a,(joy_status)
	and	b
	ld	(joy_status),a

	ld	a,(joy_on)
	and	b
	ld	(joy_on),a
	ret



 ifn 0
	ld      a,020h      		; U, D, L, R Key Read
	ld	c,< P1			; < : Mark Is Low
	ld	(P1),a
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	cpl               
	and     00fh        
	swap    a         
	ld      b,a       
	ld      a,010h      		; A, B, SE, ST Key Read
        ld      (P1),a    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	ld      a,(P1)    
	cpl

	and     04fh
	cp	00fh			; A, B, SE, ST Key For Soft Reset Check
	jr	nz,set_status$

	jp	check_s_reset		; Check Soft Reset


set_status$:
	or      b         
	ld      b,a			; Breg : Now Status

	ld      a,(joy_data)		; Pre Key Status
	ld	e,a
	xor     b
	ld	d,a         
	and     e         
	ld	(joy_off),a    

	ld      a,d
	and	b
	ld	(joy_on),a

	ld      a,030h			; Port Reset
	ld      (P1),a

	ld	a,b
	ld	(joy_data),a		; Set Key Satus


chk_all_cancel$:
	ld	a,(obs_system)
	bit	5,a			; All Key Hook Bit
	jr	nz,joy_clear

	ld	a,(joy_data)
	ld	(joy_status),a

check_cancel$:
	ld	a,(cancel_key)		; Cancel Key MASK
	and	a
	ret	z

	cpl				; Reverse "cancel_key"
	ld	b,a

	ld	a,(joy_status)
	and	b
	ld	(joy_status),a

	ld	a,(joy_on)
	and	b
	ld	(joy_on),a

	ret
 endif


;-------------------------------------------------------;
;		     Joy Data All Clear 		;
;-------------------------------------------------------;
joy_clear:
	xor	a
	ld	(joy_status),a
	ld	(joy_on),a
	ld	(joy_off),a

	ret



;-------------------------------------------------------;
;		Check Soft Reset Key Count 		;
;-------------------------------------------------------;
check_s_reset:
	call	wait_vb			; 1 Blanking Wait

	ld	a,030h			; Port Reset
	ld	(P1),a

  ifn	0	; 1995.11.27
	ld	a,(soft_reset_counter)	; Soft Reset Key Counter ("reset.src")
	dec	a
	ld	(soft_reset_counter),a
  else
	ld	hl,soft_reset_counter	; Soft Reset Key Counter ("reset.src")
	dec	(hl)
  endif
	jp	z,soft_reset		; Soft Reset To Go! ("reset.src")

	jp	cont			; Renewal



