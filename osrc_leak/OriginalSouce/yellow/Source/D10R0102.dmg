
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	macro.h
	include	group.def


bank16	group	G_BANK16


	public	d10_room1_2f


	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking
	extern	put_wait


BUILDING_TYPE	equ	22
EXIT		=	0ffh


seq_d10r1f2	equ	seq_ctrl_buf + 54h


d10_room1_2f:
ysiz	=	9
xsiz	=	15
	db	BUILDING_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	silf_2f			; map data adrs
	dw	msg_d10r1f2		; message tbl adrs
	dw	ev_d10r1f2		; event routine adrs
	db	0			; map link flg
	dw	sxy_d10r1f2


ev_d10r1f2:
	call	init$

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,d10r1f2_tbl
	ld	a,(seq_d10r1f2)
	call	battle_sequence
	ld	(seq_d10r1f2),a

	ret



init$:
	ld	hl,ptn_data
	bit	5,(hl)
	res	5,(hl)
	ret	z

	ld	hl,where
	extern	check_where
	call	check_where
	call	each_map_door

	ld	a,(ev_d10 + 3)
	bit	0,a
	jr	nz,next_door1$

	push	af

	ld	a,05ch + 003h
	ld	(el_c),a
	ld	bc,4 * 256 + 4
	ld	a,B_BGCELL_CHANGE
	call	bank2bank

	pop	af

next_door1$:
	bit	1,a
	ret	nz

	ld	a,05ch + 003h
	ld	(el_c),a
	ld	bc,4 * 256 + 8
	ld	a,B_BGCELL_CHANGE
	jp	bank2bank


where:
	db	4,4				; door-1
	db	4,8				; door-2
	db	0ffh


each_map_door:
	ld	hl,ev_d10 + 3

	ld	a,(DA_BUF + 5)
	and	a
	ret	z

	cp	1
	jr	nz,d2$

	set	0,(hl)

	ret


d2$:
	set	1,(hl)

	ret



d10r1f2_tbl:
	initndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after


msg_d10r1f2:
	msgndw	msg1,msg_shainm
	ndw	msg2,msg_member
	ndw	msg3,msg_sylpu_w
	ndw	capsule_item,msg_capsule1


dealer_talk:
d_talk1:
	db	msg_member,020h
	dw	ev_d10 + 2
	dw	msg2_0
	dw	msg2_after
	dw	msg2_win
	dw	msg2_win

d_talk2:
	db	msg_sylpu_w,030h
	dw	ev_d10 + 2
	dw	msg3_0
	dw	msg3_after
	dw	msg3_win
	dw	msg3_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	a,(ev_d10 + 19)
	bit	7,a
	ld	hl,msg1_1$
	jr	nz,rts$

	ld	hl,msg1_0$

rts$:
	call	put_win_msg

	jp	msg_return


msg1_0$:
	extern	msg1_0_0_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg1_0_0_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_1$:
	extern	msg1_1_1_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg1_1_1_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg2:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg2_0:
	extern	msg2_0_2_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg2_0_2_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_win:
	extern	msg2_win_3_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg2_win_3_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_after:
	extern	msg2_after_4_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg2_after_4_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



msg3:
	db	CALL_MSG

	ld	hl,d_talk2
	call	DealerTalking

	jp	msg_return


msg3_0:
	extern	msg3_0_5_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg3_0_5_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_win:
	extern	msg3_win_6_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg3_win_6_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_after:
	extern	msg3_after_7_D10R0102
	db I_MSG2	; mvmsg追加
	dw msg3_after_7_D10R0102	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加



sxy_d10r1f2:
	include	..\sxy\d10r0102.sxy


silf_2f:
	include	..\mapdata\silf_2f.map






