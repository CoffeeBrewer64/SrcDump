	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	dealer.def
	include	vanish.def
	include macro.h
	include group.def
	include	pm_debug.def


bank17	group	G_BANK17


	public	t3_room2


	extern	gym_setting
	extern	bank2bank
	extern	table_jump
	extern	actor_anime_set   
	extern	yes_no
	extern	search_hit
	extern	game_over
;;	extern	gym_judge
	extern	set_battle
	extern	set_battle_data
	extern	set_battle_msg
	extern	obj_stepping
	extern	obj_stopping

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking


CHAMPCUP_TYPE	equ	7
EXIT		=	0ffh


seq_t3r2f1	equ	seq_ctrl_buf + 00ch


t3_room2:
ysiz	=	7
xsiz	=	5
	db	CHAMPCUP_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	dojo_02			; map data adrs
	dw	msg_t3r2f1		; message tbl adrs
	dw	ev_t3r2f1		; event routine adrs
	db	0			; map link flg
	dw	sxy_t3r2f1		;


ev_t3r2f1:
	ld	hl,ptn_data
	bit	6,(hl)
	res	6,(hl)
	call	nz,init$

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,t3r2f1_tbl
	ld	a,(seq_t3r2f1)
	call	battle_sequence
	ld	(seq_t3r2f1),a

	ret


init$:
	ld	hl,t_name$
	ld	de,l_name$
	call	gym_setting

	ret


t_name$:
  ifn	pm_jmsg
	db	ni__,bi__
	db	EOM
  else
	db	usf_p,usf_e,usf_w,usf_t,usf_e,usf_r,spc@,usf_c,usf_i,usf_t,usf_y
	db	EOM
  endif


l_name$:
  ifn	pm_jmsg
	db	ta__,ke__,si__
	db	EOM
  else
	db	usf_b,usf_r,usf_o,usf_c,usf_k
	db	EOM
  endif


return:
	xor	a
	ld	(cancel_key),a
	ld	(seq_t3r2f1),a
	ld	(AdrsDealerTalk + 9),a

	ret


t3r2f1_tbl:
	initndw	battle_main,seq_battle_main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after

	ndw	vs_after,seq_vs_after


vs_after:
	ld	a,(fighting_flg)
	cp	0ffh
	jp	z,return			; to okido school(losing)

;	call	actor_blanch

	ld	a,0f0h
	ld	(cancel_key),a

obtain_machine:
	ld	a,msg_vs_after1
	ld	(work1),a
	call	talk_map

	ld	hl,ev_t3_2
	set	7,(hl)				; win status

	ld	bc,234 * 256 + 1
	call	take_item
	jr	nc,full$

	ld	a,msg_vs_after2
	ld	(work1),a
	call	talk_map

	ld	hl,ev_t3_2
	set	6,(hl)

	jr	rts$


full$:
	ld	a,msg_vs_after3
	ld	(work1),a
	call	talk_map

rts$:
	ld	hl,my_badge + 0
	set	0,(hl)

	ld	hl,ev_champ + 0
	set	0,(hl)

	ld	a,T3msg5			; "msg_shounen1"
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank

	ld	a,R22msg1			; "rival"
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank

	ld	hl,ev_r22
	res	0,(hl)				; clear event-1 invoke flag
	res	7,(hl)				; clear encount flag

	ld	hl,ev_t3_2
	set	2,(hl)				; msg_trainerm1

  ifn	0
	xor	a
	ld	(cancel_key),a

	ld	a,seq_battle_main
	ld	(seq_t3r2f1),a
	ld	(AdrsDealerTalk + 9),a

	ret
  else
	jp	return
  endif



msg_t3r2f1:
	msgndw	msg1,msg_niichyan1
	ndw	msg2,msg_trainerm1
	ndw	msg3,msg_danpei1
	ndw	msg1_0,msg_vs_after1
	ndw	msg1_1,msg_vs_after2
	ndw	msg1_2,msg_vs_after3


dealer_talk:
d_talk1:
	db	msg_trainerm1,050h
	dw	ev_t3_2
	dw	msg2_0
	dw	msg2_after
	dw	msg2_win
	dw	msg2_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	a,(ev_t3_2)
	bit	7,a
	jr	z,battle$

	bit	6,a
	jr	nz,after$
	call	z,obtain_machine

	extern	WaitPass
	call	WaitPass

	jr	rts$


after$:
	ld	hl,msg1_after$
	call	put_win_msg

	jr	rts$


battle$:
	ld	hl,msg1_battle_in$
	call	put_win_msg

	ld	hl,event_flg
	set	6,(hl)
	set	7,(hl)

	ld	hl,msg1_win			; hero lose
	ld	de,msg1_win			; hero win
	call	set_battle_msg

	ld	a,(work1)
	ld	(sv_msg_no),a
	call	set_battle
	call	set_battle_data

	ld	a,1
	ld	(championcap_no),a

	xor	a
	ld	(joy_status),a

	ld	a,seq_vs_after
	ld	(seq_t3r2f1),a
	ld	(AdrsDealerTalk + 9),a

rts$:
	jp	msg_return



msg1_battle_in$:
	extern	msg1_battle_in_0_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_battle_in_0_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_after$:
  ifn	YELLOW_VERSION
	extern	msg1_after_1_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_after_1_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加
  else
	db	D_MSG
	db	ko_,no_,spc@,hi_,ro_,i_,spc@,se_,ka_,i_,de_,ha_
	db	home@
	db	i_,ro_,n_,na_,spc@,ya_,tu_,ga_,spc@,poke@,de_,gyo3@
	db	ta_,ta_,ka_,i_,wo_,spc@,ku_,ri_,hi_,ro_,ge_,te_,ru_,gyoe@
	db	normal@
	db	ki_,mi_,ni_,ha_
	db	home@
	db	poke@,spc@,trainer@,no_,gyo3@
	db	sa_,i_,no_,u_,ga_,spc@,a_,ru_,spc@,yo_,u_,da_,gyoe@
	db	normal@
	db	ha__,na__,da__,spc@,si__,te__,ii__,no_,spc@
	db	zi__,mu__,ni_,mo_,spc@,i_,ki_
	db	home@
	db	ki_,mi_,no_,spc@,ti_,ka_,ra_,wo_,gyo3@
	db	ta_,me_,si_,te_,spc@,mi_,ru_,to_,spc@,i_,i_
	db	EOMeom
  endif


msg1_0:
	extern	msg1_0_2_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_0_2_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_1:
	extern	msg1_1_3_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_1_3_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db	FANFARE
	extern	msg1_1_4_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_1_4_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_2:
	extern	msg1_2_5_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_2_5_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_win:
	extern	msg1_win_6_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_win_6_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db	FANFARE
	extern	msg1_win_7_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg1_win_7_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg2_0:
	extern	msg2_0_8_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg2_0_8_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_win:
	extern	msg2_win_9_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg2_win_9_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_after:
	extern	msg2_after_10_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg2_after_10_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3:
	db	CALL_MSG

	ld	a,(ev_champ)
	bit	0,a
	jr	nz,after$

	ld	hl,msg3_0$
	call	put_win_msg

	call	yes_no
	ld	a,(allow_cnt)
	and	a
	jr	nz,no$

	ld	a,(obs_pikachu)
	bit	7,a
	jp	nz,case_of_pika$		; ピカチュウがいる場合

	ld	hl,msg3_1$
	call	put_win_msg

	jr	rero$


no$:
	ld	hl,msg3_3$
	call	put_win_msg

rero$:
	ld	hl,msg3_2$
	call	put_win_msg

	jr	rts$


after$:
	ld	hl,msg3_4$
	call	put_win_msg

rts$:
	jp	msg_return


case_of_pika$:
	ld	hl,msg3_5$
	call	put_win_msg

	jp	msg_return


msg3_0$:
	extern	msg3_0_11_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg3_0_11_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_1$:
	extern	msg3_1_12_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg3_1_12_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_2$:
	extern	msg3_2_13_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg3_2_13_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_3$:
	extern	msg3_3_14_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg3_3_14_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_4$:
	extern	msg3_4_15_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg3_4_15_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_5$:
	extern	msg3_5_16_T03R0201
	db I_MSG2	; mvmsg追加
	dw msg3_5_16_T03R0201	; mvmsg追加
	db 02ah	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加




sxy_t3r2f1:
	include	..\sxy\t03r0201.sxy


dojo_02:
	include	..\mapdata\gym_01.map


