
	include	common.def
	include	fntequ.def
	include	maphead.def
	include	banktool.def
	include	vanish.def
	include	macro.h
	include	group.def


bank11	group	G_BANK11


	public	d8_room1


	extern	table_jump
	extern	bank2bank
	extern	ex_yes_no
	extern	missing
	extern	set_battle
	extern	obs_battler
	extern	set_battle_msg
	extern	set_battle_data
	extern	actor_anime_set
	extern	save_position
	extern	load_position
	extern	obj_stepping
	extern	capsule_item

	extern	battle_main
	extern	battle_missing
	extern	battle_ready
	extern	battle_after
	extern	DealerTalking

	extern	CheckActorPos
	extern	CheckAssignPos
	extern	rock_on
	extern	FallToHole


DOUKUTU_TYPE	equ	17
EXIT		=	0ffh


seq_d8r1f1	equ	seq_ctrl_buf + 50h


d8_room1:
ysiz	=	9
xsiz	=	15
	db	DOUKUTU_TYPE		; map type
	db	ysiz,xsiz		; yx size
	dw	iwa_2f			; map data adrs
	dw	msg_d8r1f1		; message tbl adrs
	dw	ev_d8r1f1		; event routine adrs
	db	0			; map link flg
	dw	sxy_d8r1f1


ev_d8r1f1:
	call	bg_init$

	call	init_for_talkmap

	ld	hl,dealer_talk
	ld	de,d8r1f1_tbl
	ld	a,(seq_d8r1f1)
	call	battle_sequence
	ld	(seq_d8r1f1),a

	ret


bg_init$:
	ld	hl,ptn_data + 0
	bit	5,(hl)
	res	5,(hl)
	ret	z

	ld	hl,ev_d8 + 0
	bit	0,(hl)				; check bg-cell rewriting
	ret	z

	ld	a,01ch + 01h
	ld	(el_c),a
	ld	bc,005h * 0100h + 003h
	ld	a,B_BGCELL_CHANGE
	jp	bank2bank			; passable




d8r1f1_tbl:
	initndw	D8R1F1main,SeqD8R1F1main
	ndw	battle_missing,seq_battle_missing
	ndw	battle_after,seq_battle_after


D8R1F1main:
	ld	hl,obs_event + 0
	bit	7,(hl)
	res	7,(hl)
	jp	z,hero

	ld	hl,switch_pos
	call	CheckActorPos
	jp	nc,hero

	ld	a,(usr_buf + 0)
	cp	1
	jr	nz,msg10$			; switch event

	ld	a,(work1)		;チャンピョンロードを怪力なしで抜けるバグ修正。
	cp	00fh			;スイッチの上にいるのがピカチュウならスキップ
	jp	z,hero			;する。（村川）

	ld	hl,ptn_data
	set	5,(hl)

	ld	hl,ev_d8 + 0
	set	0,(hl)

	ret


msg10$:
	ld	hl,ev_d8 + 0
	bit	6,(hl)
	set	6,(hl)				; switch on(fall to hole)
	jr	nz,hero

	ld	a,D8R1F1msg10
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_VANISH
	call	bank2bank

	ld	a,R23R1F1msg13
	ld	(obs_obj),a
	ld	a,B_REQ_OBJ_APPEAR
	jp	bank2bank



switch_pos:
	db	005h,003h			; switch
	db	00fh,017h			; fall
	db	0ffh


hero:
	ld	a,R23R1F1
	ld	(ev_something + 5),a
	ld	hl,switch_pos
	call	FallToHole

	ld	a,(usr_buf + 0)
	cp	1
	jr	nz,ok$

	ld	hl,event_flg
	res	4,(hl)

	ld	hl,game_mode
	res	4,(hl)

	ret


ok$:
	ld	a,(event_flg)
	bit	4,a
	jp	z,battle_main

	ret





msg_d8r1f1:
	msgndw	msg1,msg_elite_m1
	ndw	msg2,msg_elite_w1
	ndw	msg3,msg_elite_m2
	ndw	msg4,msg_elite_w2
	ndw	capsule_item,msg_capsule1
	ndw	capsule_item,msg_capsule2
	ndw	rock_on,msg_iwa1		; mover
	ndw	rock_on,msg_iwa2		; mover
	ndw	rock_on,msg_iwa3		; mover
	ndw	rock_on,msg_iwa4		; fall rock as switch



dealer_talk:
d_talk1:
	db	msg_elite_m1,010h
	dw	ev_d8 + 0
	dw	msg1_0
	dw	msg1_after
	dw	msg1_win
	dw	msg1_win

d_talk2:
	db	msg_elite_w1,040h
	dw	ev_d8 + 0
	dw	msg2_0
	dw	msg2_after
	dw	msg2_win
	dw	msg2_win

d_talk3:
	db	msg_elite_m2,040h
	dw	ev_d8 + 0
	dw	msg3_0
	dw	msg3_after
	dw	msg3_win
	dw	msg3_win

d_talk4:
	db	msg_elite_w2,040h
	dw	ev_d8 + 0
	dw	msg4_0
	dw	msg4_after
	dw	msg4_win
	dw	msg4_win

	db	0ffh


msg1:
	db	CALL_MSG

	ld	hl,d_talk1
	call	DealerTalking

	jp	msg_return


msg2:
	db	CALL_MSG

	ld	hl,d_talk2
	call	DealerTalking

	jp	msg_return


msg3:
	db	CALL_MSG

	ld	hl,d_talk3
	call	DealerTalking

	jp	msg_return


msg4:
	db	CALL_MSG

	ld	hl,d_talk4
	call	DealerTalking

	jp	msg_return




msg1_0:
	extern	msg1_0_0_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg1_0_0_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_win:
	extern	msg1_win_1_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg1_win_1_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg1_after:
	extern	msg1_after_2_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg1_after_2_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加




msg2_0:
	extern	msg2_0_3_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg2_0_3_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_win:
	extern	msg2_win_4_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg2_win_4_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg2_after:
	extern	msg2_after_5_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg2_after_5_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_0:
	extern	msg3_0_6_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg3_0_6_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_win:
	extern	msg3_win_7_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg3_win_7_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg3_after:
	extern	msg3_after_8_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg3_after_8_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_0:
	extern	msg4_0_9_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg4_0_9_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_win:
	extern	msg4_win_10_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg4_win_10_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加


msg4_after:
	extern	msg4_after_11_D08R0101
	db I_MSG2	; mvmsg追加
	dw msg4_after_11_D08R0101	; mvmsg追加
	db 026h	; mvmsg追加
	db EOM	; put_msg_s終了コード mvmsg追加




sxy_d8r1f1:
	include	..\sxy\d08r0101.sxy


iwa_2f:
	include	..\mapdata\iwa_2f.map


