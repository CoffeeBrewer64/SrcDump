/*
 *  ahb_fdl_defs.h
 *
 *  NOTE: This is a generated file.  DO NOT HAND EDIT.
 *
 *  Generated from ../../bw/fdl/ahb_fdl_defs.fdl
 */

#ifndef __FDL_AHB_FDL_DEFS_H__
#define __FDL_AHB_FDL_DEFS_H__


#ifdef EPPC
#include <private/fdl_assert.h>
#else
#define FDL_ASSERT(c) 
#endif
/*
 *  trusted_offset value
 */
#define AHB_TRUSTED_OFFSET	0x00800000

/*
 *  memmap value
 */
#define SPLASH_BASE	0x00000000
#define RESERVED1_BASE	0x04000000
#define EFB_BASE	0x08000000
#define RESERVED2_BASE	0x0a000000
#define CP_BASE	0x0c000000
#define PE_BASE	0x0c001000
#define VI_BASE	0x0c002000
#define PI_BASE	0x0c003000
#define MEM_BASE	0x0c004000
#define DSP_BASE	0x0c005000
#define IO_DI_BASE	0x0c006000
#define IO_SI_BASE	0x0c006400
#define IO_EXI_BASE	0x0c006800
#define IO_AI_BASE	0x0c006c00
#define RESERVED3_BASE	0x0c100000
#define ACR_REGS_BASE	0x0d000000
#define AIP_DI_BASE	0x0d006000
#define AIP_SI_BASE	0x0d006400
#define AIP_EXI_BASE	0x0d006800
#define AIP_AI_BASE	0x0d006c00
#define FLA_BASE	0x0d010000
#define AES_BASE	0x0d020000
#define SHA_BASE	0x0d030000
#define EHC_BASE	0x0d040000
#define OH0_BASE	0x0d050000
#define OH1_BASE	0x0d060000
#define SD0_BASE	0x0d070000
#define SD1_BASE	0x0d080000
#define BMD_BASE	0x0d090000
#define SRN_BASE	0x0d0a0000
#define AHM_BASE	0x0d0b0000
#define MEM_REGS_BASE	0x0d0b4000
#define BMC_BASE	0x0d0c0000
#define SRN_SRAM_BASE	0x0d400000
#define SRN_ROM_BASE	0x0d7f0000
#define RESERVED4_BASE	0x0e000000
#define DDR_BASE	0x10000000
#define RESERVED5_BASE	0x20000000
#define PPC_ROM_BASE	0xfff00000

/*
 *  ACR_reg_index value
 */
#define IPCP2SMSG_OFFSET	0x000
#define IPCPPCCTRL_OFFSET	0x004
#define IPCS2PMSG_OFFSET	0x008
#define IPCIOPCTRL_OFFSET	0x00c
#define ACRTMRCNT_OFFSET	0x010
#define ACRTMRCMP_OFFSET	0x014
#define ACRVI1CFG_OFFSET	0x018
#define ACRVIDIM_OFFSET	0x01c
#define ACRDIMCTRL_OFFSET	0x020
#define ACRVISOLIDCLR_OFFSET	0x024
#define ACRSIFRMCNT_OFFSET	0x028
#define ACRHDCFG_OFFSET	0x02c
#define ACRPPCINTSTS_OFFSET	0x030
#define ACRPPCINTEN_OFFSET	0x034
#define ACRIOPINTSTS_OFFSET	0x038
#define ACRIOPIRQINTEN_OFFSET	0x03c
#define ACRIOPFIQINTEN_OFFSET	0x040
#define ACRIOPINTPPC_OFFSET	0x044
#define ACRWDGINTSTS_OFFSET	0x048
#define ACRWDGCFG_OFFSET	0x04c
#define ACRDMAADRINTSTS_OFFSET	0x050
#define ACRCPUADRINTSTS_OFFSET	0x054
#define ACRDBGINTSTS_OFFSET	0x058
#define ACRDBGINTEN_OFFSET	0x05c
#define ACRSRNPROT_OFFSET	0x060
#define ACRBUSPROT_OFFSET	0x064
#define AIPPROT_OFFSET	0x070
#define AIPIOCTRL_OFFSET	0x074
#define ACRUSBDBG0_OFFSET	0x080
#define ACRUSBDBG1_OFFSET	0x084
#define ACRUSBFRCRST_OFFSET	0x088
#define ACRUSBIOTEST_OFFSET	0x08c
#define ELA_REG_ADDR_OFFSET	0x090
#define ELA_REG_DATA_OFFSET	0x094
#define ACRMEMTSTN_OFFSET	0x098
#define ACRMEMTSTP_OFFSET	0x09c
#define GPIPPCOUT_OFFSET	0x0c0
#define GPIPPCOE_OFFSET	0x0c4
#define GPIPPCIN_OFFSET	0x0c8
#define GPIPPCINTPOL_OFFSET	0x0cc
#define GPIPPCINTSTS_OFFSET	0x0d0
#define GPIPPCINTEN_OFFSET	0x0d4
#define GPIPPCSTRAPS_OFFSET	0x0d8
#define GPIIOPEN_OFFSET	0x0dc
#define GPIIOPOUT_OFFSET	0x0e0
#define GPIIOPOE_OFFSET	0x0e4
#define GPIIOPIN_OFFSET	0x0e8
#define GPIIOPINTPOL_OFFSET	0x0ec
#define GPIIOPINTSTS_OFFSET	0x0f0
#define GPIIOPINTEN_OFFSET	0x0f4
#define GPIIOPSTRAPS_OFFSET	0x0f8
#define GPIIOPPPCOWNER_OFFSET	0x0fc
#define ACRARBCFGM0_OFFSET	0x100
#define ACRARBCFGM1_OFFSET	0x104
#define ACRARBCFGM2_OFFSET	0x108
#define ACRARBCFGM3_OFFSET	0x10c
#define ACRARBCFGM4_OFFSET	0x110
#define ACRARBCFGM5_OFFSET	0x114
#define ACRARBCFGM6_OFFSET	0x118
#define ACRARBCFGM7_OFFSET	0x11c
#define ACRARBCFGM8_OFFSET	0x120
#define ACRARBCFGM9_OFFSET	0x124
#define ACRARBCFGMC_OFFSET	0x130
#define ACRARBCFGMD_OFFSET	0x134
#define ACRARBCFGME_OFFSET	0x138
#define ACRARBCFGMF_OFFSET	0x13c
#define ACRARBCFGCPU_OFFSET	0x140
#define ACRARBCFGDMA_OFFSET	0x144
#define ACRARBPCNTCFG_OFFSET	0x148
#define ACRARBPCNTSTS_OFFSET	0x14c
#define ACRSPARE2_OFFSET	0x170
#define ACRSPARE3_OFFSET	0x174
#define ACRCOMPAT_OFFSET	0x180
#define ACRRSTAHB_OFFSET	0x184
#define ACRSPARE0_OFFSET	0x188
#define ACRSPARE1_OFFSET	0x18c
#define ACRSYSCTRL_OFFSET	0x190
#define ACRRSTCTRL_OFFSET	0x194
#define ACRCLKGATE_OFFSET	0x198
#define ACRPLLDR_OFFSET	0x19c
#define ACRPLLSYS_OFFSET	0x1b0
#define ACRPLLSYSEXT_OFFSET	0x1b4
#define ACRPLLDSK_OFFSET	0x1b8
#define ACRPLLDDR_OFFSET	0x1bc
#define ACRPLLDDREXT_OFFSET	0x1c0
#define ACRPLLVI_OFFSET	0x1c4
#define ACRPLLVIEXT_OFFSET	0x1c8
#define ACRPLLAI_OFFSET	0x1cc
#define ACRPLLAIEXT_OFFSET	0x1d0
#define ACRPLLUSB_OFFSET	0x1d4
#define ACRPLLUSBEXT_OFFSET	0x1d8
#define ACRIOPWRCTRL_OFFSET	0x1dc
#define ACRIOSTRCTRL0_OFFSET	0x1e0
#define ACRIOSTRCTRL1_OFFSET	0x1e4
#define ACRCLKSTRCTRL_OFFSET	0x1e8
#define ACREFUSEADDR_OFFSET	0x1ec
#define ACREFUSEDATA_OFFSET	0x1f0
#define ACRDBGCLK_OFFSET	0x1f4
#define ACROBSCLKOCTRL_OFFSET	0x1f8
#define ACRDBGCLKICTRL_OFFSET	0x1fc
#define ACRDBGPORT_OFFSET	0x200
#define ACRSICLKDIV_OFFSET	0x204
#define ACRSICTRL_OFFSET	0x208
#define ACRSIDATA_OFFSET	0x20c
#define ACRSIINT_OFFSET	0x210
#define ACRCHIPREVID_OFFSET	0x214
#define ACRVICFGDATA_OFFSET	0x220

/*
 *  ESI_reg_index value
 */
#define SIMAINXY0	0x00
#define SISUBXY0	0x01
#define SILR0	0x02
#define SIAB0	0x03
#define SIBTN0	0x04
#define SICTRL0	0x05
#define SIMAINXY1	0x08
#define SISUBXY1	0x09
#define SILR1	0x0a
#define SIAB1	0x0b
#define SIBTN1	0x0c
#define SICTRL1	0x0d
#define SIMAINXY2	0x10
#define SISUBXY2	0x11
#define SILR2	0x12
#define SIAB2	0x13
#define SIBTN2	0x14
#define SICTRL2	0x15
#define SIMAINXY3	0x18
#define SISUBXY3	0x19
#define SILR3	0x1a
#define SIAB3	0x1b
#define SIBTN3	0x1c
#define SICTRL3	0x1d

/*
 *  ELA_reg_index value
 */
#define ELA_STATE_REG0	0x000
#define ELA_STATE_REG1	0x004
#define ELA_STATE_REG2	0x008
#define ELA_STATE_REG3	0x00c
#define ELA_STATE_REG4	0x010
#define ELA_STATE_REG5	0x014
#define ELA_STATE_REG6	0x018
#define ELA_STATE_REG7	0x01c
#define ELA_CONDN_REG0	0x040
#define ELA_CONDN_REG1	0x044
#define ELA_CONDN_REG2	0x048
#define ELA_CONDN_REG3	0x04c
#define ELA_CONDN_REG4	0x050
#define ELA_CONDN_REG5	0x054
#define ELA_CONDN_REG6	0x058
#define ELA_CONDN_REG7	0x05c
#define ELA_CONDN_REG8	0x060
#define ELA_CONDN_REG9	0x064
#define ELA_CONDN_REGA	0x068
#define ELA_CONDN_REGB	0x06c
#define ELA_DATA_REG0	0x080
#define ELA_DATA_REG1	0x084
#define ELA_DATA_REG2	0x088
#define ELA_DATA_REG3	0x08c
#define ELA_DATA_REG4	0x090
#define ELA_DATA_REG5	0x094
#define ELA_DATA_REG6	0x098
#define ELA_DATA_REG7	0x09c
#define ELA_DATA_REG8	0x0a0
#define ELA_DATA_REG9	0x0a4
#define ELA_DATA_REGA	0x0a8
#define ELA_DATA_REGB	0x0ac
#define ELA_DATA_REGC	0x0b0
#define ELA_DATA_REGD	0x0b4
#define ELA_DATA_REGE	0x0b8
#define ELA_DATA_REGF	0x0bc
#define ELA_MASK_REG0	0x0f0
#define ELA_MASK_REG1	0x0f4
#define ELA_MASK_REG2	0x0f8
#define ELA_MASK_REG3	0x0fc
#define ELA_MASK_REG4	0x100
#define ELA_MASK_REG5	0x104
#define ELA_MASK_REG6	0x108
#define ELA_MASK_REG7	0x10c
#define ELA_MASK_REG_89AB	0x110
#define ELA_MASK_REGC	0x114
#define ELA_MASK_REGD	0x118
#define ELA_MASK_REGE	0x11c
#define ELA_CONFIG_REG	0x130
#define ELA_MISC_USERIF_REG	0x134

/*
 *  ELA_STATE struct
 */
#define ELA_STATE_NXTSTATEA_SIZE	3
#define ELA_STATE_NXTSTATEA_SHIFT	0
#define ELA_STATE_NXTSTATEA_MASK	0x00000007
#define ELA_STATE_GET_NXTSTATEA(ELA_STATE) \
	((((unsigned long)(ELA_STATE)) & ELA_STATE_NXTSTATEA_MASK) >> ELA_STATE_NXTSTATEA_SHIFT)
#define ELA_STATE_SET_NXTSTATEA(ELA_STATE, nxtStateA) { \
	FDL_ASSERT(!((nxtStateA) & ~((1 << ELA_STATE_NXTSTATEA_SIZE)-1))); \
	ELA_STATE = (((unsigned long)(ELA_STATE)) & ~ELA_STATE_NXTSTATEA_MASK) | (((unsigned long)(nxtStateA)) << ELA_STATE_NXTSTATEA_SHIFT);\
}
#define ELA_STATE_CNDA_SIZE	4
#define ELA_STATE_CNDA_SHIFT	3
#define ELA_STATE_CNDA_MASK	0x00000078
#define ELA_STATE_GET_CNDA(ELA_STATE) \
	((((unsigned long)(ELA_STATE)) & ELA_STATE_CNDA_MASK) >> ELA_STATE_CNDA_SHIFT)
#define ELA_STATE_SET_CNDA(ELA_STATE, CndA) { \
	FDL_ASSERT(!((CndA) & ~((1 << ELA_STATE_CNDA_SIZE)-1))); \
	ELA_STATE = (((unsigned long)(ELA_STATE)) & ~ELA_STATE_CNDA_MASK) | (((unsigned long)(CndA)) << ELA_STATE_CNDA_SHIFT);\
}
#define ELA_STATE_NXTSTATEB_SIZE	3
#define ELA_STATE_NXTSTATEB_SHIFT	7
#define ELA_STATE_NXTSTATEB_MASK	0x00000380
#define ELA_STATE_GET_NXTSTATEB(ELA_STATE) \
	((((unsigned long)(ELA_STATE)) & ELA_STATE_NXTSTATEB_MASK) >> ELA_STATE_NXTSTATEB_SHIFT)
#define ELA_STATE_SET_NXTSTATEB(ELA_STATE, nxtStateB) { \
	FDL_ASSERT(!((nxtStateB) & ~((1 << ELA_STATE_NXTSTATEB_SIZE)-1))); \
	ELA_STATE = (((unsigned long)(ELA_STATE)) & ~ELA_STATE_NXTSTATEB_MASK) | (((unsigned long)(nxtStateB)) << ELA_STATE_NXTSTATEB_SHIFT);\
}
#define ELA_STATE_CNDB_SIZE	4
#define ELA_STATE_CNDB_SHIFT	10
#define ELA_STATE_CNDB_MASK	0x00003c00
#define ELA_STATE_GET_CNDB(ELA_STATE) \
	((((unsigned long)(ELA_STATE)) & ELA_STATE_CNDB_MASK) >> ELA_STATE_CNDB_SHIFT)
#define ELA_STATE_SET_CNDB(ELA_STATE, CndB) { \
	FDL_ASSERT(!((CndB) & ~((1 << ELA_STATE_CNDB_SIZE)-1))); \
	ELA_STATE = (((unsigned long)(ELA_STATE)) & ~ELA_STATE_CNDB_MASK) | (((unsigned long)(CndB)) << ELA_STATE_CNDB_SHIFT);\
}
#define ELA_STATE_NXTSTATEC_SIZE	3
#define ELA_STATE_NXTSTATEC_SHIFT	14
#define ELA_STATE_NXTSTATEC_MASK	0x0001c000
#define ELA_STATE_GET_NXTSTATEC(ELA_STATE) \
	((((unsigned long)(ELA_STATE)) & ELA_STATE_NXTSTATEC_MASK) >> ELA_STATE_NXTSTATEC_SHIFT)
#define ELA_STATE_SET_NXTSTATEC(ELA_STATE, nxtStateC) { \
	FDL_ASSERT(!((nxtStateC) & ~((1 << ELA_STATE_NXTSTATEC_SIZE)-1))); \
	ELA_STATE = (((unsigned long)(ELA_STATE)) & ~ELA_STATE_NXTSTATEC_MASK) | (((unsigned long)(nxtStateC)) << ELA_STATE_NXTSTATEC_SHIFT);\
}
#define ELA_STATE_CNDC_SIZE	4
#define ELA_STATE_CNDC_SHIFT	17
#define ELA_STATE_CNDC_MASK	0x001e0000
#define ELA_STATE_GET_CNDC(ELA_STATE) \
	((((unsigned long)(ELA_STATE)) & ELA_STATE_CNDC_MASK) >> ELA_STATE_CNDC_SHIFT)
#define ELA_STATE_SET_CNDC(ELA_STATE, CndC) { \
	FDL_ASSERT(!((CndC) & ~((1 << ELA_STATE_CNDC_SIZE)-1))); \
	ELA_STATE = (((unsigned long)(ELA_STATE)) & ~ELA_STATE_CNDC_MASK) | (((unsigned long)(CndC)) << ELA_STATE_CNDC_SHIFT);\
}
#define ELA_STATE_PAD0_SIZE	11
#define ELA_STATE_PAD0_SHIFT	21
#define ELA_STATE_PAD0_MASK	0xffe00000
#define ELA_STATE_GET_PAD0(ELA_STATE) \
	((((unsigned long)(ELA_STATE)) & ELA_STATE_PAD0_MASK) >> ELA_STATE_PAD0_SHIFT)
#define ELA_STATE_SET_PAD0(ELA_STATE, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ELA_STATE_PAD0_SIZE)-1))); \
	ELA_STATE = (((unsigned long)(ELA_STATE)) & ~ELA_STATE_PAD0_MASK) | (((unsigned long)(pad0)) << ELA_STATE_PAD0_SHIFT);\
}
#define ELA_STATE_TOTAL_SIZE	32
#define ELA_STATE(nxtStateA, CndA, nxtStateB, CndB, nxtStateC, CndC) \
	((((unsigned long)(nxtStateA)) << ELA_STATE_NXTSTATEA_SHIFT) | \
	 (((unsigned long)(CndA)) << ELA_STATE_CNDA_SHIFT) | \
	 (((unsigned long)(nxtStateB)) << ELA_STATE_NXTSTATEB_SHIFT) | \
	 (((unsigned long)(CndB)) << ELA_STATE_CNDB_SHIFT) | \
	 (((unsigned long)(nxtStateC)) << ELA_STATE_NXTSTATEC_SHIFT) | \
	 (((unsigned long)(CndC)) << ELA_STATE_CNDC_SHIFT))

/*
 *  ELA_COND struct
 */
#define ELA_COND_DATA_SIZE	4
#define ELA_COND_DATA_SHIFT	0
#define ELA_COND_DATA_MASK	0x0000000f
#define ELA_COND_GET_DATA(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_DATA_MASK) >> ELA_COND_DATA_SHIFT)
#define ELA_COND_SET_DATA(ELA_COND, data) { \
	FDL_ASSERT(!((data) & ~((1 << ELA_COND_DATA_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_DATA_MASK) | (((unsigned long)(data)) << ELA_COND_DATA_SHIFT);\
}
#define ELA_COND_ADDR_SIZE	4
#define ELA_COND_ADDR_SHIFT	4
#define ELA_COND_ADDR_MASK	0x000000f0
#define ELA_COND_GET_ADDR(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_ADDR_MASK) >> ELA_COND_ADDR_SHIFT)
#define ELA_COND_SET_ADDR(ELA_COND, addr) { \
	FDL_ASSERT(!((addr) & ~((1 << ELA_COND_ADDR_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_ADDR_MASK) | (((unsigned long)(addr)) << ELA_COND_ADDR_SHIFT);\
}
#define ELA_COND_NC0_SIZE	3
#define ELA_COND_NC0_SHIFT	8
#define ELA_COND_NC0_MASK	0x00000700
#define ELA_COND_GET_NC0(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_NC0_MASK) >> ELA_COND_NC0_SHIFT)
#define ELA_COND_SET_NC0(ELA_COND, nc0) { \
	FDL_ASSERT(!((nc0) & ~((1 << ELA_COND_NC0_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_NC0_MASK) | (((unsigned long)(nc0)) << ELA_COND_NC0_SHIFT);\
}
#define ELA_COND_NC0_NAND_SIZE	1
#define ELA_COND_NC0_NAND_SHIFT	11
#define ELA_COND_NC0_NAND_MASK	0x00000800
#define ELA_COND_GET_NC0_NAND(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_NC0_NAND_MASK) >> ELA_COND_NC0_NAND_SHIFT)
#define ELA_COND_SET_NC0_NAND(ELA_COND, nc0_nand) { \
	FDL_ASSERT(!((nc0_nand) & ~((1 << ELA_COND_NC0_NAND_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_NC0_NAND_MASK) | (((unsigned long)(nc0_nand)) << ELA_COND_NC0_NAND_SHIFT);\
}
#define ELA_COND_NC1_SIZE	3
#define ELA_COND_NC1_SHIFT	12
#define ELA_COND_NC1_MASK	0x00007000
#define ELA_COND_GET_NC1(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_NC1_MASK) >> ELA_COND_NC1_SHIFT)
#define ELA_COND_SET_NC1(ELA_COND, nc1) { \
	FDL_ASSERT(!((nc1) & ~((1 << ELA_COND_NC1_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_NC1_MASK) | (((unsigned long)(nc1)) << ELA_COND_NC1_SHIFT);\
}
#define ELA_COND_PAD0_SIZE	1
#define ELA_COND_PAD0_SHIFT	15
#define ELA_COND_PAD0_MASK	0x00008000
#define ELA_COND_GET_PAD0(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_PAD0_MASK) >> ELA_COND_PAD0_SHIFT)
#define ELA_COND_SET_PAD0(ELA_COND, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ELA_COND_PAD0_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_PAD0_MASK) | (((unsigned long)(pad0)) << ELA_COND_PAD0_SHIFT);\
}
#define ELA_COND_INVERT_SIZE	4
#define ELA_COND_INVERT_SHIFT	16
#define ELA_COND_INVERT_MASK	0x000f0000
#define ELA_COND_GET_INVERT(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_INVERT_MASK) >> ELA_COND_INVERT_SHIFT)
#define ELA_COND_SET_INVERT(ELA_COND, invert) { \
	FDL_ASSERT(!((invert) & ~((1 << ELA_COND_INVERT_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_INVERT_MASK) | (((unsigned long)(invert)) << ELA_COND_INVERT_SHIFT);\
}
#define ELA_COND_LOGEN_SIZE	1
#define ELA_COND_LOGEN_SHIFT	20
#define ELA_COND_LOGEN_MASK	0x00100000
#define ELA_COND_GET_LOGEN(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_LOGEN_MASK) >> ELA_COND_LOGEN_SHIFT)
#define ELA_COND_SET_LOGEN(ELA_COND, logen) { \
	FDL_ASSERT(!((logen) & ~((1 << ELA_COND_LOGEN_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_LOGEN_MASK) | (((unsigned long)(logen)) << ELA_COND_LOGEN_SHIFT);\
}
#define ELA_COND_MATCH_SIZE	2
#define ELA_COND_MATCH_SHIFT	21
#define ELA_COND_MATCH_MASK	0x00600000
#define ELA_COND_GET_MATCH(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_MATCH_MASK) >> ELA_COND_MATCH_SHIFT)
#define ELA_COND_SET_MATCH(ELA_COND, match) { \
	FDL_ASSERT(!((match) & ~((1 << ELA_COND_MATCH_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_MATCH_MASK) | (((unsigned long)(match)) << ELA_COND_MATCH_SHIFT);\
}
#define ELA_COND_MD_SIZE	2
#define ELA_COND_MD_SHIFT	23
#define ELA_COND_MD_MASK	0x01800000
#define ELA_COND_GET_MD(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_MD_MASK) >> ELA_COND_MD_SHIFT)
#define ELA_COND_SET_MD(ELA_COND, md) { \
	FDL_ASSERT(!((md) & ~((1 << ELA_COND_MD_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_MD_MASK) | (((unsigned long)(md)) << ELA_COND_MD_SHIFT);\
}
#define ELA_COND_DBS_SIZE	2
#define ELA_COND_DBS_SHIFT	25
#define ELA_COND_DBS_MASK	0x06000000
#define ELA_COND_GET_DBS(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_DBS_MASK) >> ELA_COND_DBS_SHIFT)
#define ELA_COND_SET_DBS(ELA_COND, dbs) { \
	FDL_ASSERT(!((dbs) & ~((1 << ELA_COND_DBS_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_DBS_MASK) | (((unsigned long)(dbs)) << ELA_COND_DBS_SHIFT);\
}
#define ELA_COND_DBB_SIZE	5
#define ELA_COND_DBB_SHIFT	27
#define ELA_COND_DBB_MASK	0xf8000000
#define ELA_COND_GET_DBB(ELA_COND) \
	((((unsigned long)(ELA_COND)) & ELA_COND_DBB_MASK) >> ELA_COND_DBB_SHIFT)
#define ELA_COND_SET_DBB(ELA_COND, dbb) { \
	FDL_ASSERT(!((dbb) & ~((1 << ELA_COND_DBB_SIZE)-1))); \
	ELA_COND = (((unsigned long)(ELA_COND)) & ~ELA_COND_DBB_MASK) | (((unsigned long)(dbb)) << ELA_COND_DBB_SHIFT);\
}
#define ELA_COND_TOTAL_SIZE	32
#define ELA_COND(data, addr, nc0, nc0_nand, nc1, invert, logen, match, md, dbs, dbb) \
	((((unsigned long)(data)) << ELA_COND_DATA_SHIFT) | \
	 (((unsigned long)(addr)) << ELA_COND_ADDR_SHIFT) | \
	 (((unsigned long)(nc0)) << ELA_COND_NC0_SHIFT) | \
	 (((unsigned long)(nc0_nand)) << ELA_COND_NC0_NAND_SHIFT) | \
	 (((unsigned long)(nc1)) << ELA_COND_NC1_SHIFT) | \
	 (((unsigned long)(invert)) << ELA_COND_INVERT_SHIFT) | \
	 (((unsigned long)(logen)) << ELA_COND_LOGEN_SHIFT) | \
	 (((unsigned long)(match)) << ELA_COND_MATCH_SHIFT) | \
	 (((unsigned long)(md)) << ELA_COND_MD_SHIFT) | \
	 (((unsigned long)(dbs)) << ELA_COND_DBS_SHIFT) | \
	 (((unsigned long)(dbb)) << ELA_COND_DBB_SHIFT))

/*
 *  ELA_DATA_REP2 struct
 */
#define ELA_DATA_REP2_DATA_SIZE	2
#define ELA_DATA_REP2_DATA_SHIFT	0
#define ELA_DATA_REP2_DATA_MASK	0x00000003
#define ELA_DATA_REP2_GET_DATA(ELA_DATA_REP2) \
	((((unsigned long)(ELA_DATA_REP2)) & ELA_DATA_REP2_DATA_MASK) >> ELA_DATA_REP2_DATA_SHIFT)
#define ELA_DATA_REP2_SET_DATA(ELA_DATA_REP2, data) { \
	FDL_ASSERT(!((data) & ~((1 << ELA_DATA_REP2_DATA_SIZE)-1))); \
	ELA_DATA_REP2 = (((unsigned long)(ELA_DATA_REP2)) & ~ELA_DATA_REP2_DATA_MASK) | (((unsigned long)(data)) << ELA_DATA_REP2_DATA_SHIFT);\
}
#define ELA_DATA_REP2_PAD0_SIZE	30
#define ELA_DATA_REP2_PAD0_SHIFT	2
#define ELA_DATA_REP2_PAD0_MASK	0xfffffffc
#define ELA_DATA_REP2_GET_PAD0(ELA_DATA_REP2) \
	((((unsigned long)(ELA_DATA_REP2)) & ELA_DATA_REP2_PAD0_MASK) >> ELA_DATA_REP2_PAD0_SHIFT)
#define ELA_DATA_REP2_SET_PAD0(ELA_DATA_REP2, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ELA_DATA_REP2_PAD0_SIZE)-1))); \
	ELA_DATA_REP2 = (((unsigned long)(ELA_DATA_REP2)) & ~ELA_DATA_REP2_PAD0_MASK) | (((unsigned long)(pad0)) << ELA_DATA_REP2_PAD0_SHIFT);\
}
#define ELA_DATA_REP2_TOTAL_SIZE	32
#define ELA_DATA_REP2(data) \
	((((unsigned long)(data)) << ELA_DATA_REP2_DATA_SHIFT))

/*
 *  ELA_MASK_89ab struct
 */
#define ELA_MASK_89AB_CHUNK_SIZE	5
#define ELA_MASK_89AB_CHUNK_SHIFT	0
#define ELA_MASK_89AB_CHUNK_MASK	0x0000001f
#define ELA_MASK_89AB_GET_CHUNK(ELA_MASK_89ab) \
	((((unsigned long)(ELA_MASK_89ab)) & ELA_MASK_89AB_CHUNK_MASK) >> ELA_MASK_89AB_CHUNK_SHIFT)
#define ELA_MASK_89AB_SET_CHUNK(ELA_MASK_89ab, chunk) { \
	FDL_ASSERT(!((chunk) & ~((1 << ELA_MASK_89AB_CHUNK_SIZE)-1))); \
	ELA_MASK_89ab = (((unsigned long)(ELA_MASK_89ab)) & ~ELA_MASK_89AB_CHUNK_MASK) | (((unsigned long)(chunk)) << ELA_MASK_89AB_CHUNK_SHIFT);\
}
#define ELA_MASK_89AB_PAD0_SIZE	27
#define ELA_MASK_89AB_PAD0_SHIFT	5
#define ELA_MASK_89AB_PAD0_MASK	0xffffffe0
#define ELA_MASK_89AB_GET_PAD0(ELA_MASK_89ab) \
	((((unsigned long)(ELA_MASK_89ab)) & ELA_MASK_89AB_PAD0_MASK) >> ELA_MASK_89AB_PAD0_SHIFT)
#define ELA_MASK_89AB_SET_PAD0(ELA_MASK_89ab, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ELA_MASK_89AB_PAD0_SIZE)-1))); \
	ELA_MASK_89ab = (((unsigned long)(ELA_MASK_89ab)) & ~ELA_MASK_89AB_PAD0_MASK) | (((unsigned long)(pad0)) << ELA_MASK_89AB_PAD0_SHIFT);\
}
#define ELA_MASK_89AB_TOTAL_SIZE	32
#define ELA_MASK_89AB(chunk) \
	((((unsigned long)(chunk)) << ELA_MASK_89AB_CHUNK_SHIFT))

/*
 *  ELA_MASK_cde struct
 */
#define ELA_MASK_CDE_BIT_SIZE	8
#define ELA_MASK_CDE_BIT_SHIFT	0
#define ELA_MASK_CDE_BIT_MASK	0x000000ff
#define ELA_MASK_CDE_GET_BIT(ELA_MASK_cde) \
	((((unsigned long)(ELA_MASK_cde)) & ELA_MASK_CDE_BIT_MASK) >> ELA_MASK_CDE_BIT_SHIFT)
#define ELA_MASK_CDE_SET_BIT(ELA_MASK_cde, bit) { \
	FDL_ASSERT(!((bit) & ~((1 << ELA_MASK_CDE_BIT_SIZE)-1))); \
	ELA_MASK_cde = (((unsigned long)(ELA_MASK_cde)) & ~ELA_MASK_CDE_BIT_MASK) | (((unsigned long)(bit)) << ELA_MASK_CDE_BIT_SHIFT);\
}
#define ELA_MASK_CDE_BYTE_SIZE	4
#define ELA_MASK_CDE_BYTE_SHIFT	8
#define ELA_MASK_CDE_BYTE_MASK	0x00000f00
#define ELA_MASK_CDE_GET_BYTE(ELA_MASK_cde) \
	((((unsigned long)(ELA_MASK_cde)) & ELA_MASK_CDE_BYTE_MASK) >> ELA_MASK_CDE_BYTE_SHIFT)
#define ELA_MASK_CDE_SET_BYTE(ELA_MASK_cde, byte) { \
	FDL_ASSERT(!((byte) & ~((1 << ELA_MASK_CDE_BYTE_SIZE)-1))); \
	ELA_MASK_cde = (((unsigned long)(ELA_MASK_cde)) & ~ELA_MASK_CDE_BYTE_MASK) | (((unsigned long)(byte)) << ELA_MASK_CDE_BYTE_SHIFT);\
}
#define ELA_MASK_CDE_PAD0_SIZE	20
#define ELA_MASK_CDE_PAD0_SHIFT	12
#define ELA_MASK_CDE_PAD0_MASK	0xfffff000
#define ELA_MASK_CDE_GET_PAD0(ELA_MASK_cde) \
	((((unsigned long)(ELA_MASK_cde)) & ELA_MASK_CDE_PAD0_MASK) >> ELA_MASK_CDE_PAD0_SHIFT)
#define ELA_MASK_CDE_SET_PAD0(ELA_MASK_cde, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ELA_MASK_CDE_PAD0_SIZE)-1))); \
	ELA_MASK_cde = (((unsigned long)(ELA_MASK_cde)) & ~ELA_MASK_CDE_PAD0_MASK) | (((unsigned long)(pad0)) << ELA_MASK_CDE_PAD0_SHIFT);\
}
#define ELA_MASK_CDE_TOTAL_SIZE	32
#define ELA_MASK_CDE(bit, byte) \
	((((unsigned long)(bit)) << ELA_MASK_CDE_BIT_SHIFT) | \
	 (((unsigned long)(byte)) << ELA_MASK_CDE_BYTE_SHIFT))

/*
 *  ELA_CONFIG struct
 */
#define ELA_CONFIG_START_IA_SIZE	1
#define ELA_CONFIG_START_IA_SHIFT	0
#define ELA_CONFIG_START_IA_MASK	0x00000001
#define ELA_CONFIG_GET_START_IA(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_START_IA_MASK) >> ELA_CONFIG_START_IA_SHIFT)
#define ELA_CONFIG_SET_START_IA(ELA_CONFIG, start_ia) { \
	FDL_ASSERT(!((start_ia) & ~((1 << ELA_CONFIG_START_IA_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_START_IA_MASK) | (((unsigned long)(start_ia)) << ELA_CONFIG_START_IA_SHIFT);\
}
#define ELA_CONFIG_CONFIG_STATE_SIZE	3
#define ELA_CONFIG_CONFIG_STATE_SHIFT	1
#define ELA_CONFIG_CONFIG_STATE_MASK	0x0000000e
#define ELA_CONFIG_GET_CONFIG_STATE(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_CONFIG_STATE_MASK) >> ELA_CONFIG_CONFIG_STATE_SHIFT)
#define ELA_CONFIG_SET_CONFIG_STATE(ELA_CONFIG, config_state) { \
	FDL_ASSERT(!((config_state) & ~((1 << ELA_CONFIG_CONFIG_STATE_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_CONFIG_STATE_MASK) | (((unsigned long)(config_state)) << ELA_CONFIG_CONFIG_STATE_SHIFT);\
}
#define ELA_CONFIG_GLOBAL_LOGEN_SIZE	1
#define ELA_CONFIG_GLOBAL_LOGEN_SHIFT	4
#define ELA_CONFIG_GLOBAL_LOGEN_MASK	0x00000010
#define ELA_CONFIG_GET_GLOBAL_LOGEN(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_GLOBAL_LOGEN_MASK) >> ELA_CONFIG_GLOBAL_LOGEN_SHIFT)
#define ELA_CONFIG_SET_GLOBAL_LOGEN(ELA_CONFIG, global_logen) { \
	FDL_ASSERT(!((global_logen) & ~((1 << ELA_CONFIG_GLOBAL_LOGEN_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_GLOBAL_LOGEN_MASK) | (((unsigned long)(global_logen)) << ELA_CONFIG_GLOBAL_LOGEN_SHIFT);\
}
#define ELA_CONFIG_LOGFULL_SIZE	1
#define ELA_CONFIG_LOGFULL_SHIFT	5
#define ELA_CONFIG_LOGFULL_MASK	0x00000020
#define ELA_CONFIG_GET_LOGFULL(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_LOGFULL_MASK) >> ELA_CONFIG_LOGFULL_SHIFT)
#define ELA_CONFIG_SET_LOGFULL(ELA_CONFIG, logfull) { \
	FDL_ASSERT(!((logfull) & ~((1 << ELA_CONFIG_LOGFULL_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_LOGFULL_MASK) | (((unsigned long)(logfull)) << ELA_CONFIG_LOGFULL_SHIFT);\
}
#define ELA_CONFIG_STOP_NWRAP_SIZE	1
#define ELA_CONFIG_STOP_NWRAP_SHIFT	6
#define ELA_CONFIG_STOP_NWRAP_MASK	0x00000040
#define ELA_CONFIG_GET_STOP_NWRAP(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_STOP_NWRAP_MASK) >> ELA_CONFIG_STOP_NWRAP_SHIFT)
#define ELA_CONFIG_SET_STOP_NWRAP(ELA_CONFIG, Stop_nwrap) { \
	FDL_ASSERT(!((Stop_nwrap) & ~((1 << ELA_CONFIG_STOP_NWRAP_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_STOP_NWRAP_MASK) | (((unsigned long)(Stop_nwrap)) << ELA_CONFIG_STOP_NWRAP_SHIFT);\
}
#define ELA_CONFIG_INT_ON_FULL_SIZE	1
#define ELA_CONFIG_INT_ON_FULL_SHIFT	7
#define ELA_CONFIG_INT_ON_FULL_MASK	0x00000080
#define ELA_CONFIG_GET_INT_ON_FULL(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_INT_ON_FULL_MASK) >> ELA_CONFIG_INT_ON_FULL_SHIFT)
#define ELA_CONFIG_SET_INT_ON_FULL(ELA_CONFIG, Int_on_full) { \
	FDL_ASSERT(!((Int_on_full) & ~((1 << ELA_CONFIG_INT_ON_FULL_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_INT_ON_FULL_MASK) | (((unsigned long)(Int_on_full)) << ELA_CONFIG_INT_ON_FULL_SHIFT);\
}
#define ELA_CONFIG_XACT_OR_CYCLE_SIZE	1
#define ELA_CONFIG_XACT_OR_CYCLE_SHIFT	8
#define ELA_CONFIG_XACT_OR_CYCLE_MASK	0x00000100
#define ELA_CONFIG_GET_XACT_OR_CYCLE(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_XACT_OR_CYCLE_MASK) >> ELA_CONFIG_XACT_OR_CYCLE_SHIFT)
#define ELA_CONFIG_SET_XACT_OR_CYCLE(ELA_CONFIG, xact_or_cycle) { \
	FDL_ASSERT(!((xact_or_cycle) & ~((1 << ELA_CONFIG_XACT_OR_CYCLE_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_XACT_OR_CYCLE_MASK) | (((unsigned long)(xact_or_cycle)) << ELA_CONFIG_XACT_OR_CYCLE_SHIFT);\
}
#define ELA_CONFIG_NINCR_SIZE	1
#define ELA_CONFIG_NINCR_SHIFT	9
#define ELA_CONFIG_NINCR_MASK	0x00000200
#define ELA_CONFIG_GET_NINCR(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_NINCR_MASK) >> ELA_CONFIG_NINCR_SHIFT)
#define ELA_CONFIG_SET_NINCR(ELA_CONFIG, nincr) { \
	FDL_ASSERT(!((nincr) & ~((1 << ELA_CONFIG_NINCR_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_NINCR_MASK) | (((unsigned long)(nincr)) << ELA_CONFIG_NINCR_SHIFT);\
}
#define ELA_CONFIG_EFB_ACTIVE_SIZE	1
#define ELA_CONFIG_EFB_ACTIVE_SHIFT	10
#define ELA_CONFIG_EFB_ACTIVE_MASK	0x00000400
#define ELA_CONFIG_GET_EFB_ACTIVE(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_EFB_ACTIVE_MASK) >> ELA_CONFIG_EFB_ACTIVE_SHIFT)
#define ELA_CONFIG_SET_EFB_ACTIVE(ELA_CONFIG, efb_active) { \
	FDL_ASSERT(!((efb_active) & ~((1 << ELA_CONFIG_EFB_ACTIVE_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_EFB_ACTIVE_MASK) | (((unsigned long)(efb_active)) << ELA_CONFIG_EFB_ACTIVE_SHIFT);\
}
#define ELA_CONFIG_PE_EFB_RO_SIZE	1
#define ELA_CONFIG_PE_EFB_RO_SHIFT	11
#define ELA_CONFIG_PE_EFB_RO_MASK	0x00000800
#define ELA_CONFIG_GET_PE_EFB_RO(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_PE_EFB_RO_MASK) >> ELA_CONFIG_PE_EFB_RO_SHIFT)
#define ELA_CONFIG_SET_PE_EFB_RO(ELA_CONFIG, pe_efb_ro) { \
	FDL_ASSERT(!((pe_efb_ro) & ~((1 << ELA_CONFIG_PE_EFB_RO_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_PE_EFB_RO_MASK) | (((unsigned long)(pe_efb_ro)) << ELA_CONFIG_PE_EFB_RO_SHIFT);\
}
#define ELA_CONFIG_EXT_TRIG_EN_SIZE	1
#define ELA_CONFIG_EXT_TRIG_EN_SHIFT	12
#define ELA_CONFIG_EXT_TRIG_EN_MASK	0x00001000
#define ELA_CONFIG_GET_EXT_TRIG_EN(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_EXT_TRIG_EN_MASK) >> ELA_CONFIG_EXT_TRIG_EN_SHIFT)
#define ELA_CONFIG_SET_EXT_TRIG_EN(ELA_CONFIG, ext_trig_en) { \
	FDL_ASSERT(!((ext_trig_en) & ~((1 << ELA_CONFIG_EXT_TRIG_EN_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_EXT_TRIG_EN_MASK) | (((unsigned long)(ext_trig_en)) << ELA_CONFIG_EXT_TRIG_EN_SHIFT);\
}
#define ELA_CONFIG_ELA_DBGBUS_SEL_SIZE	1
#define ELA_CONFIG_ELA_DBGBUS_SEL_SHIFT	13
#define ELA_CONFIG_ELA_DBGBUS_SEL_MASK	0x00002000
#define ELA_CONFIG_GET_ELA_DBGBUS_SEL(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_ELA_DBGBUS_SEL_MASK) >> ELA_CONFIG_ELA_DBGBUS_SEL_SHIFT)
#define ELA_CONFIG_SET_ELA_DBGBUS_SEL(ELA_CONFIG, ela_dbgbus_sel) { \
	FDL_ASSERT(!((ela_dbgbus_sel) & ~((1 << ELA_CONFIG_ELA_DBGBUS_SEL_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_ELA_DBGBUS_SEL_MASK) | (((unsigned long)(ela_dbgbus_sel)) << ELA_CONFIG_ELA_DBGBUS_SEL_SHIFT);\
}
#define ELA_CONFIG_PAD0_SIZE	18
#define ELA_CONFIG_PAD0_SHIFT	14
#define ELA_CONFIG_PAD0_MASK	0xffffc000
#define ELA_CONFIG_GET_PAD0(ELA_CONFIG) \
	((((unsigned long)(ELA_CONFIG)) & ELA_CONFIG_PAD0_MASK) >> ELA_CONFIG_PAD0_SHIFT)
#define ELA_CONFIG_SET_PAD0(ELA_CONFIG, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ELA_CONFIG_PAD0_SIZE)-1))); \
	ELA_CONFIG = (((unsigned long)(ELA_CONFIG)) & ~ELA_CONFIG_PAD0_MASK) | (((unsigned long)(pad0)) << ELA_CONFIG_PAD0_SHIFT);\
}
#define ELA_CONFIG_TOTAL_SIZE	32
#define ELA_CONFIG(start_ia, config_state, global_logen, logfull, Stop_nwrap, Int_on_full, xact_or_cycle, nincr, efb_active, pe_efb_ro, ext_trig_en, ela_dbgbus_sel) \
	((((unsigned long)(start_ia)) << ELA_CONFIG_START_IA_SHIFT) | \
	 (((unsigned long)(config_state)) << ELA_CONFIG_CONFIG_STATE_SHIFT) | \
	 (((unsigned long)(global_logen)) << ELA_CONFIG_GLOBAL_LOGEN_SHIFT) | \
	 (((unsigned long)(logfull)) << ELA_CONFIG_LOGFULL_SHIFT) | \
	 (((unsigned long)(Stop_nwrap)) << ELA_CONFIG_STOP_NWRAP_SHIFT) | \
	 (((unsigned long)(Int_on_full)) << ELA_CONFIG_INT_ON_FULL_SHIFT) | \
	 (((unsigned long)(xact_or_cycle)) << ELA_CONFIG_XACT_OR_CYCLE_SHIFT) | \
	 (((unsigned long)(nincr)) << ELA_CONFIG_NINCR_SHIFT) | \
	 (((unsigned long)(efb_active)) << ELA_CONFIG_EFB_ACTIVE_SHIFT) | \
	 (((unsigned long)(pe_efb_ro)) << ELA_CONFIG_PE_EFB_RO_SHIFT) | \
	 (((unsigned long)(ext_trig_en)) << ELA_CONFIG_EXT_TRIG_EN_SHIFT) | \
	 (((unsigned long)(ela_dbgbus_sel)) << ELA_CONFIG_ELA_DBGBUS_SEL_SHIFT))

/*
 *  IPCPPCCTRL struct
 */
#define IPCPPCCTRL_OUT_MSG_SIZE	1
#define IPCPPCCTRL_OUT_MSG_SHIFT	0
#define IPCPPCCTRL_OUT_MSG_MASK	0x00000001
#define IPCPPCCTRL_GET_OUT_MSG(IPCPPCCTRL) \
	((((unsigned long)(IPCPPCCTRL)) & IPCPPCCTRL_OUT_MSG_MASK) >> IPCPPCCTRL_OUT_MSG_SHIFT)
#define IPCPPCCTRL_SET_OUT_MSG(IPCPPCCTRL, OUT_MSG) { \
	FDL_ASSERT(!((OUT_MSG) & ~((1 << IPCPPCCTRL_OUT_MSG_SIZE)-1))); \
	IPCPPCCTRL = (((unsigned long)(IPCPPCCTRL)) & ~IPCPPCCTRL_OUT_MSG_MASK) | (((unsigned long)(OUT_MSG)) << IPCPPCCTRL_OUT_MSG_SHIFT);\
}
#define IPCPPCCTRL_IN_ACK_SIZE	1
#define IPCPPCCTRL_IN_ACK_SHIFT	1
#define IPCPPCCTRL_IN_ACK_MASK	0x00000002
#define IPCPPCCTRL_GET_IN_ACK(IPCPPCCTRL) \
	((((unsigned long)(IPCPPCCTRL)) & IPCPPCCTRL_IN_ACK_MASK) >> IPCPPCCTRL_IN_ACK_SHIFT)
#define IPCPPCCTRL_SET_IN_ACK(IPCPPCCTRL, IN_ACK) { \
	FDL_ASSERT(!((IN_ACK) & ~((1 << IPCPPCCTRL_IN_ACK_SIZE)-1))); \
	IPCPPCCTRL = (((unsigned long)(IPCPPCCTRL)) & ~IPCPPCCTRL_IN_ACK_MASK) | (((unsigned long)(IN_ACK)) << IPCPPCCTRL_IN_ACK_SHIFT);\
}
#define IPCPPCCTRL_IN_MSG_SIZE	1
#define IPCPPCCTRL_IN_MSG_SHIFT	2
#define IPCPPCCTRL_IN_MSG_MASK	0x00000004
#define IPCPPCCTRL_GET_IN_MSG(IPCPPCCTRL) \
	((((unsigned long)(IPCPPCCTRL)) & IPCPPCCTRL_IN_MSG_MASK) >> IPCPPCCTRL_IN_MSG_SHIFT)
#define IPCPPCCTRL_SET_IN_MSG(IPCPPCCTRL, IN_MSG) { \
	FDL_ASSERT(!((IN_MSG) & ~((1 << IPCPPCCTRL_IN_MSG_SIZE)-1))); \
	IPCPPCCTRL = (((unsigned long)(IPCPPCCTRL)) & ~IPCPPCCTRL_IN_MSG_MASK) | (((unsigned long)(IN_MSG)) << IPCPPCCTRL_IN_MSG_SHIFT);\
}
#define IPCPPCCTRL_OUT_ACK_SIZE	1
#define IPCPPCCTRL_OUT_ACK_SHIFT	3
#define IPCPPCCTRL_OUT_ACK_MASK	0x00000008
#define IPCPPCCTRL_GET_OUT_ACK(IPCPPCCTRL) \
	((((unsigned long)(IPCPPCCTRL)) & IPCPPCCTRL_OUT_ACK_MASK) >> IPCPPCCTRL_OUT_ACK_SHIFT)
#define IPCPPCCTRL_SET_OUT_ACK(IPCPPCCTRL, OUT_ACK) { \
	FDL_ASSERT(!((OUT_ACK) & ~((1 << IPCPPCCTRL_OUT_ACK_SIZE)-1))); \
	IPCPPCCTRL = (((unsigned long)(IPCPPCCTRL)) & ~IPCPPCCTRL_OUT_ACK_MASK) | (((unsigned long)(OUT_ACK)) << IPCPPCCTRL_OUT_ACK_SHIFT);\
}
#define IPCPPCCTRL_MSG_INTR_SIZE	1
#define IPCPPCCTRL_MSG_INTR_SHIFT	4
#define IPCPPCCTRL_MSG_INTR_MASK	0x00000010
#define IPCPPCCTRL_GET_MSG_INTR(IPCPPCCTRL) \
	((((unsigned long)(IPCPPCCTRL)) & IPCPPCCTRL_MSG_INTR_MASK) >> IPCPPCCTRL_MSG_INTR_SHIFT)
#define IPCPPCCTRL_SET_MSG_INTR(IPCPPCCTRL, MSG_INTR) { \
	FDL_ASSERT(!((MSG_INTR) & ~((1 << IPCPPCCTRL_MSG_INTR_SIZE)-1))); \
	IPCPPCCTRL = (((unsigned long)(IPCPPCCTRL)) & ~IPCPPCCTRL_MSG_INTR_MASK) | (((unsigned long)(MSG_INTR)) << IPCPPCCTRL_MSG_INTR_SHIFT);\
}
#define IPCPPCCTRL_ACK_INTR_SIZE	1
#define IPCPPCCTRL_ACK_INTR_SHIFT	5
#define IPCPPCCTRL_ACK_INTR_MASK	0x00000020
#define IPCPPCCTRL_GET_ACK_INTR(IPCPPCCTRL) \
	((((unsigned long)(IPCPPCCTRL)) & IPCPPCCTRL_ACK_INTR_MASK) >> IPCPPCCTRL_ACK_INTR_SHIFT)
#define IPCPPCCTRL_SET_ACK_INTR(IPCPPCCTRL, ACK_INTR) { \
	FDL_ASSERT(!((ACK_INTR) & ~((1 << IPCPPCCTRL_ACK_INTR_SIZE)-1))); \
	IPCPPCCTRL = (((unsigned long)(IPCPPCCTRL)) & ~IPCPPCCTRL_ACK_INTR_MASK) | (((unsigned long)(ACK_INTR)) << IPCPPCCTRL_ACK_INTR_SHIFT);\
}
#define IPCPPCCTRL_PAD0_SIZE	26
#define IPCPPCCTRL_PAD0_SHIFT	6
#define IPCPPCCTRL_PAD0_MASK	0xffffffc0
#define IPCPPCCTRL_GET_PAD0(IPCPPCCTRL) \
	((((unsigned long)(IPCPPCCTRL)) & IPCPPCCTRL_PAD0_MASK) >> IPCPPCCTRL_PAD0_SHIFT)
#define IPCPPCCTRL_SET_PAD0(IPCPPCCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << IPCPPCCTRL_PAD0_SIZE)-1))); \
	IPCPPCCTRL = (((unsigned long)(IPCPPCCTRL)) & ~IPCPPCCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << IPCPPCCTRL_PAD0_SHIFT);\
}
#define IPCPPCCTRL_TOTAL_SIZE	32
#define IPCPPCCTRL(OUT_MSG, IN_ACK, IN_MSG, OUT_ACK, MSG_INTR, ACK_INTR) \
	((((unsigned long)(OUT_MSG)) << IPCPPCCTRL_OUT_MSG_SHIFT) | \
	 (((unsigned long)(IN_ACK)) << IPCPPCCTRL_IN_ACK_SHIFT) | \
	 (((unsigned long)(IN_MSG)) << IPCPPCCTRL_IN_MSG_SHIFT) | \
	 (((unsigned long)(OUT_ACK)) << IPCPPCCTRL_OUT_ACK_SHIFT) | \
	 (((unsigned long)(MSG_INTR)) << IPCPPCCTRL_MSG_INTR_SHIFT) | \
	 (((unsigned long)(ACK_INTR)) << IPCPPCCTRL_ACK_INTR_SHIFT))

/*
 *  IPCIOPCTRL struct
 */
#define IPCIOPCTRL_OUT_MSG_SIZE	1
#define IPCIOPCTRL_OUT_MSG_SHIFT	0
#define IPCIOPCTRL_OUT_MSG_MASK	0x00000001
#define IPCIOPCTRL_GET_OUT_MSG(IPCIOPCTRL) \
	((((unsigned long)(IPCIOPCTRL)) & IPCIOPCTRL_OUT_MSG_MASK) >> IPCIOPCTRL_OUT_MSG_SHIFT)
#define IPCIOPCTRL_SET_OUT_MSG(IPCIOPCTRL, OUT_MSG) { \
	FDL_ASSERT(!((OUT_MSG) & ~((1 << IPCIOPCTRL_OUT_MSG_SIZE)-1))); \
	IPCIOPCTRL = (((unsigned long)(IPCIOPCTRL)) & ~IPCIOPCTRL_OUT_MSG_MASK) | (((unsigned long)(OUT_MSG)) << IPCIOPCTRL_OUT_MSG_SHIFT);\
}
#define IPCIOPCTRL_IN_ACK_SIZE	1
#define IPCIOPCTRL_IN_ACK_SHIFT	1
#define IPCIOPCTRL_IN_ACK_MASK	0x00000002
#define IPCIOPCTRL_GET_IN_ACK(IPCIOPCTRL) \
	((((unsigned long)(IPCIOPCTRL)) & IPCIOPCTRL_IN_ACK_MASK) >> IPCIOPCTRL_IN_ACK_SHIFT)
#define IPCIOPCTRL_SET_IN_ACK(IPCIOPCTRL, IN_ACK) { \
	FDL_ASSERT(!((IN_ACK) & ~((1 << IPCIOPCTRL_IN_ACK_SIZE)-1))); \
	IPCIOPCTRL = (((unsigned long)(IPCIOPCTRL)) & ~IPCIOPCTRL_IN_ACK_MASK) | (((unsigned long)(IN_ACK)) << IPCIOPCTRL_IN_ACK_SHIFT);\
}
#define IPCIOPCTRL_IN_MSG_SIZE	1
#define IPCIOPCTRL_IN_MSG_SHIFT	2
#define IPCIOPCTRL_IN_MSG_MASK	0x00000004
#define IPCIOPCTRL_GET_IN_MSG(IPCIOPCTRL) \
	((((unsigned long)(IPCIOPCTRL)) & IPCIOPCTRL_IN_MSG_MASK) >> IPCIOPCTRL_IN_MSG_SHIFT)
#define IPCIOPCTRL_SET_IN_MSG(IPCIOPCTRL, IN_MSG) { \
	FDL_ASSERT(!((IN_MSG) & ~((1 << IPCIOPCTRL_IN_MSG_SIZE)-1))); \
	IPCIOPCTRL = (((unsigned long)(IPCIOPCTRL)) & ~IPCIOPCTRL_IN_MSG_MASK) | (((unsigned long)(IN_MSG)) << IPCIOPCTRL_IN_MSG_SHIFT);\
}
#define IPCIOPCTRL_OUT_ACK_SIZE	1
#define IPCIOPCTRL_OUT_ACK_SHIFT	3
#define IPCIOPCTRL_OUT_ACK_MASK	0x00000008
#define IPCIOPCTRL_GET_OUT_ACK(IPCIOPCTRL) \
	((((unsigned long)(IPCIOPCTRL)) & IPCIOPCTRL_OUT_ACK_MASK) >> IPCIOPCTRL_OUT_ACK_SHIFT)
#define IPCIOPCTRL_SET_OUT_ACK(IPCIOPCTRL, OUT_ACK) { \
	FDL_ASSERT(!((OUT_ACK) & ~((1 << IPCIOPCTRL_OUT_ACK_SIZE)-1))); \
	IPCIOPCTRL = (((unsigned long)(IPCIOPCTRL)) & ~IPCIOPCTRL_OUT_ACK_MASK) | (((unsigned long)(OUT_ACK)) << IPCIOPCTRL_OUT_ACK_SHIFT);\
}
#define IPCIOPCTRL_MSG_INTR_SIZE	1
#define IPCIOPCTRL_MSG_INTR_SHIFT	4
#define IPCIOPCTRL_MSG_INTR_MASK	0x00000010
#define IPCIOPCTRL_GET_MSG_INTR(IPCIOPCTRL) \
	((((unsigned long)(IPCIOPCTRL)) & IPCIOPCTRL_MSG_INTR_MASK) >> IPCIOPCTRL_MSG_INTR_SHIFT)
#define IPCIOPCTRL_SET_MSG_INTR(IPCIOPCTRL, MSG_INTR) { \
	FDL_ASSERT(!((MSG_INTR) & ~((1 << IPCIOPCTRL_MSG_INTR_SIZE)-1))); \
	IPCIOPCTRL = (((unsigned long)(IPCIOPCTRL)) & ~IPCIOPCTRL_MSG_INTR_MASK) | (((unsigned long)(MSG_INTR)) << IPCIOPCTRL_MSG_INTR_SHIFT);\
}
#define IPCIOPCTRL_ACK_INTR_SIZE	1
#define IPCIOPCTRL_ACK_INTR_SHIFT	5
#define IPCIOPCTRL_ACK_INTR_MASK	0x00000020
#define IPCIOPCTRL_GET_ACK_INTR(IPCIOPCTRL) \
	((((unsigned long)(IPCIOPCTRL)) & IPCIOPCTRL_ACK_INTR_MASK) >> IPCIOPCTRL_ACK_INTR_SHIFT)
#define IPCIOPCTRL_SET_ACK_INTR(IPCIOPCTRL, ACK_INTR) { \
	FDL_ASSERT(!((ACK_INTR) & ~((1 << IPCIOPCTRL_ACK_INTR_SIZE)-1))); \
	IPCIOPCTRL = (((unsigned long)(IPCIOPCTRL)) & ~IPCIOPCTRL_ACK_INTR_MASK) | (((unsigned long)(ACK_INTR)) << IPCIOPCTRL_ACK_INTR_SHIFT);\
}
#define IPCIOPCTRL_PAD0_SIZE	26
#define IPCIOPCTRL_PAD0_SHIFT	6
#define IPCIOPCTRL_PAD0_MASK	0xffffffc0
#define IPCIOPCTRL_GET_PAD0(IPCIOPCTRL) \
	((((unsigned long)(IPCIOPCTRL)) & IPCIOPCTRL_PAD0_MASK) >> IPCIOPCTRL_PAD0_SHIFT)
#define IPCIOPCTRL_SET_PAD0(IPCIOPCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << IPCIOPCTRL_PAD0_SIZE)-1))); \
	IPCIOPCTRL = (((unsigned long)(IPCIOPCTRL)) & ~IPCIOPCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << IPCIOPCTRL_PAD0_SHIFT);\
}
#define IPCIOPCTRL_TOTAL_SIZE	32
#define IPCIOPCTRL(OUT_MSG, IN_ACK, IN_MSG, OUT_ACK, MSG_INTR, ACK_INTR) \
	((((unsigned long)(OUT_MSG)) << IPCIOPCTRL_OUT_MSG_SHIFT) | \
	 (((unsigned long)(IN_ACK)) << IPCIOPCTRL_IN_ACK_SHIFT) | \
	 (((unsigned long)(IN_MSG)) << IPCIOPCTRL_IN_MSG_SHIFT) | \
	 (((unsigned long)(OUT_ACK)) << IPCIOPCTRL_OUT_ACK_SHIFT) | \
	 (((unsigned long)(MSG_INTR)) << IPCIOPCTRL_MSG_INTR_SHIFT) | \
	 (((unsigned long)(ACK_INTR)) << IPCIOPCTRL_ACK_INTR_SHIFT))

/*
 *  AIPPROT struct
 */
#define AIPPROT_ENAHBIOPI_SIZE	1
#define AIPPROT_ENAHBIOPI_SHIFT	0
#define AIPPROT_ENAHBIOPI_MASK	0x00000001
#define AIPPROT_GET_ENAHBIOPI(AIPPROT) \
	((((unsigned long)(AIPPROT)) & AIPPROT_ENAHBIOPI_MASK) >> AIPPROT_ENAHBIOPI_SHIFT)
#define AIPPROT_SET_ENAHBIOPI(AIPPROT, ENAHBIOPI) { \
	FDL_ASSERT(!((ENAHBIOPI) & ~((1 << AIPPROT_ENAHBIOPI_SIZE)-1))); \
	AIPPROT = (((unsigned long)(AIPPROT)) & ~AIPPROT_ENAHBIOPI_MASK) | (((unsigned long)(ENAHBIOPI)) << AIPPROT_ENAHBIOPI_SHIFT);\
}
#define AIPPROT_ENAHBPI2AI_SIZE	1
#define AIPPROT_ENAHBPI2AI_SHIFT	1
#define AIPPROT_ENAHBPI2AI_MASK	0x00000002
#define AIPPROT_GET_ENAHBPI2AI(AIPPROT) \
	((((unsigned long)(AIPPROT)) & AIPPROT_ENAHBPI2AI_MASK) >> AIPPROT_ENAHBPI2AI_SHIFT)
#define AIPPROT_SET_ENAHBPI2AI(AIPPROT, ENAHBPI2AI) { \
	FDL_ASSERT(!((ENAHBPI2AI) & ~((1 << AIPPROT_ENAHBPI2AI_SIZE)-1))); \
	AIPPROT = (((unsigned long)(AIPPROT)) & ~AIPPROT_ENAHBPI2AI_MASK) | (((unsigned long)(ENAHBPI2AI)) << AIPPROT_ENAHBPI2AI_SHIFT);\
}
#define AIPPROT_ENAHBPI2EXI_SIZE	1
#define AIPPROT_ENAHBPI2EXI_SHIFT	2
#define AIPPROT_ENAHBPI2EXI_MASK	0x00000004
#define AIPPROT_GET_ENAHBPI2EXI(AIPPROT) \
	((((unsigned long)(AIPPROT)) & AIPPROT_ENAHBPI2EXI_MASK) >> AIPPROT_ENAHBPI2EXI_SHIFT)
#define AIPPROT_SET_ENAHBPI2EXI(AIPPROT, ENAHBPI2EXI) { \
	FDL_ASSERT(!((ENAHBPI2EXI) & ~((1 << AIPPROT_ENAHBPI2EXI_SIZE)-1))); \
	AIPPROT = (((unsigned long)(AIPPROT)) & ~AIPPROT_ENAHBPI2EXI_MASK) | (((unsigned long)(ENAHBPI2EXI)) << AIPPROT_ENAHBPI2EXI_SHIFT);\
}
#define AIPPROT_ENAHBPI2SI_SIZE	1
#define AIPPROT_ENAHBPI2SI_SHIFT	3
#define AIPPROT_ENAHBPI2SI_MASK	0x00000008
#define AIPPROT_GET_ENAHBPI2SI(AIPPROT) \
	((((unsigned long)(AIPPROT)) & AIPPROT_ENAHBPI2SI_MASK) >> AIPPROT_ENAHBPI2SI_SHIFT)
#define AIPPROT_SET_ENAHBPI2SI(AIPPROT, ENAHBPI2SI) { \
	FDL_ASSERT(!((ENAHBPI2SI) & ~((1 << AIPPROT_ENAHBPI2SI_SIZE)-1))); \
	AIPPROT = (((unsigned long)(AIPPROT)) & ~AIPPROT_ENAHBPI2SI_MASK) | (((unsigned long)(ENAHBPI2SI)) << AIPPROT_ENAHBPI2SI_SHIFT);\
}
#define AIPPROT_ENAHBPI2DI_SIZE	1
#define AIPPROT_ENAHBPI2DI_SHIFT	4
#define AIPPROT_ENAHBPI2DI_MASK	0x00000010
#define AIPPROT_GET_ENAHBPI2DI(AIPPROT) \
	((((unsigned long)(AIPPROT)) & AIPPROT_ENAHBPI2DI_MASK) >> AIPPROT_ENAHBPI2DI_SHIFT)
#define AIPPROT_SET_ENAHBPI2DI(AIPPROT, ENAHBPI2DI) { \
	FDL_ASSERT(!((ENAHBPI2DI) & ~((1 << AIPPROT_ENAHBPI2DI_SIZE)-1))); \
	AIPPROT = (((unsigned long)(AIPPROT)) & ~AIPPROT_ENAHBPI2DI_MASK) | (((unsigned long)(ENAHBPI2DI)) << AIPPROT_ENAHBPI2DI_SHIFT);\
}
#define AIPPROT_PAD0_SIZE	27
#define AIPPROT_PAD0_SHIFT	5
#define AIPPROT_PAD0_MASK	0xffffffe0
#define AIPPROT_GET_PAD0(AIPPROT) \
	((((unsigned long)(AIPPROT)) & AIPPROT_PAD0_MASK) >> AIPPROT_PAD0_SHIFT)
#define AIPPROT_SET_PAD0(AIPPROT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AIPPROT_PAD0_SIZE)-1))); \
	AIPPROT = (((unsigned long)(AIPPROT)) & ~AIPPROT_PAD0_MASK) | (((unsigned long)(pad0)) << AIPPROT_PAD0_SHIFT);\
}
#define AIPPROT_TOTAL_SIZE	32
#define AIPPROT(ENAHBIOPI, ENAHBPI2AI, ENAHBPI2EXI, ENAHBPI2SI, ENAHBPI2DI) \
	((((unsigned long)(ENAHBIOPI)) << AIPPROT_ENAHBIOPI_SHIFT) | \
	 (((unsigned long)(ENAHBPI2AI)) << AIPPROT_ENAHBPI2AI_SHIFT) | \
	 (((unsigned long)(ENAHBPI2EXI)) << AIPPROT_ENAHBPI2EXI_SHIFT) | \
	 (((unsigned long)(ENAHBPI2SI)) << AIPPROT_ENAHBPI2SI_SHIFT) | \
	 (((unsigned long)(ENAHBPI2DI)) << AIPPROT_ENAHBPI2DI_SHIFT))

/*
 *  AIPIOCTRL struct
 */
#define AIPIOCTRL_ENAHBIOMEM_SIZE	1
#define AIPIOCTRL_ENAHBIOMEM_SHIFT	0
#define AIPIOCTRL_ENAHBIOMEM_MASK	0x00000001
#define AIPIOCTRL_GET_ENAHBIOMEM(AIPIOCTRL) \
	((((unsigned long)(AIPIOCTRL)) & AIPIOCTRL_ENAHBIOMEM_MASK) >> AIPIOCTRL_ENAHBIOMEM_SHIFT)
#define AIPIOCTRL_SET_ENAHBIOMEM(AIPIOCTRL, ENAHBIOMEM) { \
	FDL_ASSERT(!((ENAHBIOMEM) & ~((1 << AIPIOCTRL_ENAHBIOMEM_SIZE)-1))); \
	AIPIOCTRL = (((unsigned long)(AIPIOCTRL)) & ~AIPIOCTRL_ENAHBIOMEM_MASK) | (((unsigned long)(ENAHBIOMEM)) << AIPIOCTRL_ENAHBIOMEM_SHIFT);\
}
#define AIPIOCTRL_PAD0_SIZE	1
#define AIPIOCTRL_PAD0_SHIFT	1
#define AIPIOCTRL_PAD0_MASK	0x00000002
#define AIPIOCTRL_GET_PAD0(AIPIOCTRL) \
	((((unsigned long)(AIPIOCTRL)) & AIPIOCTRL_PAD0_MASK) >> AIPIOCTRL_PAD0_SHIFT)
#define AIPIOCTRL_SET_PAD0(AIPIOCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AIPIOCTRL_PAD0_SIZE)-1))); \
	AIPIOCTRL = (((unsigned long)(AIPIOCTRL)) & ~AIPIOCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << AIPIOCTRL_PAD0_SHIFT);\
}
#define AIPIOCTRL_EXI0_SIZE	1
#define AIPIOCTRL_EXI0_SHIFT	2
#define AIPIOCTRL_EXI0_MASK	0x00000004
#define AIPIOCTRL_GET_EXI0(AIPIOCTRL) \
	((((unsigned long)(AIPIOCTRL)) & AIPIOCTRL_EXI0_MASK) >> AIPIOCTRL_EXI0_SHIFT)
#define AIPIOCTRL_SET_EXI0(AIPIOCTRL, EXI0) { \
	FDL_ASSERT(!((EXI0) & ~((1 << AIPIOCTRL_EXI0_SIZE)-1))); \
	AIPIOCTRL = (((unsigned long)(AIPIOCTRL)) & ~AIPIOCTRL_EXI0_MASK) | (((unsigned long)(EXI0)) << AIPIOCTRL_EXI0_SHIFT);\
}
#define AIPIOCTRL_EXI1_SIZE	1
#define AIPIOCTRL_EXI1_SHIFT	3
#define AIPIOCTRL_EXI1_MASK	0x00000008
#define AIPIOCTRL_GET_EXI1(AIPIOCTRL) \
	((((unsigned long)(AIPIOCTRL)) & AIPIOCTRL_EXI1_MASK) >> AIPIOCTRL_EXI1_SHIFT)
#define AIPIOCTRL_SET_EXI1(AIPIOCTRL, EXI1) { \
	FDL_ASSERT(!((EXI1) & ~((1 << AIPIOCTRL_EXI1_SIZE)-1))); \
	AIPIOCTRL = (((unsigned long)(AIPIOCTRL)) & ~AIPIOCTRL_EXI1_MASK) | (((unsigned long)(EXI1)) << AIPIOCTRL_EXI1_SHIFT);\
}
#define AIPIOCTRL_EXI2_SIZE	1
#define AIPIOCTRL_EXI2_SHIFT	4
#define AIPIOCTRL_EXI2_MASK	0x00000010
#define AIPIOCTRL_GET_EXI2(AIPIOCTRL) \
	((((unsigned long)(AIPIOCTRL)) & AIPIOCTRL_EXI2_MASK) >> AIPIOCTRL_EXI2_SHIFT)
#define AIPIOCTRL_SET_EXI2(AIPIOCTRL, EXI2) { \
	FDL_ASSERT(!((EXI2) & ~((1 << AIPIOCTRL_EXI2_SIZE)-1))); \
	AIPIOCTRL = (((unsigned long)(AIPIOCTRL)) & ~AIPIOCTRL_EXI2_MASK) | (((unsigned long)(EXI2)) << AIPIOCTRL_EXI2_SHIFT);\
}
#define AIPIOCTRL_PAD1_SIZE	27
#define AIPIOCTRL_PAD1_SHIFT	5
#define AIPIOCTRL_PAD1_MASK	0xffffffe0
#define AIPIOCTRL_GET_PAD1(AIPIOCTRL) \
	((((unsigned long)(AIPIOCTRL)) & AIPIOCTRL_PAD1_MASK) >> AIPIOCTRL_PAD1_SHIFT)
#define AIPIOCTRL_SET_PAD1(AIPIOCTRL, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << AIPIOCTRL_PAD1_SIZE)-1))); \
	AIPIOCTRL = (((unsigned long)(AIPIOCTRL)) & ~AIPIOCTRL_PAD1_MASK) | (((unsigned long)(pad1)) << AIPIOCTRL_PAD1_SHIFT);\
}
#define AIPIOCTRL_TOTAL_SIZE	32
#define AIPIOCTRL(ENAHBIOMEM, EXI0, EXI1, EXI2) \
	((((unsigned long)(ENAHBIOMEM)) << AIPIOCTRL_ENAHBIOMEM_SHIFT) | \
	 (((unsigned long)(EXI0)) << AIPIOCTRL_EXI0_SHIFT) | \
	 (((unsigned long)(EXI1)) << AIPIOCTRL_EXI1_SHIFT) | \
	 (((unsigned long)(EXI2)) << AIPIOCTRL_EXI2_SHIFT))

/*
 *  ACRINTSTS struct
 */
#define ACRINTSTS_TMRINT_SIZE	1
#define ACRINTSTS_TMRINT_SHIFT	0
#define ACRINTSTS_TMRINT_MASK	0x00000001
#define ACRINTSTS_GET_TMRINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_TMRINT_MASK) >> ACRINTSTS_TMRINT_SHIFT)
#define ACRINTSTS_SET_TMRINT(ACRINTSTS, TMRINT) { \
	FDL_ASSERT(!((TMRINT) & ~((1 << ACRINTSTS_TMRINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_TMRINT_MASK) | (((unsigned long)(TMRINT)) << ACRINTSTS_TMRINT_SHIFT);\
}
#define ACRINTSTS_FLAINT_SIZE	1
#define ACRINTSTS_FLAINT_SHIFT	1
#define ACRINTSTS_FLAINT_MASK	0x00000002
#define ACRINTSTS_GET_FLAINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_FLAINT_MASK) >> ACRINTSTS_FLAINT_SHIFT)
#define ACRINTSTS_SET_FLAINT(ACRINTSTS, FLAINT) { \
	FDL_ASSERT(!((FLAINT) & ~((1 << ACRINTSTS_FLAINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_FLAINT_MASK) | (((unsigned long)(FLAINT)) << ACRINTSTS_FLAINT_SHIFT);\
}
#define ACRINTSTS_AESINT_SIZE	1
#define ACRINTSTS_AESINT_SHIFT	2
#define ACRINTSTS_AESINT_MASK	0x00000004
#define ACRINTSTS_GET_AESINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_AESINT_MASK) >> ACRINTSTS_AESINT_SHIFT)
#define ACRINTSTS_SET_AESINT(ACRINTSTS, AESINT) { \
	FDL_ASSERT(!((AESINT) & ~((1 << ACRINTSTS_AESINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_AESINT_MASK) | (((unsigned long)(AESINT)) << ACRINTSTS_AESINT_SHIFT);\
}
#define ACRINTSTS_SHAINT_SIZE	1
#define ACRINTSTS_SHAINT_SHIFT	3
#define ACRINTSTS_SHAINT_MASK	0x00000008
#define ACRINTSTS_GET_SHAINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SHAINT_MASK) >> ACRINTSTS_SHAINT_SHIFT)
#define ACRINTSTS_SET_SHAINT(ACRINTSTS, SHAINT) { \
	FDL_ASSERT(!((SHAINT) & ~((1 << ACRINTSTS_SHAINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SHAINT_MASK) | (((unsigned long)(SHAINT)) << ACRINTSTS_SHAINT_SHIFT);\
}
#define ACRINTSTS_EHCINT_SIZE	1
#define ACRINTSTS_EHCINT_SHIFT	4
#define ACRINTSTS_EHCINT_MASK	0x00000010
#define ACRINTSTS_GET_EHCINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_EHCINT_MASK) >> ACRINTSTS_EHCINT_SHIFT)
#define ACRINTSTS_SET_EHCINT(ACRINTSTS, EHCINT) { \
	FDL_ASSERT(!((EHCINT) & ~((1 << ACRINTSTS_EHCINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_EHCINT_MASK) | (((unsigned long)(EHCINT)) << ACRINTSTS_EHCINT_SHIFT);\
}
#define ACRINTSTS_OH0INT_SIZE	1
#define ACRINTSTS_OH0INT_SHIFT	5
#define ACRINTSTS_OH0INT_MASK	0x00000020
#define ACRINTSTS_GET_OH0INT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_OH0INT_MASK) >> ACRINTSTS_OH0INT_SHIFT)
#define ACRINTSTS_SET_OH0INT(ACRINTSTS, OH0INT) { \
	FDL_ASSERT(!((OH0INT) & ~((1 << ACRINTSTS_OH0INT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_OH0INT_MASK) | (((unsigned long)(OH0INT)) << ACRINTSTS_OH0INT_SHIFT);\
}
#define ACRINTSTS_OH1INT_SIZE	1
#define ACRINTSTS_OH1INT_SHIFT	6
#define ACRINTSTS_OH1INT_MASK	0x00000040
#define ACRINTSTS_GET_OH1INT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_OH1INT_MASK) >> ACRINTSTS_OH1INT_SHIFT)
#define ACRINTSTS_SET_OH1INT(ACRINTSTS, OH1INT) { \
	FDL_ASSERT(!((OH1INT) & ~((1 << ACRINTSTS_OH1INT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_OH1INT_MASK) | (((unsigned long)(OH1INT)) << ACRINTSTS_OH1INT_SHIFT);\
}
#define ACRINTSTS_SD0INT_SIZE	1
#define ACRINTSTS_SD0INT_SHIFT	7
#define ACRINTSTS_SD0INT_MASK	0x00000080
#define ACRINTSTS_GET_SD0INT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SD0INT_MASK) >> ACRINTSTS_SD0INT_SHIFT)
#define ACRINTSTS_SET_SD0INT(ACRINTSTS, SD0INT) { \
	FDL_ASSERT(!((SD0INT) & ~((1 << ACRINTSTS_SD0INT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SD0INT_MASK) | (((unsigned long)(SD0INT)) << ACRINTSTS_SD0INT_SHIFT);\
}
#define ACRINTSTS_SD1INT_SIZE	1
#define ACRINTSTS_SD1INT_SHIFT	8
#define ACRINTSTS_SD1INT_MASK	0x00000100
#define ACRINTSTS_GET_SD1INT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SD1INT_MASK) >> ACRINTSTS_SD1INT_SHIFT)
#define ACRINTSTS_SET_SD1INT(ACRINTSTS, SD1INT) { \
	FDL_ASSERT(!((SD1INT) & ~((1 << ACRINTSTS_SD1INT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SD1INT_MASK) | (((unsigned long)(SD1INT)) << ACRINTSTS_SD1INT_SHIFT);\
}
#define ACRINTSTS_BFMINT_SIZE	1
#define ACRINTSTS_BFMINT_SHIFT	9
#define ACRINTSTS_BFMINT_MASK	0x00000200
#define ACRINTSTS_GET_BFMINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_BFMINT_MASK) >> ACRINTSTS_BFMINT_SHIFT)
#define ACRINTSTS_SET_BFMINT(ACRINTSTS, BFMINT) { \
	FDL_ASSERT(!((BFMINT) & ~((1 << ACRINTSTS_BFMINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_BFMINT_MASK) | (((unsigned long)(BFMINT)) << ACRINTSTS_BFMINT_SHIFT);\
}
#define ACRINTSTS_GPIPPCINT_SIZE	1
#define ACRINTSTS_GPIPPCINT_SHIFT	10
#define ACRINTSTS_GPIPPCINT_MASK	0x00000400
#define ACRINTSTS_GET_GPIPPCINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_GPIPPCINT_MASK) >> ACRINTSTS_GPIPPCINT_SHIFT)
#define ACRINTSTS_SET_GPIPPCINT(ACRINTSTS, GPIPPCINT) { \
	FDL_ASSERT(!((GPIPPCINT) & ~((1 << ACRINTSTS_GPIPPCINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_GPIPPCINT_MASK) | (((unsigned long)(GPIPPCINT)) << ACRINTSTS_GPIPPCINT_SHIFT);\
}
#define ACRINTSTS_GPIIOPINT_SIZE	1
#define ACRINTSTS_GPIIOPINT_SHIFT	11
#define ACRINTSTS_GPIIOPINT_MASK	0x00000800
#define ACRINTSTS_GET_GPIIOPINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_GPIIOPINT_MASK) >> ACRINTSTS_GPIIOPINT_SHIFT)
#define ACRINTSTS_SET_GPIIOPINT(ACRINTSTS, GPIIOPINT) { \
	FDL_ASSERT(!((GPIIOPINT) & ~((1 << ACRINTSTS_GPIIOPINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_GPIIOPINT_MASK) | (((unsigned long)(GPIIOPINT)) << ACRINTSTS_GPIIOPINT_SHIFT);\
}
#define ACRINTSTS_AHBDBGINT_SIZE	1
#define ACRINTSTS_AHBDBGINT_SHIFT	12
#define ACRINTSTS_AHBDBGINT_MASK	0x00001000
#define ACRINTSTS_GET_AHBDBGINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_AHBDBGINT_MASK) >> ACRINTSTS_AHBDBGINT_SHIFT)
#define ACRINTSTS_SET_AHBDBGINT(ACRINTSTS, AHBDBGINT) { \
	FDL_ASSERT(!((AHBDBGINT) & ~((1 << ACRINTSTS_AHBDBGINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_AHBDBGINT_MASK) | (((unsigned long)(AHBDBGINT)) << ACRINTSTS_AHBDBGINT_SHIFT);\
}
#define ACRINTSTS_VIPIWRINT_SIZE	1
#define ACRINTSTS_VIPIWRINT_SHIFT	13
#define ACRINTSTS_VIPIWRINT_MASK	0x00002000
#define ACRINTSTS_GET_VIPIWRINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_VIPIWRINT_MASK) >> ACRINTSTS_VIPIWRINT_SHIFT)
#define ACRINTSTS_SET_VIPIWRINT(ACRINTSTS, VIPIWRINT) { \
	FDL_ASSERT(!((VIPIWRINT) & ~((1 << ACRINTSTS_VIPIWRINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_VIPIWRINT_MASK) | (((unsigned long)(VIPIWRINT)) << ACRINTSTS_VIPIWRINT_SHIFT);\
}
#define ACRINTSTS_SIEMUINT_SIZE	1
#define ACRINTSTS_SIEMUINT_SHIFT	14
#define ACRINTSTS_SIEMUINT_MASK	0x00004000
#define ACRINTSTS_GET_SIEMUINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SIEMUINT_MASK) >> ACRINTSTS_SIEMUINT_SHIFT)
#define ACRINTSTS_SET_SIEMUINT(ACRINTSTS, SIEMUINT) { \
	FDL_ASSERT(!((SIEMUINT) & ~((1 << ACRINTSTS_SIEMUINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SIEMUINT_MASK) | (((unsigned long)(SIEMUINT)) << ACRINTSTS_SIEMUINT_SHIFT);\
}
#define ACRINTSTS_SYSRSTBINT_SIZE	1
#define ACRINTSTS_SYSRSTBINT_SHIFT	15
#define ACRINTSTS_SYSRSTBINT_MASK	0x00008000
#define ACRINTSTS_GET_SYSRSTBINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SYSRSTBINT_MASK) >> ACRINTSTS_SYSRSTBINT_SHIFT)
#define ACRINTSTS_SET_SYSRSTBINT(ACRINTSTS, SYSRSTBINT) { \
	FDL_ASSERT(!((SYSRSTBINT) & ~((1 << ACRINTSTS_SYSRSTBINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SYSRSTBINT_MASK) | (((unsigned long)(SYSRSTBINT)) << ACRINTSTS_SYSRSTBINT_SHIFT);\
}
#define ACRINTSTS_VIVSYNCINT_SIZE	1
#define ACRINTSTS_VIVSYNCINT_SHIFT	16
#define ACRINTSTS_VIVSYNCINT_MASK	0x00010000
#define ACRINTSTS_GET_VIVSYNCINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_VIVSYNCINT_MASK) >> ACRINTSTS_VIVSYNCINT_SHIFT)
#define ACRINTSTS_SET_VIVSYNCINT(ACRINTSTS, VIVSYNCINT) { \
	FDL_ASSERT(!((VIVSYNCINT) & ~((1 << ACRINTSTS_VIVSYNCINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_VIVSYNCINT_MASK) | (((unsigned long)(VIVSYNCINT)) << ACRINTSTS_VIVSYNCINT_SHIFT);\
}
#define ACRINTSTS_RSWINT_SIZE	1
#define ACRINTSTS_RSWINT_SHIFT	17
#define ACRINTSTS_RSWINT_MASK	0x00020000
#define ACRINTSTS_GET_RSWINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_RSWINT_MASK) >> ACRINTSTS_RSWINT_SHIFT)
#define ACRINTSTS_SET_RSWINT(ACRINTSTS, RSWINT) { \
	FDL_ASSERT(!((RSWINT) & ~((1 << ACRINTSTS_RSWINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_RSWINT_MASK) | (((unsigned long)(RSWINT)) << ACRINTSTS_RSWINT_SHIFT);\
}
#define ACRINTSTS_DIINT_SIZE	1
#define ACRINTSTS_DIINT_SHIFT	18
#define ACRINTSTS_DIINT_MASK	0x00040000
#define ACRINTSTS_GET_DIINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_DIINT_MASK) >> ACRINTSTS_DIINT_SHIFT)
#define ACRINTSTS_SET_DIINT(ACRINTSTS, DIINT) { \
	FDL_ASSERT(!((DIINT) & ~((1 << ACRINTSTS_DIINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_DIINT_MASK) | (((unsigned long)(DIINT)) << ACRINTSTS_DIINT_SHIFT);\
}
#define ACRINTSTS_SIINT_SIZE	1
#define ACRINTSTS_SIINT_SHIFT	19
#define ACRINTSTS_SIINT_MASK	0x00080000
#define ACRINTSTS_GET_SIINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SIINT_MASK) >> ACRINTSTS_SIINT_SHIFT)
#define ACRINTSTS_SET_SIINT(ACRINTSTS, SIINT) { \
	FDL_ASSERT(!((SIINT) & ~((1 << ACRINTSTS_SIINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SIINT_MASK) | (((unsigned long)(SIINT)) << ACRINTSTS_SIINT_SHIFT);\
}
#define ACRINTSTS_EXIINT_SIZE	1
#define ACRINTSTS_EXIINT_SHIFT	20
#define ACRINTSTS_EXIINT_MASK	0x00100000
#define ACRINTSTS_GET_EXIINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_EXIINT_MASK) >> ACRINTSTS_EXIINT_SHIFT)
#define ACRINTSTS_SET_EXIINT(ACRINTSTS, EXIINT) { \
	FDL_ASSERT(!((EXIINT) & ~((1 << ACRINTSTS_EXIINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_EXIINT_MASK) | (((unsigned long)(EXIINT)) << ACRINTSTS_EXIINT_SHIFT);\
}
#define ACRINTSTS_AIINT_SIZE	1
#define ACRINTSTS_AIINT_SHIFT	21
#define ACRINTSTS_AIINT_MASK	0x00200000
#define ACRINTSTS_GET_AIINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_AIINT_MASK) >> ACRINTSTS_AIINT_SHIFT)
#define ACRINTSTS_SET_AIINT(ACRINTSTS, AIINT) { \
	FDL_ASSERT(!((AIINT) & ~((1 << ACRINTSTS_AIINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_AIINT_MASK) | (((unsigned long)(AIINT)) << ACRINTSTS_AIINT_SHIFT);\
}
#define ACRINTSTS_DSPINT_SIZE	1
#define ACRINTSTS_DSPINT_SHIFT	22
#define ACRINTSTS_DSPINT_MASK	0x00400000
#define ACRINTSTS_GET_DSPINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_DSPINT_MASK) >> ACRINTSTS_DSPINT_SHIFT)
#define ACRINTSTS_SET_DSPINT(ACRINTSTS, DSPINT) { \
	FDL_ASSERT(!((DSPINT) & ~((1 << ACRINTSTS_DSPINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_DSPINT_MASK) | (((unsigned long)(DSPINT)) << ACRINTSTS_DSPINT_SHIFT);\
}
#define ACRINTSTS_MEMINT_SIZE	1
#define ACRINTSTS_MEMINT_SHIFT	23
#define ACRINTSTS_MEMINT_MASK	0x00800000
#define ACRINTSTS_GET_MEMINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_MEMINT_MASK) >> ACRINTSTS_MEMINT_SHIFT)
#define ACRINTSTS_SET_MEMINT(ACRINTSTS, MEMINT) { \
	FDL_ASSERT(!((MEMINT) & ~((1 << ACRINTSTS_MEMINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_MEMINT_MASK) | (((unsigned long)(MEMINT)) << ACRINTSTS_MEMINT_SHIFT);\
}
#define ACRINTSTS_VIINT_SIZE	1
#define ACRINTSTS_VIINT_SHIFT	24
#define ACRINTSTS_VIINT_MASK	0x01000000
#define ACRINTSTS_GET_VIINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_VIINT_MASK) >> ACRINTSTS_VIINT_SHIFT)
#define ACRINTSTS_SET_VIINT(ACRINTSTS, VIINT) { \
	FDL_ASSERT(!((VIINT) & ~((1 << ACRINTSTS_VIINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_VIINT_MASK) | (((unsigned long)(VIINT)) << ACRINTSTS_VIINT_SHIFT);\
}
#define ACRINTSTS_PEINT0_SIZE	1
#define ACRINTSTS_PEINT0_SHIFT	25
#define ACRINTSTS_PEINT0_MASK	0x02000000
#define ACRINTSTS_GET_PEINT0(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_PEINT0_MASK) >> ACRINTSTS_PEINT0_SHIFT)
#define ACRINTSTS_SET_PEINT0(ACRINTSTS, PEINT0) { \
	FDL_ASSERT(!((PEINT0) & ~((1 << ACRINTSTS_PEINT0_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_PEINT0_MASK) | (((unsigned long)(PEINT0)) << ACRINTSTS_PEINT0_SHIFT);\
}
#define ACRINTSTS_PEINT1_SIZE	1
#define ACRINTSTS_PEINT1_SHIFT	26
#define ACRINTSTS_PEINT1_MASK	0x04000000
#define ACRINTSTS_GET_PEINT1(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_PEINT1_MASK) >> ACRINTSTS_PEINT1_SHIFT)
#define ACRINTSTS_SET_PEINT1(ACRINTSTS, PEINT1) { \
	FDL_ASSERT(!((PEINT1) & ~((1 << ACRINTSTS_PEINT1_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_PEINT1_MASK) | (((unsigned long)(PEINT1)) << ACRINTSTS_PEINT1_SHIFT);\
}
#define ACRINTSTS_CPINT_SIZE	1
#define ACRINTSTS_CPINT_SHIFT	27
#define ACRINTSTS_CPINT_MASK	0x08000000
#define ACRINTSTS_GET_CPINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_CPINT_MASK) >> ACRINTSTS_CPINT_SHIFT)
#define ACRINTSTS_SET_CPINT(ACRINTSTS, CPINT) { \
	FDL_ASSERT(!((CPINT) & ~((1 << ACRINTSTS_CPINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_CPINT_MASK) | (((unsigned long)(CPINT)) << ACRINTSTS_CPINT_SHIFT);\
}
#define ACRINTSTS_DBGINT_SIZE	1
#define ACRINTSTS_DBGINT_SHIFT	28
#define ACRINTSTS_DBGINT_MASK	0x10000000
#define ACRINTSTS_GET_DBGINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_DBGINT_MASK) >> ACRINTSTS_DBGINT_SHIFT)
#define ACRINTSTS_SET_DBGINT(ACRINTSTS, DBGINT) { \
	FDL_ASSERT(!((DBGINT) & ~((1 << ACRINTSTS_DBGINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_DBGINT_MASK) | (((unsigned long)(DBGINT)) << ACRINTSTS_DBGINT_SHIFT);\
}
#define ACRINTSTS_SDINT_SIZE	1
#define ACRINTSTS_SDINT_SHIFT	29
#define ACRINTSTS_SDINT_MASK	0x20000000
#define ACRINTSTS_GET_SDINT(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SDINT_MASK) >> ACRINTSTS_SDINT_SHIFT)
#define ACRINTSTS_SET_SDINT(ACRINTSTS, SDINT) { \
	FDL_ASSERT(!((SDINT) & ~((1 << ACRINTSTS_SDINT_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SDINT_MASK) | (((unsigned long)(SDINT)) << ACRINTSTS_SDINT_SHIFT);\
}
#define ACRINTSTS_ACRIPCPPC_SIZE	1
#define ACRINTSTS_ACRIPCPPC_SHIFT	30
#define ACRINTSTS_ACRIPCPPC_MASK	0x40000000
#define ACRINTSTS_GET_ACRIPCPPC(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_ACRIPCPPC_MASK) >> ACRINTSTS_ACRIPCPPC_SHIFT)
#define ACRINTSTS_SET_ACRIPCPPC(ACRINTSTS, ACRIPCPPC) { \
	FDL_ASSERT(!((ACRIPCPPC) & ~((1 << ACRINTSTS_ACRIPCPPC_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_ACRIPCPPC_MASK) | (((unsigned long)(ACRIPCPPC)) << ACRINTSTS_ACRIPCPPC_SHIFT);\
}
#define ACRINTSTS_ACRIPCIOP_SIZE	1
#define ACRINTSTS_ACRIPCIOP_SHIFT	31
#define ACRINTSTS_ACRIPCIOP_MASK	0x80000000
#define ACRINTSTS_GET_ACRIPCIOP(ACRINTSTS) \
	((((unsigned long)(ACRINTSTS)) & ACRINTSTS_ACRIPCIOP_MASK) >> ACRINTSTS_ACRIPCIOP_SHIFT)
#define ACRINTSTS_SET_ACRIPCIOP(ACRINTSTS, ACRIPCIOP) { \
	FDL_ASSERT(!((ACRIPCIOP) & ~((1 << ACRINTSTS_ACRIPCIOP_SIZE)-1))); \
	ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_ACRIPCIOP_MASK) | (((unsigned long)(ACRIPCIOP)) << ACRINTSTS_ACRIPCIOP_SHIFT);\
}
#define ACRINTSTS_TOTAL_SIZE	32
#define ACRINTSTS(TMRINT, FLAINT, AESINT, SHAINT, EHCINT, OH0INT, OH1INT, SD0INT, SD1INT, BFMINT, GPIPPCINT, GPIIOPINT, AHBDBGINT, VIPIWRINT, SIEMUINT, SYSRSTBINT, VIVSYNCINT, RSWINT, DIINT, SIINT, EXIINT, AIINT, DSPINT, MEMINT, VIINT, PEINT0, PEINT1, CPINT, DBGINT, SDINT, ACRIPCPPC, ACRIPCIOP) \
	((((unsigned long)(TMRINT)) << ACRINTSTS_TMRINT_SHIFT) | \
	 (((unsigned long)(FLAINT)) << ACRINTSTS_FLAINT_SHIFT) | \
	 (((unsigned long)(AESINT)) << ACRINTSTS_AESINT_SHIFT) | \
	 (((unsigned long)(SHAINT)) << ACRINTSTS_SHAINT_SHIFT) | \
	 (((unsigned long)(EHCINT)) << ACRINTSTS_EHCINT_SHIFT) | \
	 (((unsigned long)(OH0INT)) << ACRINTSTS_OH0INT_SHIFT) | \
	 (((unsigned long)(OH1INT)) << ACRINTSTS_OH1INT_SHIFT) | \
	 (((unsigned long)(SD0INT)) << ACRINTSTS_SD0INT_SHIFT) | \
	 (((unsigned long)(SD1INT)) << ACRINTSTS_SD1INT_SHIFT) | \
	 (((unsigned long)(BFMINT)) << ACRINTSTS_BFMINT_SHIFT) | \
	 (((unsigned long)(GPIPPCINT)) << ACRINTSTS_GPIPPCINT_SHIFT) | \
	 (((unsigned long)(GPIIOPINT)) << ACRINTSTS_GPIIOPINT_SHIFT) | \
	 (((unsigned long)(AHBDBGINT)) << ACRINTSTS_AHBDBGINT_SHIFT) | \
	 (((unsigned long)(VIPIWRINT)) << ACRINTSTS_VIPIWRINT_SHIFT) | \
	 (((unsigned long)(SIEMUINT)) << ACRINTSTS_SIEMUINT_SHIFT) | \
	 (((unsigned long)(SYSRSTBINT)) << ACRINTSTS_SYSRSTBINT_SHIFT) | \
	 (((unsigned long)(VIVSYNCINT)) << ACRINTSTS_VIVSYNCINT_SHIFT) | \
	 (((unsigned long)(RSWINT)) << ACRINTSTS_RSWINT_SHIFT) | \
	 (((unsigned long)(DIINT)) << ACRINTSTS_DIINT_SHIFT) | \
	 (((unsigned long)(SIINT)) << ACRINTSTS_SIINT_SHIFT) | \
	 (((unsigned long)(EXIINT)) << ACRINTSTS_EXIINT_SHIFT) | \
	 (((unsigned long)(AIINT)) << ACRINTSTS_AIINT_SHIFT) | \
	 (((unsigned long)(DSPINT)) << ACRINTSTS_DSPINT_SHIFT) | \
	 (((unsigned long)(MEMINT)) << ACRINTSTS_MEMINT_SHIFT) | \
	 (((unsigned long)(VIINT)) << ACRINTSTS_VIINT_SHIFT) | \
	 (((unsigned long)(PEINT0)) << ACRINTSTS_PEINT0_SHIFT) | \
	 (((unsigned long)(PEINT1)) << ACRINTSTS_PEINT1_SHIFT) | \
	 (((unsigned long)(CPINT)) << ACRINTSTS_CPINT_SHIFT) | \
	 (((unsigned long)(DBGINT)) << ACRINTSTS_DBGINT_SHIFT) | \
	 (((unsigned long)(SDINT)) << ACRINTSTS_SDINT_SHIFT) | \
	 (((unsigned long)(ACRIPCPPC)) << ACRINTSTS_ACRIPCPPC_SHIFT) | \
	 (((unsigned long)(ACRIPCIOP)) << ACRINTSTS_ACRIPCIOP_SHIFT))

/*
 *  AHBDBGINTSTS struct
 */
#define AHBDBGINTSTS_ERRINT_SIZE	1
#define AHBDBGINTSTS_ERRINT_SHIFT	0
#define AHBDBGINTSTS_ERRINT_MASK	0x00000001
#define AHBDBGINTSTS_GET_ERRINT(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_ERRINT_MASK) >> AHBDBGINTSTS_ERRINT_SHIFT)
#define AHBDBGINTSTS_SET_ERRINT(AHBDBGINTSTS, ERRINT) { \
	FDL_ASSERT(!((ERRINT) & ~((1 << AHBDBGINTSTS_ERRINT_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_ERRINT_MASK) | (((unsigned long)(ERRINT)) << AHBDBGINTSTS_ERRINT_SHIFT);\
}
#define AHBDBGINTSTS_AHPERR_SIZE	1
#define AHBDBGINTSTS_AHPERR_SHIFT	1
#define AHBDBGINTSTS_AHPERR_MASK	0x00000002
#define AHBDBGINTSTS_GET_AHPERR(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_AHPERR_MASK) >> AHBDBGINTSTS_AHPERR_SHIFT)
#define AHBDBGINTSTS_SET_AHPERR(AHBDBGINTSTS, AHPERR) { \
	FDL_ASSERT(!((AHPERR) & ~((1 << AHBDBGINTSTS_AHPERR_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_AHPERR_MASK) | (((unsigned long)(AHPERR)) << AHBDBGINTSTS_AHPERR_SHIFT);\
}
#define AHBDBGINTSTS_ACRPROT_SIZE	1
#define AHBDBGINTSTS_ACRPROT_SHIFT	2
#define AHBDBGINTSTS_ACRPROT_MASK	0x00000004
#define AHBDBGINTSTS_GET_ACRPROT(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_ACRPROT_MASK) >> AHBDBGINTSTS_ACRPROT_SHIFT)
#define AHBDBGINTSTS_SET_ACRPROT(AHBDBGINTSTS, ACRPROT) { \
	FDL_ASSERT(!((ACRPROT) & ~((1 << AHBDBGINTSTS_ACRPROT_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_ACRPROT_MASK) | (((unsigned long)(ACRPROT)) << AHBDBGINTSTS_ACRPROT_SHIFT);\
}
#define AHBDBGINTSTS_AHMPROT_SIZE	1
#define AHBDBGINTSTS_AHMPROT_SHIFT	3
#define AHBDBGINTSTS_AHMPROT_MASK	0x00000008
#define AHBDBGINTSTS_GET_AHMPROT(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_AHMPROT_MASK) >> AHBDBGINTSTS_AHMPROT_SHIFT)
#define AHBDBGINTSTS_SET_AHMPROT(AHBDBGINTSTS, AHMPROT) { \
	FDL_ASSERT(!((AHMPROT) & ~((1 << AHBDBGINTSTS_AHMPROT_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_AHMPROT_MASK) | (((unsigned long)(AHMPROT)) << AHBDBGINTSTS_AHMPROT_SHIFT);\
}
#define AHBDBGINTSTS_SRNPROT_SIZE	1
#define AHBDBGINTSTS_SRNPROT_SHIFT	4
#define AHBDBGINTSTS_SRNPROT_MASK	0x00000010
#define AHBDBGINTSTS_GET_SRNPROT(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_SRNPROT_MASK) >> AHBDBGINTSTS_SRNPROT_SHIFT)
#define AHBDBGINTSTS_SET_SRNPROT(AHBDBGINTSTS, SRNPROT) { \
	FDL_ASSERT(!((SRNPROT) & ~((1 << AHBDBGINTSTS_SRNPROT_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_SRNPROT_MASK) | (((unsigned long)(SRNPROT)) << AHBDBGINTSTS_SRNPROT_SHIFT);\
}
#define AHBDBGINTSTS_MEMPROT_SIZE	1
#define AHBDBGINTSTS_MEMPROT_SHIFT	5
#define AHBDBGINTSTS_MEMPROT_MASK	0x00000020
#define AHBDBGINTSTS_GET_MEMPROT(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_MEMPROT_MASK) >> AHBDBGINTSTS_MEMPROT_SHIFT)
#define AHBDBGINTSTS_SET_MEMPROT(AHBDBGINTSTS, MEMPROT) { \
	FDL_ASSERT(!((MEMPROT) & ~((1 << AHBDBGINTSTS_MEMPROT_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_MEMPROT_MASK) | (((unsigned long)(MEMPROT)) << AHBDBGINTSTS_MEMPROT_SHIFT);\
}
#define AHBDBGINTSTS_CPUARBPROT_SIZE	1
#define AHBDBGINTSTS_CPUARBPROT_SHIFT	6
#define AHBDBGINTSTS_CPUARBPROT_MASK	0x00000040
#define AHBDBGINTSTS_GET_CPUARBPROT(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_CPUARBPROT_MASK) >> AHBDBGINTSTS_CPUARBPROT_SHIFT)
#define AHBDBGINTSTS_SET_CPUARBPROT(AHBDBGINTSTS, CPUARBPROT) { \
	FDL_ASSERT(!((CPUARBPROT) & ~((1 << AHBDBGINTSTS_CPUARBPROT_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_CPUARBPROT_MASK) | (((unsigned long)(CPUARBPROT)) << AHBDBGINTSTS_CPUARBPROT_SHIFT);\
}
#define AHBDBGINTSTS_WDGERR_SIZE	1
#define AHBDBGINTSTS_WDGERR_SHIFT	7
#define AHBDBGINTSTS_WDGERR_MASK	0x00000080
#define AHBDBGINTSTS_GET_WDGERR(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_WDGERR_MASK) >> AHBDBGINTSTS_WDGERR_SHIFT)
#define AHBDBGINTSTS_SET_WDGERR(AHBDBGINTSTS, WDGERR) { \
	FDL_ASSERT(!((WDGERR) & ~((1 << AHBDBGINTSTS_WDGERR_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_WDGERR_MASK) | (((unsigned long)(WDGERR)) << AHBDBGINTSTS_WDGERR_SHIFT);\
}
#define AHBDBGINTSTS_DMAADR_SIZE	1
#define AHBDBGINTSTS_DMAADR_SHIFT	8
#define AHBDBGINTSTS_DMAADR_MASK	0x00000100
#define AHBDBGINTSTS_GET_DMAADR(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_DMAADR_MASK) >> AHBDBGINTSTS_DMAADR_SHIFT)
#define AHBDBGINTSTS_SET_DMAADR(AHBDBGINTSTS, DMAADR) { \
	FDL_ASSERT(!((DMAADR) & ~((1 << AHBDBGINTSTS_DMAADR_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_DMAADR_MASK) | (((unsigned long)(DMAADR)) << AHBDBGINTSTS_DMAADR_SHIFT);\
}
#define AHBDBGINTSTS_CPUADR_SIZE	1
#define AHBDBGINTSTS_CPUADR_SHIFT	9
#define AHBDBGINTSTS_CPUADR_MASK	0x00000200
#define AHBDBGINTSTS_GET_CPUADR(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_CPUADR_MASK) >> AHBDBGINTSTS_CPUADR_SHIFT)
#define AHBDBGINTSTS_SET_CPUADR(AHBDBGINTSTS, CPUADR) { \
	FDL_ASSERT(!((CPUADR) & ~((1 << AHBDBGINTSTS_CPUADR_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_CPUADR_MASK) | (((unsigned long)(CPUADR)) << AHBDBGINTSTS_CPUADR_SHIFT);\
}
#define AHBDBGINTSTS_ARBPCNTOVL_SIZE	1
#define AHBDBGINTSTS_ARBPCNTOVL_SHIFT	10
#define AHBDBGINTSTS_ARBPCNTOVL_MASK	0x00000400
#define AHBDBGINTSTS_GET_ARBPCNTOVL(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_ARBPCNTOVL_MASK) >> AHBDBGINTSTS_ARBPCNTOVL_SHIFT)
#define AHBDBGINTSTS_SET_ARBPCNTOVL(AHBDBGINTSTS, ARBPCNTOVL) { \
	FDL_ASSERT(!((ARBPCNTOVL) & ~((1 << AHBDBGINTSTS_ARBPCNTOVL_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_ARBPCNTOVL_MASK) | (((unsigned long)(ARBPCNTOVL)) << AHBDBGINTSTS_ARBPCNTOVL_SHIFT);\
}
#define AHBDBGINTSTS_ELAINT_SIZE	1
#define AHBDBGINTSTS_ELAINT_SHIFT	11
#define AHBDBGINTSTS_ELAINT_MASK	0x00000800
#define AHBDBGINTSTS_GET_ELAINT(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_ELAINT_MASK) >> AHBDBGINTSTS_ELAINT_SHIFT)
#define AHBDBGINTSTS_SET_ELAINT(AHBDBGINTSTS, ELAINT) { \
	FDL_ASSERT(!((ELAINT) & ~((1 << AHBDBGINTSTS_ELAINT_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_ELAINT_MASK) | (((unsigned long)(ELAINT)) << AHBDBGINTSTS_ELAINT_SHIFT);\
}
#define AHBDBGINTSTS_PAD0_SIZE	20
#define AHBDBGINTSTS_PAD0_SHIFT	12
#define AHBDBGINTSTS_PAD0_MASK	0xfffff000
#define AHBDBGINTSTS_GET_PAD0(AHBDBGINTSTS) \
	((((unsigned long)(AHBDBGINTSTS)) & AHBDBGINTSTS_PAD0_MASK) >> AHBDBGINTSTS_PAD0_SHIFT)
#define AHBDBGINTSTS_SET_PAD0(AHBDBGINTSTS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHBDBGINTSTS_PAD0_SIZE)-1))); \
	AHBDBGINTSTS = (((unsigned long)(AHBDBGINTSTS)) & ~AHBDBGINTSTS_PAD0_MASK) | (((unsigned long)(pad0)) << AHBDBGINTSTS_PAD0_SHIFT);\
}
#define AHBDBGINTSTS_TOTAL_SIZE	32
#define AHBDBGINTSTS(ERRINT, AHPERR, ACRPROT, AHMPROT, SRNPROT, MEMPROT, CPUARBPROT, WDGERR, DMAADR, CPUADR, ARBPCNTOVL, ELAINT) \
	((((unsigned long)(ERRINT)) << AHBDBGINTSTS_ERRINT_SHIFT) | \
	 (((unsigned long)(AHPERR)) << AHBDBGINTSTS_AHPERR_SHIFT) | \
	 (((unsigned long)(ACRPROT)) << AHBDBGINTSTS_ACRPROT_SHIFT) | \
	 (((unsigned long)(AHMPROT)) << AHBDBGINTSTS_AHMPROT_SHIFT) | \
	 (((unsigned long)(SRNPROT)) << AHBDBGINTSTS_SRNPROT_SHIFT) | \
	 (((unsigned long)(MEMPROT)) << AHBDBGINTSTS_MEMPROT_SHIFT) | \
	 (((unsigned long)(CPUARBPROT)) << AHBDBGINTSTS_CPUARBPROT_SHIFT) | \
	 (((unsigned long)(WDGERR)) << AHBDBGINTSTS_WDGERR_SHIFT) | \
	 (((unsigned long)(DMAADR)) << AHBDBGINTSTS_DMAADR_SHIFT) | \
	 (((unsigned long)(CPUADR)) << AHBDBGINTSTS_CPUADR_SHIFT) | \
	 (((unsigned long)(ARBPCNTOVL)) << AHBDBGINTSTS_ARBPCNTOVL_SHIFT) | \
	 (((unsigned long)(ELAINT)) << AHBDBGINTSTS_ELAINT_SHIFT))

/*
 *  ACRDMAADRINTSTS struct
 */
#define ACRDMAADRINTSTS_STS_SIZE	1
#define ACRDMAADRINTSTS_STS_SHIFT	0
#define ACRDMAADRINTSTS_STS_MASK	0x00000001
#define ACRDMAADRINTSTS_GET_STS(ACRDMAADRINTSTS) \
	((((unsigned long)(ACRDMAADRINTSTS)) & ACRDMAADRINTSTS_STS_MASK) >> ACRDMAADRINTSTS_STS_SHIFT)
#define ACRDMAADRINTSTS_SET_STS(ACRDMAADRINTSTS, STS) { \
	FDL_ASSERT(!((STS) & ~((1 << ACRDMAADRINTSTS_STS_SIZE)-1))); \
	ACRDMAADRINTSTS = (((unsigned long)(ACRDMAADRINTSTS)) & ~ACRDMAADRINTSTS_STS_MASK) | (((unsigned long)(STS)) << ACRDMAADRINTSTS_STS_SHIFT);\
}
#define ACRDMAADRINTSTS_HMASTER_SIZE	4
#define ACRDMAADRINTSTS_HMASTER_SHIFT	1
#define ACRDMAADRINTSTS_HMASTER_MASK	0x0000001e
#define ACRDMAADRINTSTS_GET_HMASTER(ACRDMAADRINTSTS) \
	((((unsigned long)(ACRDMAADRINTSTS)) & ACRDMAADRINTSTS_HMASTER_MASK) >> ACRDMAADRINTSTS_HMASTER_SHIFT)
#define ACRDMAADRINTSTS_SET_HMASTER(ACRDMAADRINTSTS, HMASTER) { \
	FDL_ASSERT(!((HMASTER) & ~((1 << ACRDMAADRINTSTS_HMASTER_SIZE)-1))); \
	ACRDMAADRINTSTS = (((unsigned long)(ACRDMAADRINTSTS)) & ~ACRDMAADRINTSTS_HMASTER_MASK) | (((unsigned long)(HMASTER)) << ACRDMAADRINTSTS_HMASTER_SHIFT);\
}
#define ACRDMAADRINTSTS_HWRITE_SIZE	1
#define ACRDMAADRINTSTS_HWRITE_SHIFT	5
#define ACRDMAADRINTSTS_HWRITE_MASK	0x00000020
#define ACRDMAADRINTSTS_GET_HWRITE(ACRDMAADRINTSTS) \
	((((unsigned long)(ACRDMAADRINTSTS)) & ACRDMAADRINTSTS_HWRITE_MASK) >> ACRDMAADRINTSTS_HWRITE_SHIFT)
#define ACRDMAADRINTSTS_SET_HWRITE(ACRDMAADRINTSTS, HWRITE) { \
	FDL_ASSERT(!((HWRITE) & ~((1 << ACRDMAADRINTSTS_HWRITE_SIZE)-1))); \
	ACRDMAADRINTSTS = (((unsigned long)(ACRDMAADRINTSTS)) & ~ACRDMAADRINTSTS_HWRITE_MASK) | (((unsigned long)(HWRITE)) << ACRDMAADRINTSTS_HWRITE_SHIFT);\
}
#define ACRDMAADRINTSTS_HADDR_SIZE	26
#define ACRDMAADRINTSTS_HADDR_SHIFT	6
#define ACRDMAADRINTSTS_HADDR_MASK	0xffffffc0
#define ACRDMAADRINTSTS_GET_HADDR(ACRDMAADRINTSTS) \
	((((unsigned long)(ACRDMAADRINTSTS)) & ACRDMAADRINTSTS_HADDR_MASK) >> ACRDMAADRINTSTS_HADDR_SHIFT)
#define ACRDMAADRINTSTS_SET_HADDR(ACRDMAADRINTSTS, HADDR) { \
	FDL_ASSERT(!((HADDR) & ~((1 << ACRDMAADRINTSTS_HADDR_SIZE)-1))); \
	ACRDMAADRINTSTS = (((unsigned long)(ACRDMAADRINTSTS)) & ~ACRDMAADRINTSTS_HADDR_MASK) | (((unsigned long)(HADDR)) << ACRDMAADRINTSTS_HADDR_SHIFT);\
}
#define ACRDMAADRINTSTS_TOTAL_SIZE	32
#define ACRDMAADRINTSTS(STS, HMASTER, HWRITE, HADDR) \
	((((unsigned long)(STS)) << ACRDMAADRINTSTS_STS_SHIFT) | \
	 (((unsigned long)(HMASTER)) << ACRDMAADRINTSTS_HMASTER_SHIFT) | \
	 (((unsigned long)(HWRITE)) << ACRDMAADRINTSTS_HWRITE_SHIFT) | \
	 (((unsigned long)(HADDR)) << ACRDMAADRINTSTS_HADDR_SHIFT))

/*
 *  ACRCPUADRINTSTS struct
 */
#define ACRCPUADRINTSTS_STS_SIZE	1
#define ACRCPUADRINTSTS_STS_SHIFT	0
#define ACRCPUADRINTSTS_STS_MASK	0x00000001
#define ACRCPUADRINTSTS_GET_STS(ACRCPUADRINTSTS) \
	((((unsigned long)(ACRCPUADRINTSTS)) & ACRCPUADRINTSTS_STS_MASK) >> ACRCPUADRINTSTS_STS_SHIFT)
#define ACRCPUADRINTSTS_SET_STS(ACRCPUADRINTSTS, STS) { \
	FDL_ASSERT(!((STS) & ~((1 << ACRCPUADRINTSTS_STS_SIZE)-1))); \
	ACRCPUADRINTSTS = (((unsigned long)(ACRCPUADRINTSTS)) & ~ACRCPUADRINTSTS_STS_MASK) | (((unsigned long)(STS)) << ACRCPUADRINTSTS_STS_SHIFT);\
}
#define ACRCPUADRINTSTS_HMASTER_SIZE	4
#define ACRCPUADRINTSTS_HMASTER_SHIFT	1
#define ACRCPUADRINTSTS_HMASTER_MASK	0x0000001e
#define ACRCPUADRINTSTS_GET_HMASTER(ACRCPUADRINTSTS) \
	((((unsigned long)(ACRCPUADRINTSTS)) & ACRCPUADRINTSTS_HMASTER_MASK) >> ACRCPUADRINTSTS_HMASTER_SHIFT)
#define ACRCPUADRINTSTS_SET_HMASTER(ACRCPUADRINTSTS, HMASTER) { \
	FDL_ASSERT(!((HMASTER) & ~((1 << ACRCPUADRINTSTS_HMASTER_SIZE)-1))); \
	ACRCPUADRINTSTS = (((unsigned long)(ACRCPUADRINTSTS)) & ~ACRCPUADRINTSTS_HMASTER_MASK) | (((unsigned long)(HMASTER)) << ACRCPUADRINTSTS_HMASTER_SHIFT);\
}
#define ACRCPUADRINTSTS_HWRITE_SIZE	1
#define ACRCPUADRINTSTS_HWRITE_SHIFT	5
#define ACRCPUADRINTSTS_HWRITE_MASK	0x00000020
#define ACRCPUADRINTSTS_GET_HWRITE(ACRCPUADRINTSTS) \
	((((unsigned long)(ACRCPUADRINTSTS)) & ACRCPUADRINTSTS_HWRITE_MASK) >> ACRCPUADRINTSTS_HWRITE_SHIFT)
#define ACRCPUADRINTSTS_SET_HWRITE(ACRCPUADRINTSTS, HWRITE) { \
	FDL_ASSERT(!((HWRITE) & ~((1 << ACRCPUADRINTSTS_HWRITE_SIZE)-1))); \
	ACRCPUADRINTSTS = (((unsigned long)(ACRCPUADRINTSTS)) & ~ACRCPUADRINTSTS_HWRITE_MASK) | (((unsigned long)(HWRITE)) << ACRCPUADRINTSTS_HWRITE_SHIFT);\
}
#define ACRCPUADRINTSTS_HADDR_SIZE	26
#define ACRCPUADRINTSTS_HADDR_SHIFT	6
#define ACRCPUADRINTSTS_HADDR_MASK	0xffffffc0
#define ACRCPUADRINTSTS_GET_HADDR(ACRCPUADRINTSTS) \
	((((unsigned long)(ACRCPUADRINTSTS)) & ACRCPUADRINTSTS_HADDR_MASK) >> ACRCPUADRINTSTS_HADDR_SHIFT)
#define ACRCPUADRINTSTS_SET_HADDR(ACRCPUADRINTSTS, HADDR) { \
	FDL_ASSERT(!((HADDR) & ~((1 << ACRCPUADRINTSTS_HADDR_SIZE)-1))); \
	ACRCPUADRINTSTS = (((unsigned long)(ACRCPUADRINTSTS)) & ~ACRCPUADRINTSTS_HADDR_MASK) | (((unsigned long)(HADDR)) << ACRCPUADRINTSTS_HADDR_SHIFT);\
}
#define ACRCPUADRINTSTS_TOTAL_SIZE	32
#define ACRCPUADRINTSTS(STS, HMASTER, HWRITE, HADDR) \
	((((unsigned long)(STS)) << ACRCPUADRINTSTS_STS_SHIFT) | \
	 (((unsigned long)(HMASTER)) << ACRCPUADRINTSTS_HMASTER_SHIFT) | \
	 (((unsigned long)(HWRITE)) << ACRCPUADRINTSTS_HWRITE_SHIFT) | \
	 (((unsigned long)(HADDR)) << ACRCPUADRINTSTS_HADDR_SHIFT))

/*
 *  ACRSYSCTRL struct
 */
#define ACRSYSCTRL_USE_FXCLK_SIZE	1
#define ACRSYSCTRL_USE_FXCLK_SHIFT	0
#define ACRSYSCTRL_USE_FXCLK_MASK	0x00000001
#define ACRSYSCTRL_GET_USE_FXCLK(ACRSYSCTRL) \
	((((unsigned long)(ACRSYSCTRL)) & ACRSYSCTRL_USE_FXCLK_MASK) >> ACRSYSCTRL_USE_FXCLK_SHIFT)
#define ACRSYSCTRL_SET_USE_FXCLK(ACRSYSCTRL, USE_FXCLK) { \
	FDL_ASSERT(!((USE_FXCLK) & ~((1 << ACRSYSCTRL_USE_FXCLK_SIZE)-1))); \
	ACRSYSCTRL = (((unsigned long)(ACRSYSCTRL)) & ~ACRSYSCTRL_USE_FXCLK_MASK) | (((unsigned long)(USE_FXCLK)) << ACRSYSCTRL_USE_FXCLK_SHIFT);\
}
#define ACRSYSCTRL_SYSPLL_CMPTBL_SIZE	1
#define ACRSYSCTRL_SYSPLL_CMPTBL_SHIFT	1
#define ACRSYSCTRL_SYSPLL_CMPTBL_MASK	0x00000002
#define ACRSYSCTRL_GET_SYSPLL_CMPTBL(ACRSYSCTRL) \
	((((unsigned long)(ACRSYSCTRL)) & ACRSYSCTRL_SYSPLL_CMPTBL_MASK) >> ACRSYSCTRL_SYSPLL_CMPTBL_SHIFT)
#define ACRSYSCTRL_SET_SYSPLL_CMPTBL(ACRSYSCTRL, SYSPLL_CMPTBL) { \
	FDL_ASSERT(!((SYSPLL_CMPTBL) & ~((1 << ACRSYSCTRL_SYSPLL_CMPTBL_SIZE)-1))); \
	ACRSYSCTRL = (((unsigned long)(ACRSYSCTRL)) & ~ACRSYSCTRL_SYSPLL_CMPTBL_MASK) | (((unsigned long)(SYSPLL_CMPTBL)) << ACRSYSCTRL_SYSPLL_CMPTBL_SHIFT);\
}
#define ACRSYSCTRL_PAD0_SIZE	30
#define ACRSYSCTRL_PAD0_SHIFT	2
#define ACRSYSCTRL_PAD0_MASK	0xfffffffc
#define ACRSYSCTRL_GET_PAD0(ACRSYSCTRL) \
	((((unsigned long)(ACRSYSCTRL)) & ACRSYSCTRL_PAD0_MASK) >> ACRSYSCTRL_PAD0_SHIFT)
#define ACRSYSCTRL_SET_PAD0(ACRSYSCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRSYSCTRL_PAD0_SIZE)-1))); \
	ACRSYSCTRL = (((unsigned long)(ACRSYSCTRL)) & ~ACRSYSCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSYSCTRL_PAD0_SHIFT);\
}
#define ACRSYSCTRL_TOTAL_SIZE	32
#define ACRSYSCTRL(USE_FXCLK, SYSPLL_CMPTBL) \
	((((unsigned long)(USE_FXCLK)) << ACRSYSCTRL_USE_FXCLK_SHIFT) | \
	 (((unsigned long)(SYSPLL_CMPTBL)) << ACRSYSCTRL_SYSPLL_CMPTBL_SHIFT))

/*
 *  ACRRSTCTRL struct
 */
#define ACRRSTCTRL_RSTINB_SIZE	1
#define ACRRSTCTRL_RSTINB_SHIFT	0
#define ACRRSTCTRL_RSTINB_MASK	0x00000001
#define ACRRSTCTRL_GET_RSTINB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTINB_MASK) >> ACRRSTCTRL_RSTINB_SHIFT)
#define ACRRSTCTRL_SET_RSTINB(ACRRSTCTRL, RSTINB) { \
	FDL_ASSERT(!((RSTINB) & ~((1 << ACRRSTCTRL_RSTINB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTINB_MASK) | (((unsigned long)(RSTINB)) << ACRRSTCTRL_RSTINB_SHIFT);\
}
#define ACRRSTCTRL_CRSTB_SIZE	1
#define ACRRSTCTRL_CRSTB_SHIFT	1
#define ACRRSTCTRL_CRSTB_MASK	0x00000002
#define ACRRSTCTRL_GET_CRSTB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_CRSTB_MASK) >> ACRRSTCTRL_CRSTB_SHIFT)
#define ACRRSTCTRL_SET_CRSTB(ACRRSTCTRL, CRSTB) { \
	FDL_ASSERT(!((CRSTB) & ~((1 << ACRRSTCTRL_CRSTB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_CRSTB_MASK) | (((unsigned long)(CRSTB)) << ACRRSTCTRL_CRSTB_SHIFT);\
}
#define ACRRSTCTRL_RSTB_SIZE	1
#define ACRRSTCTRL_RSTB_SHIFT	2
#define ACRRSTCTRL_RSTB_MASK	0x00000004
#define ACRRSTCTRL_GET_RSTB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_MASK) >> ACRRSTCTRL_RSTB_SHIFT)
#define ACRRSTCTRL_SET_RSTB(ACRRSTCTRL, RSTB) { \
	FDL_ASSERT(!((RSTB) & ~((1 << ACRRSTCTRL_RSTB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_MASK) | (((unsigned long)(RSTB)) << ACRRSTCTRL_RSTB_SHIFT);\
}
#define ACRRSTCTRL_RSTB_DSKPLL_SIZE	1
#define ACRRSTCTRL_RSTB_DSKPLL_SHIFT	3
#define ACRRSTCTRL_RSTB_DSKPLL_MASK	0x00000008
#define ACRRSTCTRL_GET_RSTB_DSKPLL(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_DSKPLL_MASK) >> ACRRSTCTRL_RSTB_DSKPLL_SHIFT)
#define ACRRSTCTRL_SET_RSTB_DSKPLL(ACRRSTCTRL, RSTB_DSKPLL) { \
	FDL_ASSERT(!((RSTB_DSKPLL) & ~((1 << ACRRSTCTRL_RSTB_DSKPLL_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_DSKPLL_MASK) | (((unsigned long)(RSTB_DSKPLL)) << ACRRSTCTRL_RSTB_DSKPLL_SHIFT);\
}
#define ACRRSTCTRL_CPURSTB_SIZE	1
#define ACRRSTCTRL_CPURSTB_SHIFT	4
#define ACRRSTCTRL_CPURSTB_MASK	0x00000010
#define ACRRSTCTRL_GET_CPURSTB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_CPURSTB_MASK) >> ACRRSTCTRL_CPURSTB_SHIFT)
#define ACRRSTCTRL_SET_CPURSTB(ACRRSTCTRL, CPURSTB) { \
	FDL_ASSERT(!((CPURSTB) & ~((1 << ACRRSTCTRL_CPURSTB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_CPURSTB_MASK) | (((unsigned long)(CPURSTB)) << ACRRSTCTRL_CPURSTB_SHIFT);\
}
#define ACRRSTCTRL_CPUSRSTB_SIZE	1
#define ACRRSTCTRL_CPUSRSTB_SHIFT	5
#define ACRRSTCTRL_CPUSRSTB_MASK	0x00000020
#define ACRRSTCTRL_GET_CPUSRSTB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_CPUSRSTB_MASK) >> ACRRSTCTRL_CPUSRSTB_SHIFT)
#define ACRRSTCTRL_SET_CPUSRSTB(ACRRSTCTRL, CPUSRSTB) { \
	FDL_ASSERT(!((CPUSRSTB) & ~((1 << ACRRSTCTRL_CPUSRSTB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_CPUSRSTB_MASK) | (((unsigned long)(CPUSRSTB)) << ACRRSTCTRL_CPUSRSTB_SHIFT);\
}
#define ACRRSTCTRL_RSTB_SYSPLL_SIZE	1
#define ACRRSTCTRL_RSTB_SYSPLL_SHIFT	6
#define ACRRSTCTRL_RSTB_SYSPLL_MASK	0x00000040
#define ACRRSTCTRL_GET_RSTB_SYSPLL(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_SYSPLL_MASK) >> ACRRSTCTRL_RSTB_SYSPLL_SHIFT)
#define ACRRSTCTRL_SET_RSTB_SYSPLL(ACRRSTCTRL, RSTB_SYSPLL) { \
	FDL_ASSERT(!((RSTB_SYSPLL) & ~((1 << ACRRSTCTRL_RSTB_SYSPLL_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_SYSPLL_MASK) | (((unsigned long)(RSTB_SYSPLL)) << ACRRSTCTRL_RSTB_SYSPLL_SHIFT);\
}
#define ACRRSTCTRL_NLCKB_SYSPLL_SIZE	1
#define ACRRSTCTRL_NLCKB_SYSPLL_SHIFT	7
#define ACRRSTCTRL_NLCKB_SYSPLL_MASK	0x00000080
#define ACRRSTCTRL_GET_NLCKB_SYSPLL(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_NLCKB_SYSPLL_MASK) >> ACRRSTCTRL_NLCKB_SYSPLL_SHIFT)
#define ACRRSTCTRL_SET_NLCKB_SYSPLL(ACRRSTCTRL, NLCKB_SYSPLL) { \
	FDL_ASSERT(!((NLCKB_SYSPLL) & ~((1 << ACRRSTCTRL_NLCKB_SYSPLL_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_NLCKB_SYSPLL_MASK) | (((unsigned long)(NLCKB_SYSPLL)) << ACRRSTCTRL_NLCKB_SYSPLL_SHIFT);\
}
#define ACRRSTCTRL_RSTB_MEMRSTB_SIZE	1
#define ACRRSTCTRL_RSTB_MEMRSTB_SHIFT	8
#define ACRRSTCTRL_RSTB_MEMRSTB_MASK	0x00000100
#define ACRRSTCTRL_GET_RSTB_MEMRSTB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_MEMRSTB_MASK) >> ACRRSTCTRL_RSTB_MEMRSTB_SHIFT)
#define ACRRSTCTRL_SET_RSTB_MEMRSTB(ACRRSTCTRL, RSTB_MEMRSTB) { \
	FDL_ASSERT(!((RSTB_MEMRSTB) & ~((1 << ACRRSTCTRL_RSTB_MEMRSTB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_MEMRSTB_MASK) | (((unsigned long)(RSTB_MEMRSTB)) << ACRRSTCTRL_RSTB_MEMRSTB_SHIFT);\
}
#define ACRRSTCTRL_RSTB_PI_SIZE	1
#define ACRRSTCTRL_RSTB_PI_SHIFT	9
#define ACRRSTCTRL_RSTB_PI_MASK	0x00000200
#define ACRRSTCTRL_GET_RSTB_PI(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_PI_MASK) >> ACRRSTCTRL_RSTB_PI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_PI(ACRRSTCTRL, RSTB_PI) { \
	FDL_ASSERT(!((RSTB_PI) & ~((1 << ACRRSTCTRL_RSTB_PI_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_PI_MASK) | (((unsigned long)(RSTB_PI)) << ACRRSTCTRL_RSTB_PI_SHIFT);\
}
#define ACRRSTCTRL_RSTB_DIRSTB_SIZE	1
#define ACRRSTCTRL_RSTB_DIRSTB_SHIFT	10
#define ACRRSTCTRL_RSTB_DIRSTB_MASK	0x00000400
#define ACRRSTCTRL_GET_RSTB_DIRSTB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_DIRSTB_MASK) >> ACRRSTCTRL_RSTB_DIRSTB_SHIFT)
#define ACRRSTCTRL_SET_RSTB_DIRSTB(ACRRSTCTRL, RSTB_DIRSTB) { \
	FDL_ASSERT(!((RSTB_DIRSTB) & ~((1 << ACRRSTCTRL_RSTB_DIRSTB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_DIRSTB_MASK) | (((unsigned long)(RSTB_DIRSTB)) << ACRRSTCTRL_RSTB_DIRSTB_SHIFT);\
}
#define ACRRSTCTRL_RSTB_MEM_SIZE	1
#define ACRRSTCTRL_RSTB_MEM_SHIFT	11
#define ACRRSTCTRL_RSTB_MEM_MASK	0x00000800
#define ACRRSTCTRL_GET_RSTB_MEM(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_MEM_MASK) >> ACRRSTCTRL_RSTB_MEM_SHIFT)
#define ACRRSTCTRL_SET_RSTB_MEM(ACRRSTCTRL, RSTB_MEM) { \
	FDL_ASSERT(!((RSTB_MEM) & ~((1 << ACRRSTCTRL_RSTB_MEM_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_MEM_MASK) | (((unsigned long)(RSTB_MEM)) << ACRRSTCTRL_RSTB_MEM_SHIFT);\
}
#define ACRRSTCTRL_RSTB_GFXTCPE_SIZE	1
#define ACRRSTCTRL_RSTB_GFXTCPE_SHIFT	12
#define ACRRSTCTRL_RSTB_GFXTCPE_MASK	0x00001000
#define ACRRSTCTRL_GET_RSTB_GFXTCPE(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_GFXTCPE_MASK) >> ACRRSTCTRL_RSTB_GFXTCPE_SHIFT)
#define ACRRSTCTRL_SET_RSTB_GFXTCPE(ACRRSTCTRL, RSTB_GFXTCPE) { \
	FDL_ASSERT(!((RSTB_GFXTCPE) & ~((1 << ACRRSTCTRL_RSTB_GFXTCPE_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_GFXTCPE_MASK) | (((unsigned long)(RSTB_GFXTCPE)) << ACRRSTCTRL_RSTB_GFXTCPE_SHIFT);\
}
#define ACRRSTCTRL_RSTB_GFX_SIZE	1
#define ACRRSTCTRL_RSTB_GFX_SHIFT	13
#define ACRRSTCTRL_RSTB_GFX_MASK	0x00002000
#define ACRRSTCTRL_GET_RSTB_GFX(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_GFX_MASK) >> ACRRSTCTRL_RSTB_GFX_SHIFT)
#define ACRRSTCTRL_SET_RSTB_GFX(ACRRSTCTRL, RSTB_GFX) { \
	FDL_ASSERT(!((RSTB_GFX) & ~((1 << ACRRSTCTRL_RSTB_GFX_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_GFX_MASK) | (((unsigned long)(RSTB_GFX)) << ACRRSTCTRL_RSTB_GFX_SHIFT);\
}
#define ACRRSTCTRL_RSTB_IOAI_SIZE	1
#define ACRRSTCTRL_RSTB_IOAI_SHIFT	14
#define ACRRSTCTRL_RSTB_IOAI_MASK	0x00004000
#define ACRRSTCTRL_GET_RSTB_IOAI(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IOAI_MASK) >> ACRRSTCTRL_RSTB_IOAI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IOAI(ACRRSTCTRL, RSTB_IOAI) { \
	FDL_ASSERT(!((RSTB_IOAI) & ~((1 << ACRRSTCTRL_RSTB_IOAI_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IOAI_MASK) | (((unsigned long)(RSTB_IOAI)) << ACRRSTCTRL_RSTB_IOAI_SHIFT);\
}
#define ACRRSTCTRL_RSTB_IOSI_SIZE	1
#define ACRRSTCTRL_RSTB_IOSI_SHIFT	15
#define ACRRSTCTRL_RSTB_IOSI_MASK	0x00008000
#define ACRRSTCTRL_GET_RSTB_IOSI(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IOSI_MASK) >> ACRRSTCTRL_RSTB_IOSI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IOSI(ACRRSTCTRL, RSTB_IOSI) { \
	FDL_ASSERT(!((RSTB_IOSI) & ~((1 << ACRRSTCTRL_RSTB_IOSI_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IOSI_MASK) | (((unsigned long)(RSTB_IOSI)) << ACRRSTCTRL_RSTB_IOSI_SHIFT);\
}
#define ACRRSTCTRL_RSTB_IOEXI_SIZE	1
#define ACRRSTCTRL_RSTB_IOEXI_SHIFT	16
#define ACRRSTCTRL_RSTB_IOEXI_MASK	0x00010000
#define ACRRSTCTRL_GET_RSTB_IOEXI(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IOEXI_MASK) >> ACRRSTCTRL_RSTB_IOEXI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IOEXI(ACRRSTCTRL, RSTB_IOEXI) { \
	FDL_ASSERT(!((RSTB_IOEXI) & ~((1 << ACRRSTCTRL_RSTB_IOEXI_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IOEXI_MASK) | (((unsigned long)(RSTB_IOEXI)) << ACRRSTCTRL_RSTB_IOEXI_SHIFT);\
}
#define ACRRSTCTRL_RSTB_IODI_SIZE	1
#define ACRRSTCTRL_RSTB_IODI_SHIFT	17
#define ACRRSTCTRL_RSTB_IODI_MASK	0x00020000
#define ACRRSTCTRL_GET_RSTB_IODI(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IODI_MASK) >> ACRRSTCTRL_RSTB_IODI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IODI(ACRRSTCTRL, RSTB_IODI) { \
	FDL_ASSERT(!((RSTB_IODI) & ~((1 << ACRRSTCTRL_RSTB_IODI_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IODI_MASK) | (((unsigned long)(RSTB_IODI)) << ACRRSTCTRL_RSTB_IODI_SHIFT);\
}
#define ACRRSTCTRL_RSTB_IOMEM_SIZE	1
#define ACRRSTCTRL_RSTB_IOMEM_SHIFT	18
#define ACRRSTCTRL_RSTB_IOMEM_MASK	0x00040000
#define ACRRSTCTRL_GET_RSTB_IOMEM(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IOMEM_MASK) >> ACRRSTCTRL_RSTB_IOMEM_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IOMEM(ACRRSTCTRL, RSTB_IOMEM) { \
	FDL_ASSERT(!((RSTB_IOMEM) & ~((1 << ACRRSTCTRL_RSTB_IOMEM_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IOMEM_MASK) | (((unsigned long)(RSTB_IOMEM)) << ACRRSTCTRL_RSTB_IOMEM_SHIFT);\
}
#define ACRRSTCTRL_RSTB_IOPI_SIZE	1
#define ACRRSTCTRL_RSTB_IOPI_SHIFT	19
#define ACRRSTCTRL_RSTB_IOPI_MASK	0x00080000
#define ACRRSTCTRL_GET_RSTB_IOPI(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IOPI_MASK) >> ACRRSTCTRL_RSTB_IOPI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IOPI(ACRRSTCTRL, RSTB_IOPI) { \
	FDL_ASSERT(!((RSTB_IOPI) & ~((1 << ACRRSTCTRL_RSTB_IOPI_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IOPI_MASK) | (((unsigned long)(RSTB_IOPI)) << ACRRSTCTRL_RSTB_IOPI_SHIFT);\
}
#define ACRRSTCTRL_RSTB_VI_SIZE	1
#define ACRRSTCTRL_RSTB_VI_SHIFT	20
#define ACRRSTCTRL_RSTB_VI_MASK	0x00100000
#define ACRRSTCTRL_GET_RSTB_VI(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_VI_MASK) >> ACRRSTCTRL_RSTB_VI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_VI(ACRRSTCTRL, RSTB_VI) { \
	FDL_ASSERT(!((RSTB_VI) & ~((1 << ACRRSTCTRL_RSTB_VI_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_VI_MASK) | (((unsigned long)(RSTB_VI)) << ACRRSTCTRL_RSTB_VI_SHIFT);\
}
#define ACRRSTCTRL_RSTB_VI1_SIZE	1
#define ACRRSTCTRL_RSTB_VI1_SHIFT	21
#define ACRRSTCTRL_RSTB_VI1_MASK	0x00200000
#define ACRRSTCTRL_GET_RSTB_VI1(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_VI1_MASK) >> ACRRSTCTRL_RSTB_VI1_SHIFT)
#define ACRRSTCTRL_SET_RSTB_VI1(ACRRSTCTRL, RSTB_VI1) { \
	FDL_ASSERT(!((RSTB_VI1) & ~((1 << ACRRSTCTRL_RSTB_VI1_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_VI1_MASK) | (((unsigned long)(RSTB_VI1)) << ACRRSTCTRL_RSTB_VI1_SHIFT);\
}
#define ACRRSTCTRL_RSTB_DSP_SIZE	1
#define ACRRSTCTRL_RSTB_DSP_SHIFT	22
#define ACRRSTCTRL_RSTB_DSP_MASK	0x00400000
#define ACRRSTCTRL_GET_RSTB_DSP(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_DSP_MASK) >> ACRRSTCTRL_RSTB_DSP_SHIFT)
#define ACRRSTCTRL_SET_RSTB_DSP(ACRRSTCTRL, RSTB_DSP) { \
	FDL_ASSERT(!((RSTB_DSP) & ~((1 << ACRRSTCTRL_RSTB_DSP_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_DSP_MASK) | (((unsigned long)(RSTB_DSP)) << ACRRSTCTRL_RSTB_DSP_SHIFT);\
}
#define ACRRSTCTRL_RSTB_IOP_SIZE	1
#define ACRRSTCTRL_RSTB_IOP_SHIFT	23
#define ACRRSTCTRL_RSTB_IOP_MASK	0x00800000
#define ACRRSTCTRL_GET_RSTB_IOP(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IOP_MASK) >> ACRRSTCTRL_RSTB_IOP_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IOP(ACRRSTCTRL, RSTB_IOP) { \
	FDL_ASSERT(!((RSTB_IOP) & ~((1 << ACRRSTCTRL_RSTB_IOP_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IOP_MASK) | (((unsigned long)(RSTB_IOP)) << ACRRSTCTRL_RSTB_IOP_SHIFT);\
}
#define ACRRSTCTRL_RSTB_AHB_SIZE	1
#define ACRRSTCTRL_RSTB_AHB_SHIFT	24
#define ACRRSTCTRL_RSTB_AHB_MASK	0x01000000
#define ACRRSTCTRL_GET_RSTB_AHB(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_AHB_MASK) >> ACRRSTCTRL_RSTB_AHB_SHIFT)
#define ACRRSTCTRL_SET_RSTB_AHB(ACRRSTCTRL, RSTB_AHB) { \
	FDL_ASSERT(!((RSTB_AHB) & ~((1 << ACRRSTCTRL_RSTB_AHB_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_AHB_MASK) | (((unsigned long)(RSTB_AHB)) << ACRRSTCTRL_RSTB_AHB_SHIFT);\
}
#define ACRRSTCTRL_RSTB_EDRAMS_SIZE	1
#define ACRRSTCTRL_RSTB_EDRAMS_SHIFT	25
#define ACRRSTCTRL_RSTB_EDRAMS_MASK	0x02000000
#define ACRRSTCTRL_GET_RSTB_EDRAMS(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_EDRAMS_MASK) >> ACRRSTCTRL_RSTB_EDRAMS_SHIFT)
#define ACRRSTCTRL_SET_RSTB_EDRAMS(ACRRSTCTRL, RSTB_EDRAMS) { \
	FDL_ASSERT(!((RSTB_EDRAMS) & ~((1 << ACRRSTCTRL_RSTB_EDRAMS_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_EDRAMS_MASK) | (((unsigned long)(RSTB_EDRAMS)) << ACRRSTCTRL_RSTB_EDRAMS_SHIFT);\
}
#define ACRRSTCTRL_NLCKB_EDRAMS_SIZE	1
#define ACRRSTCTRL_NLCKB_EDRAMS_SHIFT	26
#define ACRRSTCTRL_NLCKB_EDRAMS_MASK	0x04000000
#define ACRRSTCTRL_GET_NLCKB_EDRAMS(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_NLCKB_EDRAMS_MASK) >> ACRRSTCTRL_NLCKB_EDRAMS_SHIFT)
#define ACRRSTCTRL_SET_NLCKB_EDRAMS(ACRRSTCTRL, NLCKB_EDRAMS) { \
	FDL_ASSERT(!((NLCKB_EDRAMS) & ~((1 << ACRRSTCTRL_NLCKB_EDRAMS_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_NLCKB_EDRAMS_MASK) | (((unsigned long)(NLCKB_EDRAMS)) << ACRRSTCTRL_NLCKB_EDRAMS_SHIFT);\
}
#define ACRRSTCTRL_PAD0_SIZE	5
#define ACRRSTCTRL_PAD0_SHIFT	27
#define ACRRSTCTRL_PAD0_MASK	0xf8000000
#define ACRRSTCTRL_GET_PAD0(ACRRSTCTRL) \
	((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_PAD0_MASK) >> ACRRSTCTRL_PAD0_SHIFT)
#define ACRRSTCTRL_SET_PAD0(ACRRSTCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRRSTCTRL_PAD0_SIZE)-1))); \
	ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACRRSTCTRL_PAD0_SHIFT);\
}
#define ACRRSTCTRL_TOTAL_SIZE	32
#define ACRRSTCTRL(RSTINB, CRSTB, RSTB, RSTB_DSKPLL, CPURSTB, CPUSRSTB, RSTB_SYSPLL, NLCKB_SYSPLL, RSTB_MEMRSTB, RSTB_PI, RSTB_DIRSTB, RSTB_MEM, RSTB_GFXTCPE, RSTB_GFX, RSTB_IOAI, RSTB_IOSI, RSTB_IOEXI, RSTB_IODI, RSTB_IOMEM, RSTB_IOPI, RSTB_VI, RSTB_VI1, RSTB_DSP, RSTB_IOP, RSTB_AHB, RSTB_EDRAMS, NLCKB_EDRAMS) \
	((((unsigned long)(RSTINB)) << ACRRSTCTRL_RSTINB_SHIFT) | \
	 (((unsigned long)(CRSTB)) << ACRRSTCTRL_CRSTB_SHIFT) | \
	 (((unsigned long)(RSTB)) << ACRRSTCTRL_RSTB_SHIFT) | \
	 (((unsigned long)(RSTB_DSKPLL)) << ACRRSTCTRL_RSTB_DSKPLL_SHIFT) | \
	 (((unsigned long)(CPURSTB)) << ACRRSTCTRL_CPURSTB_SHIFT) | \
	 (((unsigned long)(CPUSRSTB)) << ACRRSTCTRL_CPUSRSTB_SHIFT) | \
	 (((unsigned long)(RSTB_SYSPLL)) << ACRRSTCTRL_RSTB_SYSPLL_SHIFT) | \
	 (((unsigned long)(NLCKB_SYSPLL)) << ACRRSTCTRL_NLCKB_SYSPLL_SHIFT) | \
	 (((unsigned long)(RSTB_MEMRSTB)) << ACRRSTCTRL_RSTB_MEMRSTB_SHIFT) | \
	 (((unsigned long)(RSTB_PI)) << ACRRSTCTRL_RSTB_PI_SHIFT) | \
	 (((unsigned long)(RSTB_DIRSTB)) << ACRRSTCTRL_RSTB_DIRSTB_SHIFT) | \
	 (((unsigned long)(RSTB_MEM)) << ACRRSTCTRL_RSTB_MEM_SHIFT) | \
	 (((unsigned long)(RSTB_GFXTCPE)) << ACRRSTCTRL_RSTB_GFXTCPE_SHIFT) | \
	 (((unsigned long)(RSTB_GFX)) << ACRRSTCTRL_RSTB_GFX_SHIFT) | \
	 (((unsigned long)(RSTB_IOAI)) << ACRRSTCTRL_RSTB_IOAI_SHIFT) | \
	 (((unsigned long)(RSTB_IOSI)) << ACRRSTCTRL_RSTB_IOSI_SHIFT) | \
	 (((unsigned long)(RSTB_IOEXI)) << ACRRSTCTRL_RSTB_IOEXI_SHIFT) | \
	 (((unsigned long)(RSTB_IODI)) << ACRRSTCTRL_RSTB_IODI_SHIFT) | \
	 (((unsigned long)(RSTB_IOMEM)) << ACRRSTCTRL_RSTB_IOMEM_SHIFT) | \
	 (((unsigned long)(RSTB_IOPI)) << ACRRSTCTRL_RSTB_IOPI_SHIFT) | \
	 (((unsigned long)(RSTB_VI)) << ACRRSTCTRL_RSTB_VI_SHIFT) | \
	 (((unsigned long)(RSTB_VI1)) << ACRRSTCTRL_RSTB_VI1_SHIFT) | \
	 (((unsigned long)(RSTB_DSP)) << ACRRSTCTRL_RSTB_DSP_SHIFT) | \
	 (((unsigned long)(RSTB_IOP)) << ACRRSTCTRL_RSTB_IOP_SHIFT) | \
	 (((unsigned long)(RSTB_AHB)) << ACRRSTCTRL_RSTB_AHB_SHIFT) | \
	 (((unsigned long)(RSTB_EDRAMS)) << ACRRSTCTRL_RSTB_EDRAMS_SHIFT) | \
	 (((unsigned long)(NLCKB_EDRAMS)) << ACRRSTCTRL_NLCKB_EDRAMS_SHIFT))

/*
 *  ACRCLKGATE struct
 */
#define ACRCLKGATE_GATE_MYCLK_SIZE	1
#define ACRCLKGATE_GATE_MYCLK_SHIFT	0
#define ACRCLKGATE_GATE_MYCLK_MASK	0x00000001
#define ACRCLKGATE_GET_GATE_MYCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_MYCLK_MASK) >> ACRCLKGATE_GATE_MYCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_MYCLK(ACRCLKGATE, GATE_MYCLK) { \
	FDL_ASSERT(!((GATE_MYCLK) & ~((1 << ACRCLKGATE_GATE_MYCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_MYCLK_MASK) | (((unsigned long)(GATE_MYCLK)) << ACRCLKGATE_GATE_MYCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_MSCLK_SIZE	1
#define ACRCLKGATE_GATE_MSCLK_SHIFT	1
#define ACRCLKGATE_GATE_MSCLK_MASK	0x00000002
#define ACRCLKGATE_GET_GATE_MSCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_MSCLK_MASK) >> ACRCLKGATE_GATE_MSCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_MSCLK(ACRCLKGATE, GATE_MSCLK) { \
	FDL_ASSERT(!((GATE_MSCLK) & ~((1 << ACRCLKGATE_GATE_MSCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_MSCLK_MASK) | (((unsigned long)(GATE_MSCLK)) << ACRCLKGATE_GATE_MSCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_CPUCLK_SIZE	1
#define ACRCLKGATE_GATE_CPUCLK_SHIFT	2
#define ACRCLKGATE_GATE_CPUCLK_MASK	0x00000004
#define ACRCLKGATE_GET_GATE_CPUCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CPUCLK_MASK) >> ACRCLKGATE_GATE_CPUCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_CPUCLK(ACRCLKGATE, GATE_CPUCLK) { \
	FDL_ASSERT(!((GATE_CPUCLK) & ~((1 << ACRCLKGATE_GATE_CPUCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CPUCLK_MASK) | (((unsigned long)(GATE_CPUCLK)) << ACRCLKGATE_GATE_CPUCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_FB_SIZE	1
#define ACRCLKGATE_GATE_CCLK_FB_SHIFT	3
#define ACRCLKGATE_GATE_CCLK_FB_MASK	0x00000008
#define ACRCLKGATE_GET_GATE_CCLK_FB(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_FB_MASK) >> ACRCLKGATE_GATE_CCLK_FB_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_FB(ACRCLKGATE, GATE_CCLK_FB) { \
	FDL_ASSERT(!((GATE_CCLK_FB) & ~((1 << ACRCLKGATE_GATE_CCLK_FB_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_FB_MASK) | (((unsigned long)(GATE_CCLK_FB)) << ACRCLKGATE_GATE_CCLK_FB_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_PI_SIZE	1
#define ACRCLKGATE_GATE_CCLK_PI_SHIFT	4
#define ACRCLKGATE_GATE_CCLK_PI_MASK	0x00000010
#define ACRCLKGATE_GET_GATE_CCLK_PI(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_PI_MASK) >> ACRCLKGATE_GATE_CCLK_PI_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_PI(ACRCLKGATE, GATE_CCLK_PI) { \
	FDL_ASSERT(!((GATE_CCLK_PI) & ~((1 << ACRCLKGATE_GATE_CCLK_PI_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_PI_MASK) | (((unsigned long)(GATE_CCLK_PI)) << ACRCLKGATE_GATE_CCLK_PI_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_MEM_SIZE	1
#define ACRCLKGATE_GATE_CCLK_MEM_SHIFT	5
#define ACRCLKGATE_GATE_CCLK_MEM_MASK	0x00000020
#define ACRCLKGATE_GET_GATE_CCLK_MEM(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_MEM_MASK) >> ACRCLKGATE_GATE_CCLK_MEM_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_MEM(ACRCLKGATE, GATE_CCLK_MEM) { \
	FDL_ASSERT(!((GATE_CCLK_MEM) & ~((1 << ACRCLKGATE_GATE_CCLK_MEM_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_MEM_MASK) | (((unsigned long)(GATE_CCLK_MEM)) << ACRCLKGATE_GATE_CCLK_MEM_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_IO_SIZE	1
#define ACRCLKGATE_GATE_CCLK_IO_SHIFT	6
#define ACRCLKGATE_GATE_CCLK_IO_MASK	0x00000040
#define ACRCLKGATE_GET_GATE_CCLK_IO(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_IO_MASK) >> ACRCLKGATE_GATE_CCLK_IO_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_IO(ACRCLKGATE, GATE_CCLK_IO) { \
	FDL_ASSERT(!((GATE_CCLK_IO) & ~((1 << ACRCLKGATE_GATE_CCLK_IO_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_IO_MASK) | (((unsigned long)(GATE_CCLK_IO)) << ACRCLKGATE_GATE_CCLK_IO_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_SD_SIZE	1
#define ACRCLKGATE_GATE_CCLK_SD_SHIFT	7
#define ACRCLKGATE_GATE_CCLK_SD_MASK	0x00000080
#define ACRCLKGATE_GET_GATE_CCLK_SD(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_SD_MASK) >> ACRCLKGATE_GATE_CCLK_SD_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_SD(ACRCLKGATE, GATE_CCLK_SD) { \
	FDL_ASSERT(!((GATE_CCLK_SD) & ~((1 << ACRCLKGATE_GATE_CCLK_SD_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_SD_MASK) | (((unsigned long)(GATE_CCLK_SD)) << ACRCLKGATE_GATE_CCLK_SD_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_USB_SIZE	1
#define ACRCLKGATE_GATE_CCLK_USB_SHIFT	8
#define ACRCLKGATE_GATE_CCLK_USB_MASK	0x00000100
#define ACRCLKGATE_GET_GATE_CCLK_USB(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_USB_MASK) >> ACRCLKGATE_GATE_CCLK_USB_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_USB(ACRCLKGATE, GATE_CCLK_USB) { \
	FDL_ASSERT(!((GATE_CCLK_USB) & ~((1 << ACRCLKGATE_GATE_CCLK_USB_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_USB_MASK) | (((unsigned long)(GATE_CCLK_USB)) << ACRCLKGATE_GATE_CCLK_USB_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_ELA_SIZE	1
#define ACRCLKGATE_GATE_CCLK_ELA_SHIFT	9
#define ACRCLKGATE_GATE_CCLK_ELA_MASK	0x00000200
#define ACRCLKGATE_GET_GATE_CCLK_ELA(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_ELA_MASK) >> ACRCLKGATE_GATE_CCLK_ELA_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_ELA(ACRCLKGATE, GATE_CCLK_ELA) { \
	FDL_ASSERT(!((GATE_CCLK_ELA) & ~((1 << ACRCLKGATE_GATE_CCLK_ELA_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_ELA_MASK) | (((unsigned long)(GATE_CCLK_ELA)) << ACRCLKGATE_GATE_CCLK_ELA_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_AHM_SIZE	1
#define ACRCLKGATE_GATE_CCLK_AHM_SHIFT	10
#define ACRCLKGATE_GATE_CCLK_AHM_MASK	0x00000400
#define ACRCLKGATE_GET_GATE_CCLK_AHM(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_AHM_MASK) >> ACRCLKGATE_GATE_CCLK_AHM_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_AHM(ACRCLKGATE, GATE_CCLK_AHM) { \
	FDL_ASSERT(!((GATE_CCLK_AHM) & ~((1 << ACRCLKGATE_GATE_CCLK_AHM_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_AHM_MASK) | (((unsigned long)(GATE_CCLK_AHM)) << ACRCLKGATE_GATE_CCLK_AHM_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_DSP_SIZE	1
#define ACRCLKGATE_GATE_CCLK_DSP_SHIFT	11
#define ACRCLKGATE_GATE_CCLK_DSP_MASK	0x00000800
#define ACRCLKGATE_GET_GATE_CCLK_DSP(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_DSP_MASK) >> ACRCLKGATE_GATE_CCLK_DSP_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_DSP(ACRCLKGATE, GATE_CCLK_DSP) { \
	FDL_ASSERT(!((GATE_CCLK_DSP) & ~((1 << ACRCLKGATE_GATE_CCLK_DSP_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_DSP_MASK) | (((unsigned long)(GATE_CCLK_DSP)) << ACRCLKGATE_GATE_CCLK_DSP_SHIFT);\
}
#define ACRCLKGATE_GATE_CCLK_VI_SIZE	1
#define ACRCLKGATE_GATE_CCLK_VI_SHIFT	12
#define ACRCLKGATE_GATE_CCLK_VI_MASK	0x00001000
#define ACRCLKGATE_GET_GATE_CCLK_VI(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_CCLK_VI_MASK) >> ACRCLKGATE_GATE_CCLK_VI_SHIFT)
#define ACRCLKGATE_SET_GATE_CCLK_VI(ACRCLKGATE, GATE_CCLK_VI) { \
	FDL_ASSERT(!((GATE_CCLK_VI) & ~((1 << ACRCLKGATE_GATE_CCLK_VI_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_CCLK_VI_MASK) | (((unsigned long)(GATE_CCLK_VI)) << ACRCLKGATE_GATE_CCLK_VI_SHIFT);\
}
#define ACRCLKGATE_GATE_DSPCLK_SIZE	1
#define ACRCLKGATE_GATE_DSPCLK_SHIFT	13
#define ACRCLKGATE_GATE_DSPCLK_MASK	0x00002000
#define ACRCLKGATE_GET_GATE_DSPCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_DSPCLK_MASK) >> ACRCLKGATE_GATE_DSPCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_DSPCLK(ACRCLKGATE, GATE_DSPCLK) { \
	FDL_ASSERT(!((GATE_DSPCLK) & ~((1 << ACRCLKGATE_GATE_DSPCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_DSPCLK_MASK) | (((unsigned long)(GATE_DSPCLK)) << ACRCLKGATE_GATE_DSPCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_VICLK_SIZE	1
#define ACRCLKGATE_GATE_VICLK_SHIFT	14
#define ACRCLKGATE_GATE_VICLK_MASK	0x00004000
#define ACRCLKGATE_GET_GATE_VICLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_VICLK_MASK) >> ACRCLKGATE_GATE_VICLK_SHIFT)
#define ACRCLKGATE_SET_GATE_VICLK(ACRCLKGATE, GATE_VICLK) { \
	FDL_ASSERT(!((GATE_VICLK) & ~((1 << ACRCLKGATE_GATE_VICLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_VICLK_MASK) | (((unsigned long)(GATE_VICLK)) << ACRCLKGATE_GATE_VICLK_SHIFT);\
}
#define ACRCLKGATE_GATE_VHCLK_SIZE	1
#define ACRCLKGATE_GATE_VHCLK_SHIFT	15
#define ACRCLKGATE_GATE_VHCLK_MASK	0x00008000
#define ACRCLKGATE_GET_GATE_VHCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_VHCLK_MASK) >> ACRCLKGATE_GATE_VHCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_VHCLK(ACRCLKGATE, GATE_VHCLK) { \
	FDL_ASSERT(!((GATE_VHCLK) & ~((1 << ACRCLKGATE_GATE_VHCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_VHCLK_MASK) | (((unsigned long)(GATE_VHCLK)) << ACRCLKGATE_GATE_VHCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_LCDCLK_SIZE	1
#define ACRCLKGATE_GATE_LCDCLK_SHIFT	16
#define ACRCLKGATE_GATE_LCDCLK_MASK	0x00010000
#define ACRCLKGATE_GET_GATE_LCDCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_LCDCLK_MASK) >> ACRCLKGATE_GATE_LCDCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_LCDCLK(ACRCLKGATE, GATE_LCDCLK) { \
	FDL_ASSERT(!((GATE_LCDCLK) & ~((1 << ACRCLKGATE_GATE_LCDCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_LCDCLK_MASK) | (((unsigned long)(GATE_LCDCLK)) << ACRCLKGATE_GATE_LCDCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_AICLK_SIZE	1
#define ACRCLKGATE_GATE_AICLK_SHIFT	17
#define ACRCLKGATE_GATE_AICLK_MASK	0x00020000
#define ACRCLKGATE_GET_GATE_AICLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_AICLK_MASK) >> ACRCLKGATE_GATE_AICLK_SHIFT)
#define ACRCLKGATE_SET_GATE_AICLK(ACRCLKGATE, GATE_AICLK) { \
	FDL_ASSERT(!((GATE_AICLK) & ~((1 << ACRCLKGATE_GATE_AICLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_AICLK_MASK) | (((unsigned long)(GATE_AICLK)) << ACRCLKGATE_GATE_AICLK_SHIFT);\
}
#define ACRCLKGATE_GATE_AHCLK_SIZE	1
#define ACRCLKGATE_GATE_AHCLK_SHIFT	18
#define ACRCLKGATE_GATE_AHCLK_MASK	0x00040000
#define ACRCLKGATE_GET_GATE_AHCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_AHCLK_MASK) >> ACRCLKGATE_GATE_AHCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_AHCLK(ACRCLKGATE, GATE_AHCLK) { \
	FDL_ASSERT(!((GATE_AHCLK) & ~((1 << ACRCLKGATE_GATE_AHCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_AHCLK_MASK) | (((unsigned long)(GATE_AHCLK)) << ACRCLKGATE_GATE_AHCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_AI256CLK_SIZE	1
#define ACRCLKGATE_GATE_AI256CLK_SHIFT	19
#define ACRCLKGATE_GATE_AI256CLK_MASK	0x00080000
#define ACRCLKGATE_GET_GATE_AI256CLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_AI256CLK_MASK) >> ACRCLKGATE_GATE_AI256CLK_SHIFT)
#define ACRCLKGATE_SET_GATE_AI256CLK(ACRCLKGATE, GATE_AI256CLK) { \
	FDL_ASSERT(!((GATE_AI256CLK) & ~((1 << ACRCLKGATE_GATE_AI256CLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_AI256CLK_MASK) | (((unsigned long)(GATE_AI256CLK)) << ACRCLKGATE_GATE_AI256CLK_SHIFT);\
}
#define ACRCLKGATE_GATE_USBCLK_SIZE	1
#define ACRCLKGATE_GATE_USBCLK_SHIFT	20
#define ACRCLKGATE_GATE_USBCLK_MASK	0x00100000
#define ACRCLKGATE_GET_GATE_USBCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_USBCLK_MASK) >> ACRCLKGATE_GATE_USBCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_USBCLK(ACRCLKGATE, GATE_USBCLK) { \
	FDL_ASSERT(!((GATE_USBCLK) & ~((1 << ACRCLKGATE_GATE_USBCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_USBCLK_MASK) | (((unsigned long)(GATE_USBCLK)) << ACRCLKGATE_GATE_USBCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_SDCLK_SIZE	1
#define ACRCLKGATE_GATE_SDCLK_SHIFT	21
#define ACRCLKGATE_GATE_SDCLK_MASK	0x00200000
#define ACRCLKGATE_GET_GATE_SDCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_SDCLK_MASK) >> ACRCLKGATE_GATE_SDCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_SDCLK(ACRCLKGATE, GATE_SDCLK) { \
	FDL_ASSERT(!((GATE_SDCLK) & ~((1 << ACRCLKGATE_GATE_SDCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_SDCLK_MASK) | (((unsigned long)(GATE_SDCLK)) << ACRCLKGATE_GATE_SDCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_GFXCLK_SIZE	1
#define ACRCLKGATE_GATE_GFXCLK_SHIFT	22
#define ACRCLKGATE_GATE_GFXCLK_MASK	0x00400000
#define ACRCLKGATE_GET_GATE_GFXCLK(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_GFXCLK_MASK) >> ACRCLKGATE_GATE_GFXCLK_SHIFT)
#define ACRCLKGATE_SET_GATE_GFXCLK(ACRCLKGATE, GATE_GFXCLK) { \
	FDL_ASSERT(!((GATE_GFXCLK) & ~((1 << ACRCLKGATE_GATE_GFXCLK_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_GFXCLK_MASK) | (((unsigned long)(GATE_GFXCLK)) << ACRCLKGATE_GATE_GFXCLK_SHIFT);\
}
#define ACRCLKGATE_GATE_EDRAMS_SIZE	1
#define ACRCLKGATE_GATE_EDRAMS_SHIFT	23
#define ACRCLKGATE_GATE_EDRAMS_MASK	0x00800000
#define ACRCLKGATE_GET_GATE_EDRAMS(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_GATE_EDRAMS_MASK) >> ACRCLKGATE_GATE_EDRAMS_SHIFT)
#define ACRCLKGATE_SET_GATE_EDRAMS(ACRCLKGATE, GATE_EDRAMS) { \
	FDL_ASSERT(!((GATE_EDRAMS) & ~((1 << ACRCLKGATE_GATE_EDRAMS_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_GATE_EDRAMS_MASK) | (((unsigned long)(GATE_EDRAMS)) << ACRCLKGATE_GATE_EDRAMS_SHIFT);\
}
#define ACRCLKGATE_PAD0_SIZE	8
#define ACRCLKGATE_PAD0_SHIFT	24
#define ACRCLKGATE_PAD0_MASK	0xff000000
#define ACRCLKGATE_GET_PAD0(ACRCLKGATE) \
	((((unsigned long)(ACRCLKGATE)) & ACRCLKGATE_PAD0_MASK) >> ACRCLKGATE_PAD0_SHIFT)
#define ACRCLKGATE_SET_PAD0(ACRCLKGATE, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRCLKGATE_PAD0_SIZE)-1))); \
	ACRCLKGATE = (((unsigned long)(ACRCLKGATE)) & ~ACRCLKGATE_PAD0_MASK) | (((unsigned long)(pad0)) << ACRCLKGATE_PAD0_SHIFT);\
}
#define ACRCLKGATE_TOTAL_SIZE	32
#define ACRCLKGATE(GATE_MYCLK, GATE_MSCLK, GATE_CPUCLK, GATE_CCLK_FB, GATE_CCLK_PI, GATE_CCLK_MEM, GATE_CCLK_IO, GATE_CCLK_SD, GATE_CCLK_USB, GATE_CCLK_ELA, GATE_CCLK_AHM, GATE_CCLK_DSP, GATE_CCLK_VI, GATE_DSPCLK, GATE_VICLK, GATE_VHCLK, GATE_LCDCLK, GATE_AICLK, GATE_AHCLK, GATE_AI256CLK, GATE_USBCLK, GATE_SDCLK, GATE_GFXCLK, GATE_EDRAMS) \
	((((unsigned long)(GATE_MYCLK)) << ACRCLKGATE_GATE_MYCLK_SHIFT) | \
	 (((unsigned long)(GATE_MSCLK)) << ACRCLKGATE_GATE_MSCLK_SHIFT) | \
	 (((unsigned long)(GATE_CPUCLK)) << ACRCLKGATE_GATE_CPUCLK_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_FB)) << ACRCLKGATE_GATE_CCLK_FB_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_PI)) << ACRCLKGATE_GATE_CCLK_PI_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_MEM)) << ACRCLKGATE_GATE_CCLK_MEM_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_IO)) << ACRCLKGATE_GATE_CCLK_IO_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_SD)) << ACRCLKGATE_GATE_CCLK_SD_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_USB)) << ACRCLKGATE_GATE_CCLK_USB_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_ELA)) << ACRCLKGATE_GATE_CCLK_ELA_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_AHM)) << ACRCLKGATE_GATE_CCLK_AHM_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_DSP)) << ACRCLKGATE_GATE_CCLK_DSP_SHIFT) | \
	 (((unsigned long)(GATE_CCLK_VI)) << ACRCLKGATE_GATE_CCLK_VI_SHIFT) | \
	 (((unsigned long)(GATE_DSPCLK)) << ACRCLKGATE_GATE_DSPCLK_SHIFT) | \
	 (((unsigned long)(GATE_VICLK)) << ACRCLKGATE_GATE_VICLK_SHIFT) | \
	 (((unsigned long)(GATE_VHCLK)) << ACRCLKGATE_GATE_VHCLK_SHIFT) | \
	 (((unsigned long)(GATE_LCDCLK)) << ACRCLKGATE_GATE_LCDCLK_SHIFT) | \
	 (((unsigned long)(GATE_AICLK)) << ACRCLKGATE_GATE_AICLK_SHIFT) | \
	 (((unsigned long)(GATE_AHCLK)) << ACRCLKGATE_GATE_AHCLK_SHIFT) | \
	 (((unsigned long)(GATE_AI256CLK)) << ACRCLKGATE_GATE_AI256CLK_SHIFT) | \
	 (((unsigned long)(GATE_USBCLK)) << ACRCLKGATE_GATE_USBCLK_SHIFT) | \
	 (((unsigned long)(GATE_SDCLK)) << ACRCLKGATE_GATE_SDCLK_SHIFT) | \
	 (((unsigned long)(GATE_GFXCLK)) << ACRCLKGATE_GATE_GFXCLK_SHIFT) | \
	 (((unsigned long)(GATE_EDRAMS)) << ACRCLKGATE_GATE_EDRAMS_SHIFT))

/*
 *  ACRPLLDR struct
 */
#define ACRPLLDR_PLLRSTPW_SIZE	16
#define ACRPLLDR_PLLRSTPW_SHIFT	0
#define ACRPLLDR_PLLRSTPW_MASK	0x0000ffff
#define ACRPLLDR_GET_PLLRSTPW(ACRPLLDR) \
	((((unsigned long)(ACRPLLDR)) & ACRPLLDR_PLLRSTPW_MASK) >> ACRPLLDR_PLLRSTPW_SHIFT)
#define ACRPLLDR_SET_PLLRSTPW(ACRPLLDR, PLLRSTPW) { \
	FDL_ASSERT(!((PLLRSTPW) & ~((1 << ACRPLLDR_PLLRSTPW_SIZE)-1))); \
	ACRPLLDR = (((unsigned long)(ACRPLLDR)) & ~ACRPLLDR_PLLRSTPW_MASK) | (((unsigned long)(PLLRSTPW)) << ACRPLLDR_PLLRSTPW_SHIFT);\
}
#define ACRPLLDR_PLLRSTLD_SIZE	16
#define ACRPLLDR_PLLRSTLD_SHIFT	16
#define ACRPLLDR_PLLRSTLD_MASK	0xffff0000
#define ACRPLLDR_GET_PLLRSTLD(ACRPLLDR) \
	((((unsigned long)(ACRPLLDR)) & ACRPLLDR_PLLRSTLD_MASK) >> ACRPLLDR_PLLRSTLD_SHIFT)
#define ACRPLLDR_SET_PLLRSTLD(ACRPLLDR, PLLRSTLD) { \
	FDL_ASSERT(!((PLLRSTLD) & ~((1 << ACRPLLDR_PLLRSTLD_SIZE)-1))); \
	ACRPLLDR = (((unsigned long)(ACRPLLDR)) & ~ACRPLLDR_PLLRSTLD_MASK) | (((unsigned long)(PLLRSTLD)) << ACRPLLDR_PLLRSTLD_SHIFT);\
}
#define ACRPLLDR_TOTAL_SIZE	32
#define ACRPLLDR(PLLRSTPW, PLLRSTLD) \
	((((unsigned long)(PLLRSTPW)) << ACRPLLDR_PLLRSTPW_SHIFT) | \
	 (((unsigned long)(PLLRSTLD)) << ACRPLLDR_PLLRSTLD_SHIFT))

/*
 *  ACRPLLSYS struct
 */
#define ACRPLLSYS_SYSPLL_CLKR_SIZE	6
#define ACRPLLSYS_SYSPLL_CLKR_SHIFT	0
#define ACRPLLSYS_SYSPLL_CLKR_MASK	0x0000003f
#define ACRPLLSYS_GET_SYSPLL_CLKR(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_CLKR_MASK) >> ACRPLLSYS_SYSPLL_CLKR_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_CLKR(ACRPLLSYS, SYSPLL_CLKR) { \
	FDL_ASSERT(!((SYSPLL_CLKR) & ~((1 << ACRPLLSYS_SYSPLL_CLKR_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_CLKR_MASK) | (((unsigned long)(SYSPLL_CLKR)) << ACRPLLSYS_SYSPLL_CLKR_SHIFT);\
}
#define ACRPLLSYS_SYSPLL_CLKF_SIZE	12
#define ACRPLLSYS_SYSPLL_CLKF_SHIFT	6
#define ACRPLLSYS_SYSPLL_CLKF_MASK	0x0003ffc0
#define ACRPLLSYS_GET_SYSPLL_CLKF(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_CLKF_MASK) >> ACRPLLSYS_SYSPLL_CLKF_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_CLKF(ACRPLLSYS, SYSPLL_CLKF) { \
	FDL_ASSERT(!((SYSPLL_CLKF) & ~((1 << ACRPLLSYS_SYSPLL_CLKF_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_CLKF_MASK) | (((unsigned long)(SYSPLL_CLKF)) << ACRPLLSYS_SYSPLL_CLKF_SHIFT);\
}
#define ACRPLLSYS_SYSPLL_CLKO_0_SIZE	9
#define ACRPLLSYS_SYSPLL_CLKO_0_SHIFT	18
#define ACRPLLSYS_SYSPLL_CLKO_0_MASK	0x07fc0000
#define ACRPLLSYS_GET_SYSPLL_CLKO_0(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_CLKO_0_MASK) >> ACRPLLSYS_SYSPLL_CLKO_0_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_CLKO_0(ACRPLLSYS, SYSPLL_CLKO_0) { \
	FDL_ASSERT(!((SYSPLL_CLKO_0) & ~((1 << ACRPLLSYS_SYSPLL_CLKO_0_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_CLKO_0_MASK) | (((unsigned long)(SYSPLL_CLKO_0)) << ACRPLLSYS_SYSPLL_CLKO_0_SHIFT);\
}
#define ACRPLLSYS_SYSPLL_BYPVCO_SIZE	1
#define ACRPLLSYS_SYSPLL_BYPVCO_SHIFT	27
#define ACRPLLSYS_SYSPLL_BYPVCO_MASK	0x08000000
#define ACRPLLSYS_GET_SYSPLL_BYPVCO(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_BYPVCO_MASK) >> ACRPLLSYS_SYSPLL_BYPVCO_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_BYPVCO(ACRPLLSYS, SYSPLL_BYPVCO) { \
	FDL_ASSERT(!((SYSPLL_BYPVCO) & ~((1 << ACRPLLSYS_SYSPLL_BYPVCO_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_BYPVCO_MASK) | (((unsigned long)(SYSPLL_BYPVCO)) << ACRPLLSYS_SYSPLL_BYPVCO_SHIFT);\
}
#define ACRPLLSYS_SYSPLL_BYPOUT_SIZE	1
#define ACRPLLSYS_SYSPLL_BYPOUT_SHIFT	28
#define ACRPLLSYS_SYSPLL_BYPOUT_MASK	0x10000000
#define ACRPLLSYS_GET_SYSPLL_BYPOUT(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_BYPOUT_MASK) >> ACRPLLSYS_SYSPLL_BYPOUT_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_BYPOUT(ACRPLLSYS, SYSPLL_BYPOUT) { \
	FDL_ASSERT(!((SYSPLL_BYPOUT) & ~((1 << ACRPLLSYS_SYSPLL_BYPOUT_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_BYPOUT_MASK) | (((unsigned long)(SYSPLL_BYPOUT)) << ACRPLLSYS_SYSPLL_BYPOUT_SHIFT);\
}
#define ACRPLLSYS_SYSPLL_PWRDN_SIZE	1
#define ACRPLLSYS_SYSPLL_PWRDN_SHIFT	29
#define ACRPLLSYS_SYSPLL_PWRDN_MASK	0x20000000
#define ACRPLLSYS_GET_SYSPLL_PWRDN(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_PWRDN_MASK) >> ACRPLLSYS_SYSPLL_PWRDN_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_PWRDN(ACRPLLSYS, SYSPLL_PWRDN) { \
	FDL_ASSERT(!((SYSPLL_PWRDN) & ~((1 << ACRPLLSYS_SYSPLL_PWRDN_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_PWRDN_MASK) | (((unsigned long)(SYSPLL_PWRDN)) << ACRPLLSYS_SYSPLL_PWRDN_SHIFT);\
}
#define ACRPLLSYS_SYSPLL_TEST_SIZE	1
#define ACRPLLSYS_SYSPLL_TEST_SHIFT	30
#define ACRPLLSYS_SYSPLL_TEST_MASK	0x40000000
#define ACRPLLSYS_GET_SYSPLL_TEST(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_TEST_MASK) >> ACRPLLSYS_SYSPLL_TEST_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_TEST(ACRPLLSYS, SYSPLL_TEST) { \
	FDL_ASSERT(!((SYSPLL_TEST) & ~((1 << ACRPLLSYS_SYSPLL_TEST_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_TEST_MASK) | (((unsigned long)(SYSPLL_TEST)) << ACRPLLSYS_SYSPLL_TEST_SHIFT);\
}
#define ACRPLLSYS_SYSPLL_NLCK_SIZE	1
#define ACRPLLSYS_SYSPLL_NLCK_SHIFT	31
#define ACRPLLSYS_SYSPLL_NLCK_MASK	0x80000000
#define ACRPLLSYS_GET_SYSPLL_NLCK(ACRPLLSYS) \
	((((unsigned long)(ACRPLLSYS)) & ACRPLLSYS_SYSPLL_NLCK_MASK) >> ACRPLLSYS_SYSPLL_NLCK_SHIFT)
#define ACRPLLSYS_SET_SYSPLL_NLCK(ACRPLLSYS, SYSPLL_NLCK) { \
	FDL_ASSERT(!((SYSPLL_NLCK) & ~((1 << ACRPLLSYS_SYSPLL_NLCK_SIZE)-1))); \
	ACRPLLSYS = (((unsigned long)(ACRPLLSYS)) & ~ACRPLLSYS_SYSPLL_NLCK_MASK) | (((unsigned long)(SYSPLL_NLCK)) << ACRPLLSYS_SYSPLL_NLCK_SHIFT);\
}
#define ACRPLLSYS_TOTAL_SIZE	32
#define ACRPLLSYS(SYSPLL_CLKR, SYSPLL_CLKF, SYSPLL_CLKO_0, SYSPLL_BYPVCO, SYSPLL_BYPOUT, SYSPLL_PWRDN, SYSPLL_TEST, SYSPLL_NLCK) \
	((((unsigned long)(SYSPLL_CLKR)) << ACRPLLSYS_SYSPLL_CLKR_SHIFT) | \
	 (((unsigned long)(SYSPLL_CLKF)) << ACRPLLSYS_SYSPLL_CLKF_SHIFT) | \
	 (((unsigned long)(SYSPLL_CLKO_0)) << ACRPLLSYS_SYSPLL_CLKO_0_SHIFT) | \
	 (((unsigned long)(SYSPLL_BYPVCO)) << ACRPLLSYS_SYSPLL_BYPVCO_SHIFT) | \
	 (((unsigned long)(SYSPLL_BYPOUT)) << ACRPLLSYS_SYSPLL_BYPOUT_SHIFT) | \
	 (((unsigned long)(SYSPLL_PWRDN)) << ACRPLLSYS_SYSPLL_PWRDN_SHIFT) | \
	 (((unsigned long)(SYSPLL_TEST)) << ACRPLLSYS_SYSPLL_TEST_SHIFT) | \
	 (((unsigned long)(SYSPLL_NLCK)) << ACRPLLSYS_SYSPLL_NLCK_SHIFT))

/*
 *  ACRPLLSYSEXT struct
 */
#define ACRPLLSYSEXT_SYSPLL_CLKO_1_SIZE	9
#define ACRPLLSYSEXT_SYSPLL_CLKO_1_SHIFT	0
#define ACRPLLSYSEXT_SYSPLL_CLKO_1_MASK	0x000001ff
#define ACRPLLSYSEXT_GET_SYSPLL_CLKO_1(ACRPLLSYSEXT) \
	((((unsigned long)(ACRPLLSYSEXT)) & ACRPLLSYSEXT_SYSPLL_CLKO_1_MASK) >> ACRPLLSYSEXT_SYSPLL_CLKO_1_SHIFT)
#define ACRPLLSYSEXT_SET_SYSPLL_CLKO_1(ACRPLLSYSEXT, SYSPLL_CLKO_1) { \
	FDL_ASSERT(!((SYSPLL_CLKO_1) & ~((1 << ACRPLLSYSEXT_SYSPLL_CLKO_1_SIZE)-1))); \
	ACRPLLSYSEXT = (((unsigned long)(ACRPLLSYSEXT)) & ~ACRPLLSYSEXT_SYSPLL_CLKO_1_MASK) | (((unsigned long)(SYSPLL_CLKO_1)) << ACRPLLSYSEXT_SYSPLL_CLKO_1_SHIFT);\
}
#define ACRPLLSYSEXT_PAD0_SIZE	9
#define ACRPLLSYSEXT_PAD0_SHIFT	9
#define ACRPLLSYSEXT_PAD0_MASK	0x0003fe00
#define ACRPLLSYSEXT_GET_PAD0(ACRPLLSYSEXT) \
	((((unsigned long)(ACRPLLSYSEXT)) & ACRPLLSYSEXT_PAD0_MASK) >> ACRPLLSYSEXT_PAD0_SHIFT)
#define ACRPLLSYSEXT_SET_PAD0(ACRPLLSYSEXT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRPLLSYSEXT_PAD0_SIZE)-1))); \
	ACRPLLSYSEXT = (((unsigned long)(ACRPLLSYSEXT)) & ~ACRPLLSYSEXT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRPLLSYSEXT_PAD0_SHIFT);\
}
#define ACRPLLSYSEXT_PAD1_SIZE	9
#define ACRPLLSYSEXT_PAD1_SHIFT	18
#define ACRPLLSYSEXT_PAD1_MASK	0x07fc0000
#define ACRPLLSYSEXT_GET_PAD1(ACRPLLSYSEXT) \
	((((unsigned long)(ACRPLLSYSEXT)) & ACRPLLSYSEXT_PAD1_MASK) >> ACRPLLSYSEXT_PAD1_SHIFT)
#define ACRPLLSYSEXT_SET_PAD1(ACRPLLSYSEXT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRPLLSYSEXT_PAD1_SIZE)-1))); \
	ACRPLLSYSEXT = (((unsigned long)(ACRPLLSYSEXT)) & ~ACRPLLSYSEXT_PAD1_MASK) | (((unsigned long)(pad1)) << ACRPLLSYSEXT_PAD1_SHIFT);\
}
#define ACRPLLSYSEXT_SYSPLL_ENSAT_SIZE	1
#define ACRPLLSYSEXT_SYSPLL_ENSAT_SHIFT	27
#define ACRPLLSYSEXT_SYSPLL_ENSAT_MASK	0x08000000
#define ACRPLLSYSEXT_GET_SYSPLL_ENSAT(ACRPLLSYSEXT) \
	((((unsigned long)(ACRPLLSYSEXT)) & ACRPLLSYSEXT_SYSPLL_ENSAT_MASK) >> ACRPLLSYSEXT_SYSPLL_ENSAT_SHIFT)
#define ACRPLLSYSEXT_SET_SYSPLL_ENSAT(ACRPLLSYSEXT, SYSPLL_ENSAT) { \
	FDL_ASSERT(!((SYSPLL_ENSAT) & ~((1 << ACRPLLSYSEXT_SYSPLL_ENSAT_SIZE)-1))); \
	ACRPLLSYSEXT = (((unsigned long)(ACRPLLSYSEXT)) & ~ACRPLLSYSEXT_SYSPLL_ENSAT_MASK) | (((unsigned long)(SYSPLL_ENSAT)) << ACRPLLSYSEXT_SYSPLL_ENSAT_SHIFT);\
}
#define ACRPLLSYSEXT_SYSPLL_FASTEN_SIZE	1
#define ACRPLLSYSEXT_SYSPLL_FASTEN_SHIFT	28
#define ACRPLLSYSEXT_SYSPLL_FASTEN_MASK	0x10000000
#define ACRPLLSYSEXT_GET_SYSPLL_FASTEN(ACRPLLSYSEXT) \
	((((unsigned long)(ACRPLLSYSEXT)) & ACRPLLSYSEXT_SYSPLL_FASTEN_MASK) >> ACRPLLSYSEXT_SYSPLL_FASTEN_SHIFT)
#define ACRPLLSYSEXT_SET_SYSPLL_FASTEN(ACRPLLSYSEXT, SYSPLL_FASTEN) { \
	FDL_ASSERT(!((SYSPLL_FASTEN) & ~((1 << ACRPLLSYSEXT_SYSPLL_FASTEN_SIZE)-1))); \
	ACRPLLSYSEXT = (((unsigned long)(ACRPLLSYSEXT)) & ~ACRPLLSYSEXT_SYSPLL_FASTEN_MASK) | (((unsigned long)(SYSPLL_FASTEN)) << ACRPLLSYSEXT_SYSPLL_FASTEN_SHIFT);\
}
#define ACRPLLSYSEXT_SYSPLL_OUTRESET_SIZE	1
#define ACRPLLSYSEXT_SYSPLL_OUTRESET_SHIFT	29
#define ACRPLLSYSEXT_SYSPLL_OUTRESET_MASK	0x20000000
#define ACRPLLSYSEXT_GET_SYSPLL_OUTRESET(ACRPLLSYSEXT) \
	((((unsigned long)(ACRPLLSYSEXT)) & ACRPLLSYSEXT_SYSPLL_OUTRESET_MASK) >> ACRPLLSYSEXT_SYSPLL_OUTRESET_SHIFT)
#define ACRPLLSYSEXT_SET_SYSPLL_OUTRESET(ACRPLLSYSEXT, SYSPLL_OUTRESET) { \
	FDL_ASSERT(!((SYSPLL_OUTRESET) & ~((1 << ACRPLLSYSEXT_SYSPLL_OUTRESET_SIZE)-1))); \
	ACRPLLSYSEXT = (((unsigned long)(ACRPLLSYSEXT)) & ~ACRPLLSYSEXT_SYSPLL_OUTRESET_MASK) | (((unsigned long)(SYSPLL_OUTRESET)) << ACRPLLSYSEXT_SYSPLL_OUTRESET_SHIFT);\
}
#define ACRPLLSYSEXT_PAD2_SIZE	2
#define ACRPLLSYSEXT_PAD2_SHIFT	30
#define ACRPLLSYSEXT_PAD2_MASK	0xc0000000
#define ACRPLLSYSEXT_GET_PAD2(ACRPLLSYSEXT) \
	((((unsigned long)(ACRPLLSYSEXT)) & ACRPLLSYSEXT_PAD2_MASK) >> ACRPLLSYSEXT_PAD2_SHIFT)
#define ACRPLLSYSEXT_SET_PAD2(ACRPLLSYSEXT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << ACRPLLSYSEXT_PAD2_SIZE)-1))); \
	ACRPLLSYSEXT = (((unsigned long)(ACRPLLSYSEXT)) & ~ACRPLLSYSEXT_PAD2_MASK) | (((unsigned long)(pad2)) << ACRPLLSYSEXT_PAD2_SHIFT);\
}
#define ACRPLLSYSEXT_TOTAL_SIZE	32
#define ACRPLLSYSEXT(SYSPLL_CLKO_1, SYSPLL_ENSAT, SYSPLL_FASTEN, SYSPLL_OUTRESET) \
	((((unsigned long)(SYSPLL_CLKO_1)) << ACRPLLSYSEXT_SYSPLL_CLKO_1_SHIFT) | \
	 (((unsigned long)(SYSPLL_ENSAT)) << ACRPLLSYSEXT_SYSPLL_ENSAT_SHIFT) | \
	 (((unsigned long)(SYSPLL_FASTEN)) << ACRPLLSYSEXT_SYSPLL_FASTEN_SHIFT) | \
	 (((unsigned long)(SYSPLL_OUTRESET)) << ACRPLLSYSEXT_SYSPLL_OUTRESET_SHIFT))

/*
 *  ACRPLLDSK struct
 */
#define ACRPLLDSK_DSKPLL_CLKF_SIZE	2
#define ACRPLLDSK_DSKPLL_CLKF_SHIFT	0
#define ACRPLLDSK_DSKPLL_CLKF_MASK	0x00000003
#define ACRPLLDSK_GET_DSKPLL_CLKF(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_DSKPLL_CLKF_MASK) >> ACRPLLDSK_DSKPLL_CLKF_SHIFT)
#define ACRPLLDSK_SET_DSKPLL_CLKF(ACRPLLDSK, DSKPLL_CLKF) { \
	FDL_ASSERT(!((DSKPLL_CLKF) & ~((1 << ACRPLLDSK_DSKPLL_CLKF_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_DSKPLL_CLKF_MASK) | (((unsigned long)(DSKPLL_CLKF)) << ACRPLLDSK_DSKPLL_CLKF_SHIFT);\
}
#define ACRPLLDSK_DSKPLL_BYPASS_SIZE	1
#define ACRPLLDSK_DSKPLL_BYPASS_SHIFT	2
#define ACRPLLDSK_DSKPLL_BYPASS_MASK	0x00000004
#define ACRPLLDSK_GET_DSKPLL_BYPASS(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_DSKPLL_BYPASS_MASK) >> ACRPLLDSK_DSKPLL_BYPASS_SHIFT)
#define ACRPLLDSK_SET_DSKPLL_BYPASS(ACRPLLDSK, DSKPLL_BYPASS) { \
	FDL_ASSERT(!((DSKPLL_BYPASS) & ~((1 << ACRPLLDSK_DSKPLL_BYPASS_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_DSKPLL_BYPASS_MASK) | (((unsigned long)(DSKPLL_BYPASS)) << ACRPLLDSK_DSKPLL_BYPASS_SHIFT);\
}
#define ACRPLLDSK_DSKPLL_PWRDN_SIZE	1
#define ACRPLLDSK_DSKPLL_PWRDN_SHIFT	3
#define ACRPLLDSK_DSKPLL_PWRDN_MASK	0x00000008
#define ACRPLLDSK_GET_DSKPLL_PWRDN(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_DSKPLL_PWRDN_MASK) >> ACRPLLDSK_DSKPLL_PWRDN_SHIFT)
#define ACRPLLDSK_SET_DSKPLL_PWRDN(ACRPLLDSK, DSKPLL_PWRDN) { \
	FDL_ASSERT(!((DSKPLL_PWRDN) & ~((1 << ACRPLLDSK_DSKPLL_PWRDN_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_DSKPLL_PWRDN_MASK) | (((unsigned long)(DSKPLL_PWRDN)) << ACRPLLDSK_DSKPLL_PWRDN_SHIFT);\
}
#define ACRPLLDSK_DSKPLL_TEST_SIZE	1
#define ACRPLLDSK_DSKPLL_TEST_SHIFT	4
#define ACRPLLDSK_DSKPLL_TEST_MASK	0x00000010
#define ACRPLLDSK_GET_DSKPLL_TEST(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_DSKPLL_TEST_MASK) >> ACRPLLDSK_DSKPLL_TEST_SHIFT)
#define ACRPLLDSK_SET_DSKPLL_TEST(ACRPLLDSK, DSKPLL_TEST) { \
	FDL_ASSERT(!((DSKPLL_TEST) & ~((1 << ACRPLLDSK_DSKPLL_TEST_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_DSKPLL_TEST_MASK) | (((unsigned long)(DSKPLL_TEST)) << ACRPLLDSK_DSKPLL_TEST_SHIFT);\
}
#define ACRPLLDSK_DSKPLL_ENSAT_SIZE	1
#define ACRPLLDSK_DSKPLL_ENSAT_SHIFT	5
#define ACRPLLDSK_DSKPLL_ENSAT_MASK	0x00000020
#define ACRPLLDSK_GET_DSKPLL_ENSAT(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_DSKPLL_ENSAT_MASK) >> ACRPLLDSK_DSKPLL_ENSAT_SHIFT)
#define ACRPLLDSK_SET_DSKPLL_ENSAT(ACRPLLDSK, DSKPLL_ENSAT) { \
	FDL_ASSERT(!((DSKPLL_ENSAT) & ~((1 << ACRPLLDSK_DSKPLL_ENSAT_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_DSKPLL_ENSAT_MASK) | (((unsigned long)(DSKPLL_ENSAT)) << ACRPLLDSK_DSKPLL_ENSAT_SHIFT);\
}
#define ACRPLLDSK_DSKPLL_IFB_SIZE	1
#define ACRPLLDSK_DSKPLL_IFB_SHIFT	6
#define ACRPLLDSK_DSKPLL_IFB_MASK	0x00000040
#define ACRPLLDSK_GET_DSKPLL_IFB(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_DSKPLL_IFB_MASK) >> ACRPLLDSK_DSKPLL_IFB_SHIFT)
#define ACRPLLDSK_SET_DSKPLL_IFB(ACRPLLDSK, DSKPLL_IFB) { \
	FDL_ASSERT(!((DSKPLL_IFB) & ~((1 << ACRPLLDSK_DSKPLL_IFB_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_DSKPLL_IFB_MASK) | (((unsigned long)(DSKPLL_IFB)) << ACRPLLDSK_DSKPLL_IFB_SHIFT);\
}
#define ACRPLLDSK_DSKPLL_NLCK_SIZE	1
#define ACRPLLDSK_DSKPLL_NLCK_SHIFT	7
#define ACRPLLDSK_DSKPLL_NLCK_MASK	0x00000080
#define ACRPLLDSK_GET_DSKPLL_NLCK(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_DSKPLL_NLCK_MASK) >> ACRPLLDSK_DSKPLL_NLCK_SHIFT)
#define ACRPLLDSK_SET_DSKPLL_NLCK(ACRPLLDSK, DSKPLL_NLCK) { \
	FDL_ASSERT(!((DSKPLL_NLCK) & ~((1 << ACRPLLDSK_DSKPLL_NLCK_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_DSKPLL_NLCK_MASK) | (((unsigned long)(DSKPLL_NLCK)) << ACRPLLDSK_DSKPLL_NLCK_SHIFT);\
}
#define ACRPLLDSK_PAD0_SIZE	24
#define ACRPLLDSK_PAD0_SHIFT	8
#define ACRPLLDSK_PAD0_MASK	0xffffff00
#define ACRPLLDSK_GET_PAD0(ACRPLLDSK) \
	((((unsigned long)(ACRPLLDSK)) & ACRPLLDSK_PAD0_MASK) >> ACRPLLDSK_PAD0_SHIFT)
#define ACRPLLDSK_SET_PAD0(ACRPLLDSK, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRPLLDSK_PAD0_SIZE)-1))); \
	ACRPLLDSK = (((unsigned long)(ACRPLLDSK)) & ~ACRPLLDSK_PAD0_MASK) | (((unsigned long)(pad0)) << ACRPLLDSK_PAD0_SHIFT);\
}
#define ACRPLLDSK_TOTAL_SIZE	32
#define ACRPLLDSK(DSKPLL_CLKF, DSKPLL_BYPASS, DSKPLL_PWRDN, DSKPLL_TEST, DSKPLL_ENSAT, DSKPLL_IFB, DSKPLL_NLCK) \
	((((unsigned long)(DSKPLL_CLKF)) << ACRPLLDSK_DSKPLL_CLKF_SHIFT) | \
	 (((unsigned long)(DSKPLL_BYPASS)) << ACRPLLDSK_DSKPLL_BYPASS_SHIFT) | \
	 (((unsigned long)(DSKPLL_PWRDN)) << ACRPLLDSK_DSKPLL_PWRDN_SHIFT) | \
	 (((unsigned long)(DSKPLL_TEST)) << ACRPLLDSK_DSKPLL_TEST_SHIFT) | \
	 (((unsigned long)(DSKPLL_ENSAT)) << ACRPLLDSK_DSKPLL_ENSAT_SHIFT) | \
	 (((unsigned long)(DSKPLL_IFB)) << ACRPLLDSK_DSKPLL_IFB_SHIFT) | \
	 (((unsigned long)(DSKPLL_NLCK)) << ACRPLLDSK_DSKPLL_NLCK_SHIFT))

/*
 *  ACRPLLDDR struct
 */
#define ACRPLLDDR_DDRPLL_CLKR_SIZE	6
#define ACRPLLDDR_DDRPLL_CLKR_SHIFT	0
#define ACRPLLDDR_DDRPLL_CLKR_MASK	0x0000003f
#define ACRPLLDDR_GET_DDRPLL_CLKR(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_CLKR_MASK) >> ACRPLLDDR_DDRPLL_CLKR_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_CLKR(ACRPLLDDR, DDRPLL_CLKR) { \
	FDL_ASSERT(!((DDRPLL_CLKR) & ~((1 << ACRPLLDDR_DDRPLL_CLKR_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_CLKR_MASK) | (((unsigned long)(DDRPLL_CLKR)) << ACRPLLDDR_DDRPLL_CLKR_SHIFT);\
}
#define ACRPLLDDR_DDRPLL_CLKF_SIZE	12
#define ACRPLLDDR_DDRPLL_CLKF_SHIFT	6
#define ACRPLLDDR_DDRPLL_CLKF_MASK	0x0003ffc0
#define ACRPLLDDR_GET_DDRPLL_CLKF(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_CLKF_MASK) >> ACRPLLDDR_DDRPLL_CLKF_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_CLKF(ACRPLLDDR, DDRPLL_CLKF) { \
	FDL_ASSERT(!((DDRPLL_CLKF) & ~((1 << ACRPLLDDR_DDRPLL_CLKF_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_CLKF_MASK) | (((unsigned long)(DDRPLL_CLKF)) << ACRPLLDDR_DDRPLL_CLKF_SHIFT);\
}
#define ACRPLLDDR_DDRPLL_CLKO_0_SIZE	9
#define ACRPLLDDR_DDRPLL_CLKO_0_SHIFT	18
#define ACRPLLDDR_DDRPLL_CLKO_0_MASK	0x07fc0000
#define ACRPLLDDR_GET_DDRPLL_CLKO_0(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_CLKO_0_MASK) >> ACRPLLDDR_DDRPLL_CLKO_0_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_CLKO_0(ACRPLLDDR, DDRPLL_CLKO_0) { \
	FDL_ASSERT(!((DDRPLL_CLKO_0) & ~((1 << ACRPLLDDR_DDRPLL_CLKO_0_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_CLKO_0_MASK) | (((unsigned long)(DDRPLL_CLKO_0)) << ACRPLLDDR_DDRPLL_CLKO_0_SHIFT);\
}
#define ACRPLLDDR_DDRPLL_BYPVCO_SIZE	1
#define ACRPLLDDR_DDRPLL_BYPVCO_SHIFT	27
#define ACRPLLDDR_DDRPLL_BYPVCO_MASK	0x08000000
#define ACRPLLDDR_GET_DDRPLL_BYPVCO(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_BYPVCO_MASK) >> ACRPLLDDR_DDRPLL_BYPVCO_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_BYPVCO(ACRPLLDDR, DDRPLL_BYPVCO) { \
	FDL_ASSERT(!((DDRPLL_BYPVCO) & ~((1 << ACRPLLDDR_DDRPLL_BYPVCO_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_BYPVCO_MASK) | (((unsigned long)(DDRPLL_BYPVCO)) << ACRPLLDDR_DDRPLL_BYPVCO_SHIFT);\
}
#define ACRPLLDDR_DDRPLL_BYPOUT_SIZE	1
#define ACRPLLDDR_DDRPLL_BYPOUT_SHIFT	28
#define ACRPLLDDR_DDRPLL_BYPOUT_MASK	0x10000000
#define ACRPLLDDR_GET_DDRPLL_BYPOUT(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_BYPOUT_MASK) >> ACRPLLDDR_DDRPLL_BYPOUT_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_BYPOUT(ACRPLLDDR, DDRPLL_BYPOUT) { \
	FDL_ASSERT(!((DDRPLL_BYPOUT) & ~((1 << ACRPLLDDR_DDRPLL_BYPOUT_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_BYPOUT_MASK) | (((unsigned long)(DDRPLL_BYPOUT)) << ACRPLLDDR_DDRPLL_BYPOUT_SHIFT);\
}
#define ACRPLLDDR_DDRPLL_PWRDN_SIZE	1
#define ACRPLLDDR_DDRPLL_PWRDN_SHIFT	29
#define ACRPLLDDR_DDRPLL_PWRDN_MASK	0x20000000
#define ACRPLLDDR_GET_DDRPLL_PWRDN(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_PWRDN_MASK) >> ACRPLLDDR_DDRPLL_PWRDN_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_PWRDN(ACRPLLDDR, DDRPLL_PWRDN) { \
	FDL_ASSERT(!((DDRPLL_PWRDN) & ~((1 << ACRPLLDDR_DDRPLL_PWRDN_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_PWRDN_MASK) | (((unsigned long)(DDRPLL_PWRDN)) << ACRPLLDDR_DDRPLL_PWRDN_SHIFT);\
}
#define ACRPLLDDR_DDRPLL_TEST_SIZE	1
#define ACRPLLDDR_DDRPLL_TEST_SHIFT	30
#define ACRPLLDDR_DDRPLL_TEST_MASK	0x40000000
#define ACRPLLDDR_GET_DDRPLL_TEST(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_TEST_MASK) >> ACRPLLDDR_DDRPLL_TEST_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_TEST(ACRPLLDDR, DDRPLL_TEST) { \
	FDL_ASSERT(!((DDRPLL_TEST) & ~((1 << ACRPLLDDR_DDRPLL_TEST_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_TEST_MASK) | (((unsigned long)(DDRPLL_TEST)) << ACRPLLDDR_DDRPLL_TEST_SHIFT);\
}
#define ACRPLLDDR_DDRPLL_NLCK_SIZE	1
#define ACRPLLDDR_DDRPLL_NLCK_SHIFT	31
#define ACRPLLDDR_DDRPLL_NLCK_MASK	0x80000000
#define ACRPLLDDR_GET_DDRPLL_NLCK(ACRPLLDDR) \
	((((unsigned long)(ACRPLLDDR)) & ACRPLLDDR_DDRPLL_NLCK_MASK) >> ACRPLLDDR_DDRPLL_NLCK_SHIFT)
#define ACRPLLDDR_SET_DDRPLL_NLCK(ACRPLLDDR, DDRPLL_NLCK) { \
	FDL_ASSERT(!((DDRPLL_NLCK) & ~((1 << ACRPLLDDR_DDRPLL_NLCK_SIZE)-1))); \
	ACRPLLDDR = (((unsigned long)(ACRPLLDDR)) & ~ACRPLLDDR_DDRPLL_NLCK_MASK) | (((unsigned long)(DDRPLL_NLCK)) << ACRPLLDDR_DDRPLL_NLCK_SHIFT);\
}
#define ACRPLLDDR_TOTAL_SIZE	32
#define ACRPLLDDR(DDRPLL_CLKR, DDRPLL_CLKF, DDRPLL_CLKO_0, DDRPLL_BYPVCO, DDRPLL_BYPOUT, DDRPLL_PWRDN, DDRPLL_TEST, DDRPLL_NLCK) \
	((((unsigned long)(DDRPLL_CLKR)) << ACRPLLDDR_DDRPLL_CLKR_SHIFT) | \
	 (((unsigned long)(DDRPLL_CLKF)) << ACRPLLDDR_DDRPLL_CLKF_SHIFT) | \
	 (((unsigned long)(DDRPLL_CLKO_0)) << ACRPLLDDR_DDRPLL_CLKO_0_SHIFT) | \
	 (((unsigned long)(DDRPLL_BYPVCO)) << ACRPLLDDR_DDRPLL_BYPVCO_SHIFT) | \
	 (((unsigned long)(DDRPLL_BYPOUT)) << ACRPLLDDR_DDRPLL_BYPOUT_SHIFT) | \
	 (((unsigned long)(DDRPLL_PWRDN)) << ACRPLLDDR_DDRPLL_PWRDN_SHIFT) | \
	 (((unsigned long)(DDRPLL_TEST)) << ACRPLLDDR_DDRPLL_TEST_SHIFT) | \
	 (((unsigned long)(DDRPLL_NLCK)) << ACRPLLDDR_DDRPLL_NLCK_SHIFT))

/*
 *  ACRPLLDDREXT struct
 */
#define ACRPLLDDREXT_PAD0_SIZE	9
#define ACRPLLDDREXT_PAD0_SHIFT	0
#define ACRPLLDDREXT_PAD0_MASK	0x000001ff
#define ACRPLLDDREXT_GET_PAD0(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_PAD0_MASK) >> ACRPLLDDREXT_PAD0_SHIFT)
#define ACRPLLDDREXT_SET_PAD0(ACRPLLDDREXT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRPLLDDREXT_PAD0_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRPLLDDREXT_PAD0_SHIFT);\
}
#define ACRPLLDDREXT_PAD1_SIZE	9
#define ACRPLLDDREXT_PAD1_SHIFT	9
#define ACRPLLDDREXT_PAD1_MASK	0x0003fe00
#define ACRPLLDDREXT_GET_PAD1(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_PAD1_MASK) >> ACRPLLDDREXT_PAD1_SHIFT)
#define ACRPLLDDREXT_SET_PAD1(ACRPLLDDREXT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRPLLDDREXT_PAD1_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_PAD1_MASK) | (((unsigned long)(pad1)) << ACRPLLDDREXT_PAD1_SHIFT);\
}
#define ACRPLLDDREXT_PAD2_SIZE	9
#define ACRPLLDDREXT_PAD2_SHIFT	18
#define ACRPLLDDREXT_PAD2_MASK	0x07fc0000
#define ACRPLLDDREXT_GET_PAD2(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_PAD2_MASK) >> ACRPLLDDREXT_PAD2_SHIFT)
#define ACRPLLDDREXT_SET_PAD2(ACRPLLDDREXT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << ACRPLLDDREXT_PAD2_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_PAD2_MASK) | (((unsigned long)(pad2)) << ACRPLLDDREXT_PAD2_SHIFT);\
}
#define ACRPLLDDREXT_DDRPLL_ENSAT_SIZE	1
#define ACRPLLDDREXT_DDRPLL_ENSAT_SHIFT	27
#define ACRPLLDDREXT_DDRPLL_ENSAT_MASK	0x08000000
#define ACRPLLDDREXT_GET_DDRPLL_ENSAT(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_DDRPLL_ENSAT_MASK) >> ACRPLLDDREXT_DDRPLL_ENSAT_SHIFT)
#define ACRPLLDDREXT_SET_DDRPLL_ENSAT(ACRPLLDDREXT, DDRPLL_ENSAT) { \
	FDL_ASSERT(!((DDRPLL_ENSAT) & ~((1 << ACRPLLDDREXT_DDRPLL_ENSAT_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_DDRPLL_ENSAT_MASK) | (((unsigned long)(DDRPLL_ENSAT)) << ACRPLLDDREXT_DDRPLL_ENSAT_SHIFT);\
}
#define ACRPLLDDREXT_DDRPLL_FASTEN_SIZE	1
#define ACRPLLDDREXT_DDRPLL_FASTEN_SHIFT	28
#define ACRPLLDDREXT_DDRPLL_FASTEN_MASK	0x10000000
#define ACRPLLDDREXT_GET_DDRPLL_FASTEN(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_DDRPLL_FASTEN_MASK) >> ACRPLLDDREXT_DDRPLL_FASTEN_SHIFT)
#define ACRPLLDDREXT_SET_DDRPLL_FASTEN(ACRPLLDDREXT, DDRPLL_FASTEN) { \
	FDL_ASSERT(!((DDRPLL_FASTEN) & ~((1 << ACRPLLDDREXT_DDRPLL_FASTEN_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_DDRPLL_FASTEN_MASK) | (((unsigned long)(DDRPLL_FASTEN)) << ACRPLLDDREXT_DDRPLL_FASTEN_SHIFT);\
}
#define ACRPLLDDREXT_DDRPLL_OUTRESET_SIZE	1
#define ACRPLLDDREXT_DDRPLL_OUTRESET_SHIFT	29
#define ACRPLLDDREXT_DDRPLL_OUTRESET_MASK	0x20000000
#define ACRPLLDDREXT_GET_DDRPLL_OUTRESET(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_DDRPLL_OUTRESET_MASK) >> ACRPLLDDREXT_DDRPLL_OUTRESET_SHIFT)
#define ACRPLLDDREXT_SET_DDRPLL_OUTRESET(ACRPLLDDREXT, DDRPLL_OUTRESET) { \
	FDL_ASSERT(!((DDRPLL_OUTRESET) & ~((1 << ACRPLLDDREXT_DDRPLL_OUTRESET_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_DDRPLL_OUTRESET_MASK) | (((unsigned long)(DDRPLL_OUTRESET)) << ACRPLLDDREXT_DDRPLL_OUTRESET_SHIFT);\
}
#define ACRPLLDDREXT_DDRPLL_RSTB_SIZE	1
#define ACRPLLDDREXT_DDRPLL_RSTB_SHIFT	30
#define ACRPLLDDREXT_DDRPLL_RSTB_MASK	0x40000000
#define ACRPLLDDREXT_GET_DDRPLL_RSTB(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_DDRPLL_RSTB_MASK) >> ACRPLLDDREXT_DDRPLL_RSTB_SHIFT)
#define ACRPLLDDREXT_SET_DDRPLL_RSTB(ACRPLLDDREXT, DDRPLL_RSTB) { \
	FDL_ASSERT(!((DDRPLL_RSTB) & ~((1 << ACRPLLDDREXT_DDRPLL_RSTB_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_DDRPLL_RSTB_MASK) | (((unsigned long)(DDRPLL_RSTB)) << ACRPLLDDREXT_DDRPLL_RSTB_SHIFT);\
}
#define ACRPLLDDREXT_DDRPLL_NLCKB_SIZE	1
#define ACRPLLDDREXT_DDRPLL_NLCKB_SHIFT	31
#define ACRPLLDDREXT_DDRPLL_NLCKB_MASK	0x80000000
#define ACRPLLDDREXT_GET_DDRPLL_NLCKB(ACRPLLDDREXT) \
	((((unsigned long)(ACRPLLDDREXT)) & ACRPLLDDREXT_DDRPLL_NLCKB_MASK) >> ACRPLLDDREXT_DDRPLL_NLCKB_SHIFT)
#define ACRPLLDDREXT_SET_DDRPLL_NLCKB(ACRPLLDDREXT, DDRPLL_NLCKB) { \
	FDL_ASSERT(!((DDRPLL_NLCKB) & ~((1 << ACRPLLDDREXT_DDRPLL_NLCKB_SIZE)-1))); \
	ACRPLLDDREXT = (((unsigned long)(ACRPLLDDREXT)) & ~ACRPLLDDREXT_DDRPLL_NLCKB_MASK) | (((unsigned long)(DDRPLL_NLCKB)) << ACRPLLDDREXT_DDRPLL_NLCKB_SHIFT);\
}
#define ACRPLLDDREXT_TOTAL_SIZE	32
#define ACRPLLDDREXT(DDRPLL_ENSAT, DDRPLL_FASTEN, DDRPLL_OUTRESET, DDRPLL_RSTB, DDRPLL_NLCKB) \
	((((unsigned long)(DDRPLL_ENSAT)) << ACRPLLDDREXT_DDRPLL_ENSAT_SHIFT) | \
	 (((unsigned long)(DDRPLL_FASTEN)) << ACRPLLDDREXT_DDRPLL_FASTEN_SHIFT) | \
	 (((unsigned long)(DDRPLL_OUTRESET)) << ACRPLLDDREXT_DDRPLL_OUTRESET_SHIFT) | \
	 (((unsigned long)(DDRPLL_RSTB)) << ACRPLLDDREXT_DDRPLL_RSTB_SHIFT) | \
	 (((unsigned long)(DDRPLL_NLCKB)) << ACRPLLDDREXT_DDRPLL_NLCKB_SHIFT))

/*
 *  ACRPLLVI struct
 */
#define ACRPLLVI_VIPLL_CLKR_SIZE	6
#define ACRPLLVI_VIPLL_CLKR_SHIFT	0
#define ACRPLLVI_VIPLL_CLKR_MASK	0x0000003f
#define ACRPLLVI_GET_VIPLL_CLKR(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_CLKR_MASK) >> ACRPLLVI_VIPLL_CLKR_SHIFT)
#define ACRPLLVI_SET_VIPLL_CLKR(ACRPLLVI, VIPLL_CLKR) { \
	FDL_ASSERT(!((VIPLL_CLKR) & ~((1 << ACRPLLVI_VIPLL_CLKR_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_CLKR_MASK) | (((unsigned long)(VIPLL_CLKR)) << ACRPLLVI_VIPLL_CLKR_SHIFT);\
}
#define ACRPLLVI_VIPLL_CLKF_SIZE	12
#define ACRPLLVI_VIPLL_CLKF_SHIFT	6
#define ACRPLLVI_VIPLL_CLKF_MASK	0x0003ffc0
#define ACRPLLVI_GET_VIPLL_CLKF(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_CLKF_MASK) >> ACRPLLVI_VIPLL_CLKF_SHIFT)
#define ACRPLLVI_SET_VIPLL_CLKF(ACRPLLVI, VIPLL_CLKF) { \
	FDL_ASSERT(!((VIPLL_CLKF) & ~((1 << ACRPLLVI_VIPLL_CLKF_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_CLKF_MASK) | (((unsigned long)(VIPLL_CLKF)) << ACRPLLVI_VIPLL_CLKF_SHIFT);\
}
#define ACRPLLVI_VIPLL_CLKO_0_SIZE	9
#define ACRPLLVI_VIPLL_CLKO_0_SHIFT	18
#define ACRPLLVI_VIPLL_CLKO_0_MASK	0x07fc0000
#define ACRPLLVI_GET_VIPLL_CLKO_0(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_CLKO_0_MASK) >> ACRPLLVI_VIPLL_CLKO_0_SHIFT)
#define ACRPLLVI_SET_VIPLL_CLKO_0(ACRPLLVI, VIPLL_CLKO_0) { \
	FDL_ASSERT(!((VIPLL_CLKO_0) & ~((1 << ACRPLLVI_VIPLL_CLKO_0_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_CLKO_0_MASK) | (((unsigned long)(VIPLL_CLKO_0)) << ACRPLLVI_VIPLL_CLKO_0_SHIFT);\
}
#define ACRPLLVI_VIPLL_BYPVCO_SIZE	1
#define ACRPLLVI_VIPLL_BYPVCO_SHIFT	27
#define ACRPLLVI_VIPLL_BYPVCO_MASK	0x08000000
#define ACRPLLVI_GET_VIPLL_BYPVCO(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_BYPVCO_MASK) >> ACRPLLVI_VIPLL_BYPVCO_SHIFT)
#define ACRPLLVI_SET_VIPLL_BYPVCO(ACRPLLVI, VIPLL_BYPVCO) { \
	FDL_ASSERT(!((VIPLL_BYPVCO) & ~((1 << ACRPLLVI_VIPLL_BYPVCO_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_BYPVCO_MASK) | (((unsigned long)(VIPLL_BYPVCO)) << ACRPLLVI_VIPLL_BYPVCO_SHIFT);\
}
#define ACRPLLVI_VIPLL_BYPOUT_SIZE	1
#define ACRPLLVI_VIPLL_BYPOUT_SHIFT	28
#define ACRPLLVI_VIPLL_BYPOUT_MASK	0x10000000
#define ACRPLLVI_GET_VIPLL_BYPOUT(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_BYPOUT_MASK) >> ACRPLLVI_VIPLL_BYPOUT_SHIFT)
#define ACRPLLVI_SET_VIPLL_BYPOUT(ACRPLLVI, VIPLL_BYPOUT) { \
	FDL_ASSERT(!((VIPLL_BYPOUT) & ~((1 << ACRPLLVI_VIPLL_BYPOUT_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_BYPOUT_MASK) | (((unsigned long)(VIPLL_BYPOUT)) << ACRPLLVI_VIPLL_BYPOUT_SHIFT);\
}
#define ACRPLLVI_VIPLL_PWRDN_SIZE	1
#define ACRPLLVI_VIPLL_PWRDN_SHIFT	29
#define ACRPLLVI_VIPLL_PWRDN_MASK	0x20000000
#define ACRPLLVI_GET_VIPLL_PWRDN(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_PWRDN_MASK) >> ACRPLLVI_VIPLL_PWRDN_SHIFT)
#define ACRPLLVI_SET_VIPLL_PWRDN(ACRPLLVI, VIPLL_PWRDN) { \
	FDL_ASSERT(!((VIPLL_PWRDN) & ~((1 << ACRPLLVI_VIPLL_PWRDN_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_PWRDN_MASK) | (((unsigned long)(VIPLL_PWRDN)) << ACRPLLVI_VIPLL_PWRDN_SHIFT);\
}
#define ACRPLLVI_VIPLL_TEST_SIZE	1
#define ACRPLLVI_VIPLL_TEST_SHIFT	30
#define ACRPLLVI_VIPLL_TEST_MASK	0x40000000
#define ACRPLLVI_GET_VIPLL_TEST(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_TEST_MASK) >> ACRPLLVI_VIPLL_TEST_SHIFT)
#define ACRPLLVI_SET_VIPLL_TEST(ACRPLLVI, VIPLL_TEST) { \
	FDL_ASSERT(!((VIPLL_TEST) & ~((1 << ACRPLLVI_VIPLL_TEST_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_TEST_MASK) | (((unsigned long)(VIPLL_TEST)) << ACRPLLVI_VIPLL_TEST_SHIFT);\
}
#define ACRPLLVI_VIPLL_NLCK_SIZE	1
#define ACRPLLVI_VIPLL_NLCK_SHIFT	31
#define ACRPLLVI_VIPLL_NLCK_MASK	0x80000000
#define ACRPLLVI_GET_VIPLL_NLCK(ACRPLLVI) \
	((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_NLCK_MASK) >> ACRPLLVI_VIPLL_NLCK_SHIFT)
#define ACRPLLVI_SET_VIPLL_NLCK(ACRPLLVI, VIPLL_NLCK) { \
	FDL_ASSERT(!((VIPLL_NLCK) & ~((1 << ACRPLLVI_VIPLL_NLCK_SIZE)-1))); \
	ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_NLCK_MASK) | (((unsigned long)(VIPLL_NLCK)) << ACRPLLVI_VIPLL_NLCK_SHIFT);\
}
#define ACRPLLVI_TOTAL_SIZE	32
#define ACRPLLVI(VIPLL_CLKR, VIPLL_CLKF, VIPLL_CLKO_0, VIPLL_BYPVCO, VIPLL_BYPOUT, VIPLL_PWRDN, VIPLL_TEST, VIPLL_NLCK) \
	((((unsigned long)(VIPLL_CLKR)) << ACRPLLVI_VIPLL_CLKR_SHIFT) | \
	 (((unsigned long)(VIPLL_CLKF)) << ACRPLLVI_VIPLL_CLKF_SHIFT) | \
	 (((unsigned long)(VIPLL_CLKO_0)) << ACRPLLVI_VIPLL_CLKO_0_SHIFT) | \
	 (((unsigned long)(VIPLL_BYPVCO)) << ACRPLLVI_VIPLL_BYPVCO_SHIFT) | \
	 (((unsigned long)(VIPLL_BYPOUT)) << ACRPLLVI_VIPLL_BYPOUT_SHIFT) | \
	 (((unsigned long)(VIPLL_PWRDN)) << ACRPLLVI_VIPLL_PWRDN_SHIFT) | \
	 (((unsigned long)(VIPLL_TEST)) << ACRPLLVI_VIPLL_TEST_SHIFT) | \
	 (((unsigned long)(VIPLL_NLCK)) << ACRPLLVI_VIPLL_NLCK_SHIFT))

/*
 *  ACRPLLVIEXT struct
 */
#define ACRPLLVIEXT_VIPLL_CLKO_1_SIZE	9
#define ACRPLLVIEXT_VIPLL_CLKO_1_SHIFT	0
#define ACRPLLVIEXT_VIPLL_CLKO_1_MASK	0x000001ff
#define ACRPLLVIEXT_GET_VIPLL_CLKO_1(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_CLKO_1_MASK) >> ACRPLLVIEXT_VIPLL_CLKO_1_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_CLKO_1(ACRPLLVIEXT, VIPLL_CLKO_1) { \
	FDL_ASSERT(!((VIPLL_CLKO_1) & ~((1 << ACRPLLVIEXT_VIPLL_CLKO_1_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_CLKO_1_MASK) | (((unsigned long)(VIPLL_CLKO_1)) << ACRPLLVIEXT_VIPLL_CLKO_1_SHIFT);\
}
#define ACRPLLVIEXT_VIPLL_CLKO_2_SIZE	9
#define ACRPLLVIEXT_VIPLL_CLKO_2_SHIFT	9
#define ACRPLLVIEXT_VIPLL_CLKO_2_MASK	0x0003fe00
#define ACRPLLVIEXT_GET_VIPLL_CLKO_2(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_CLKO_2_MASK) >> ACRPLLVIEXT_VIPLL_CLKO_2_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_CLKO_2(ACRPLLVIEXT, VIPLL_CLKO_2) { \
	FDL_ASSERT(!((VIPLL_CLKO_2) & ~((1 << ACRPLLVIEXT_VIPLL_CLKO_2_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_CLKO_2_MASK) | (((unsigned long)(VIPLL_CLKO_2)) << ACRPLLVIEXT_VIPLL_CLKO_2_SHIFT);\
}
#define ACRPLLVIEXT_VIPLL_CLKO_3_SIZE	9
#define ACRPLLVIEXT_VIPLL_CLKO_3_SHIFT	18
#define ACRPLLVIEXT_VIPLL_CLKO_3_MASK	0x07fc0000
#define ACRPLLVIEXT_GET_VIPLL_CLKO_3(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_CLKO_3_MASK) >> ACRPLLVIEXT_VIPLL_CLKO_3_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_CLKO_3(ACRPLLVIEXT, VIPLL_CLKO_3) { \
	FDL_ASSERT(!((VIPLL_CLKO_3) & ~((1 << ACRPLLVIEXT_VIPLL_CLKO_3_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_CLKO_3_MASK) | (((unsigned long)(VIPLL_CLKO_3)) << ACRPLLVIEXT_VIPLL_CLKO_3_SHIFT);\
}
#define ACRPLLVIEXT_VIPLL_ENSAT_SIZE	1
#define ACRPLLVIEXT_VIPLL_ENSAT_SHIFT	27
#define ACRPLLVIEXT_VIPLL_ENSAT_MASK	0x08000000
#define ACRPLLVIEXT_GET_VIPLL_ENSAT(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_ENSAT_MASK) >> ACRPLLVIEXT_VIPLL_ENSAT_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_ENSAT(ACRPLLVIEXT, VIPLL_ENSAT) { \
	FDL_ASSERT(!((VIPLL_ENSAT) & ~((1 << ACRPLLVIEXT_VIPLL_ENSAT_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_ENSAT_MASK) | (((unsigned long)(VIPLL_ENSAT)) << ACRPLLVIEXT_VIPLL_ENSAT_SHIFT);\
}
#define ACRPLLVIEXT_VIPLL_FASTEN_SIZE	1
#define ACRPLLVIEXT_VIPLL_FASTEN_SHIFT	28
#define ACRPLLVIEXT_VIPLL_FASTEN_MASK	0x10000000
#define ACRPLLVIEXT_GET_VIPLL_FASTEN(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_FASTEN_MASK) >> ACRPLLVIEXT_VIPLL_FASTEN_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_FASTEN(ACRPLLVIEXT, VIPLL_FASTEN) { \
	FDL_ASSERT(!((VIPLL_FASTEN) & ~((1 << ACRPLLVIEXT_VIPLL_FASTEN_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_FASTEN_MASK) | (((unsigned long)(VIPLL_FASTEN)) << ACRPLLVIEXT_VIPLL_FASTEN_SHIFT);\
}
#define ACRPLLVIEXT_VIPLL_OUTRESET_SIZE	1
#define ACRPLLVIEXT_VIPLL_OUTRESET_SHIFT	29
#define ACRPLLVIEXT_VIPLL_OUTRESET_MASK	0x20000000
#define ACRPLLVIEXT_GET_VIPLL_OUTRESET(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_OUTRESET_MASK) >> ACRPLLVIEXT_VIPLL_OUTRESET_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_OUTRESET(ACRPLLVIEXT, VIPLL_OUTRESET) { \
	FDL_ASSERT(!((VIPLL_OUTRESET) & ~((1 << ACRPLLVIEXT_VIPLL_OUTRESET_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_OUTRESET_MASK) | (((unsigned long)(VIPLL_OUTRESET)) << ACRPLLVIEXT_VIPLL_OUTRESET_SHIFT);\
}
#define ACRPLLVIEXT_VIPLL_RSTB_SIZE	1
#define ACRPLLVIEXT_VIPLL_RSTB_SHIFT	30
#define ACRPLLVIEXT_VIPLL_RSTB_MASK	0x40000000
#define ACRPLLVIEXT_GET_VIPLL_RSTB(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_RSTB_MASK) >> ACRPLLVIEXT_VIPLL_RSTB_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_RSTB(ACRPLLVIEXT, VIPLL_RSTB) { \
	FDL_ASSERT(!((VIPLL_RSTB) & ~((1 << ACRPLLVIEXT_VIPLL_RSTB_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_RSTB_MASK) | (((unsigned long)(VIPLL_RSTB)) << ACRPLLVIEXT_VIPLL_RSTB_SHIFT);\
}
#define ACRPLLVIEXT_VIPLL_NLCKB_SIZE	1
#define ACRPLLVIEXT_VIPLL_NLCKB_SHIFT	31
#define ACRPLLVIEXT_VIPLL_NLCKB_MASK	0x80000000
#define ACRPLLVIEXT_GET_VIPLL_NLCKB(ACRPLLVIEXT) \
	((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_NLCKB_MASK) >> ACRPLLVIEXT_VIPLL_NLCKB_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_NLCKB(ACRPLLVIEXT, VIPLL_NLCKB) { \
	FDL_ASSERT(!((VIPLL_NLCKB) & ~((1 << ACRPLLVIEXT_VIPLL_NLCKB_SIZE)-1))); \
	ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_NLCKB_MASK) | (((unsigned long)(VIPLL_NLCKB)) << ACRPLLVIEXT_VIPLL_NLCKB_SHIFT);\
}
#define ACRPLLVIEXT_TOTAL_SIZE	32
#define ACRPLLVIEXT(VIPLL_CLKO_1, VIPLL_CLKO_2, VIPLL_CLKO_3, VIPLL_ENSAT, VIPLL_FASTEN, VIPLL_OUTRESET, VIPLL_RSTB, VIPLL_NLCKB) \
	((((unsigned long)(VIPLL_CLKO_1)) << ACRPLLVIEXT_VIPLL_CLKO_1_SHIFT) | \
	 (((unsigned long)(VIPLL_CLKO_2)) << ACRPLLVIEXT_VIPLL_CLKO_2_SHIFT) | \
	 (((unsigned long)(VIPLL_CLKO_3)) << ACRPLLVIEXT_VIPLL_CLKO_3_SHIFT) | \
	 (((unsigned long)(VIPLL_ENSAT)) << ACRPLLVIEXT_VIPLL_ENSAT_SHIFT) | \
	 (((unsigned long)(VIPLL_FASTEN)) << ACRPLLVIEXT_VIPLL_FASTEN_SHIFT) | \
	 (((unsigned long)(VIPLL_OUTRESET)) << ACRPLLVIEXT_VIPLL_OUTRESET_SHIFT) | \
	 (((unsigned long)(VIPLL_RSTB)) << ACRPLLVIEXT_VIPLL_RSTB_SHIFT) | \
	 (((unsigned long)(VIPLL_NLCKB)) << ACRPLLVIEXT_VIPLL_NLCKB_SHIFT))

/*
 *  ACRPLLAI struct
 */
#define ACRPLLAI_AIPLL_CLKR_SIZE	6
#define ACRPLLAI_AIPLL_CLKR_SHIFT	0
#define ACRPLLAI_AIPLL_CLKR_MASK	0x0000003f
#define ACRPLLAI_GET_AIPLL_CLKR(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_CLKR_MASK) >> ACRPLLAI_AIPLL_CLKR_SHIFT)
#define ACRPLLAI_SET_AIPLL_CLKR(ACRPLLAI, AIPLL_CLKR) { \
	FDL_ASSERT(!((AIPLL_CLKR) & ~((1 << ACRPLLAI_AIPLL_CLKR_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_CLKR_MASK) | (((unsigned long)(AIPLL_CLKR)) << ACRPLLAI_AIPLL_CLKR_SHIFT);\
}
#define ACRPLLAI_AIPLL_CLKF_SIZE	12
#define ACRPLLAI_AIPLL_CLKF_SHIFT	6
#define ACRPLLAI_AIPLL_CLKF_MASK	0x0003ffc0
#define ACRPLLAI_GET_AIPLL_CLKF(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_CLKF_MASK) >> ACRPLLAI_AIPLL_CLKF_SHIFT)
#define ACRPLLAI_SET_AIPLL_CLKF(ACRPLLAI, AIPLL_CLKF) { \
	FDL_ASSERT(!((AIPLL_CLKF) & ~((1 << ACRPLLAI_AIPLL_CLKF_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_CLKF_MASK) | (((unsigned long)(AIPLL_CLKF)) << ACRPLLAI_AIPLL_CLKF_SHIFT);\
}
#define ACRPLLAI_AIPLL_CLKO_0_SIZE	9
#define ACRPLLAI_AIPLL_CLKO_0_SHIFT	18
#define ACRPLLAI_AIPLL_CLKO_0_MASK	0x07fc0000
#define ACRPLLAI_GET_AIPLL_CLKO_0(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_CLKO_0_MASK) >> ACRPLLAI_AIPLL_CLKO_0_SHIFT)
#define ACRPLLAI_SET_AIPLL_CLKO_0(ACRPLLAI, AIPLL_CLKO_0) { \
	FDL_ASSERT(!((AIPLL_CLKO_0) & ~((1 << ACRPLLAI_AIPLL_CLKO_0_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_CLKO_0_MASK) | (((unsigned long)(AIPLL_CLKO_0)) << ACRPLLAI_AIPLL_CLKO_0_SHIFT);\
}
#define ACRPLLAI_AIPLL_BYPVCO_SIZE	1
#define ACRPLLAI_AIPLL_BYPVCO_SHIFT	27
#define ACRPLLAI_AIPLL_BYPVCO_MASK	0x08000000
#define ACRPLLAI_GET_AIPLL_BYPVCO(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_BYPVCO_MASK) >> ACRPLLAI_AIPLL_BYPVCO_SHIFT)
#define ACRPLLAI_SET_AIPLL_BYPVCO(ACRPLLAI, AIPLL_BYPVCO) { \
	FDL_ASSERT(!((AIPLL_BYPVCO) & ~((1 << ACRPLLAI_AIPLL_BYPVCO_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_BYPVCO_MASK) | (((unsigned long)(AIPLL_BYPVCO)) << ACRPLLAI_AIPLL_BYPVCO_SHIFT);\
}
#define ACRPLLAI_AIPLL_BYPOUT_SIZE	1
#define ACRPLLAI_AIPLL_BYPOUT_SHIFT	28
#define ACRPLLAI_AIPLL_BYPOUT_MASK	0x10000000
#define ACRPLLAI_GET_AIPLL_BYPOUT(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_BYPOUT_MASK) >> ACRPLLAI_AIPLL_BYPOUT_SHIFT)
#define ACRPLLAI_SET_AIPLL_BYPOUT(ACRPLLAI, AIPLL_BYPOUT) { \
	FDL_ASSERT(!((AIPLL_BYPOUT) & ~((1 << ACRPLLAI_AIPLL_BYPOUT_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_BYPOUT_MASK) | (((unsigned long)(AIPLL_BYPOUT)) << ACRPLLAI_AIPLL_BYPOUT_SHIFT);\
}
#define ACRPLLAI_AIPLL_PWRDN_SIZE	1
#define ACRPLLAI_AIPLL_PWRDN_SHIFT	29
#define ACRPLLAI_AIPLL_PWRDN_MASK	0x20000000
#define ACRPLLAI_GET_AIPLL_PWRDN(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_PWRDN_MASK) >> ACRPLLAI_AIPLL_PWRDN_SHIFT)
#define ACRPLLAI_SET_AIPLL_PWRDN(ACRPLLAI, AIPLL_PWRDN) { \
	FDL_ASSERT(!((AIPLL_PWRDN) & ~((1 << ACRPLLAI_AIPLL_PWRDN_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_PWRDN_MASK) | (((unsigned long)(AIPLL_PWRDN)) << ACRPLLAI_AIPLL_PWRDN_SHIFT);\
}
#define ACRPLLAI_AIPLL_TEST_SIZE	1
#define ACRPLLAI_AIPLL_TEST_SHIFT	30
#define ACRPLLAI_AIPLL_TEST_MASK	0x40000000
#define ACRPLLAI_GET_AIPLL_TEST(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_TEST_MASK) >> ACRPLLAI_AIPLL_TEST_SHIFT)
#define ACRPLLAI_SET_AIPLL_TEST(ACRPLLAI, AIPLL_TEST) { \
	FDL_ASSERT(!((AIPLL_TEST) & ~((1 << ACRPLLAI_AIPLL_TEST_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_TEST_MASK) | (((unsigned long)(AIPLL_TEST)) << ACRPLLAI_AIPLL_TEST_SHIFT);\
}
#define ACRPLLAI_AIPLL_NLCK_SIZE	1
#define ACRPLLAI_AIPLL_NLCK_SHIFT	31
#define ACRPLLAI_AIPLL_NLCK_MASK	0x80000000
#define ACRPLLAI_GET_AIPLL_NLCK(ACRPLLAI) \
	((((unsigned long)(ACRPLLAI)) & ACRPLLAI_AIPLL_NLCK_MASK) >> ACRPLLAI_AIPLL_NLCK_SHIFT)
#define ACRPLLAI_SET_AIPLL_NLCK(ACRPLLAI, AIPLL_NLCK) { \
	FDL_ASSERT(!((AIPLL_NLCK) & ~((1 << ACRPLLAI_AIPLL_NLCK_SIZE)-1))); \
	ACRPLLAI = (((unsigned long)(ACRPLLAI)) & ~ACRPLLAI_AIPLL_NLCK_MASK) | (((unsigned long)(AIPLL_NLCK)) << ACRPLLAI_AIPLL_NLCK_SHIFT);\
}
#define ACRPLLAI_TOTAL_SIZE	32
#define ACRPLLAI(AIPLL_CLKR, AIPLL_CLKF, AIPLL_CLKO_0, AIPLL_BYPVCO, AIPLL_BYPOUT, AIPLL_PWRDN, AIPLL_TEST, AIPLL_NLCK) \
	((((unsigned long)(AIPLL_CLKR)) << ACRPLLAI_AIPLL_CLKR_SHIFT) | \
	 (((unsigned long)(AIPLL_CLKF)) << ACRPLLAI_AIPLL_CLKF_SHIFT) | \
	 (((unsigned long)(AIPLL_CLKO_0)) << ACRPLLAI_AIPLL_CLKO_0_SHIFT) | \
	 (((unsigned long)(AIPLL_BYPVCO)) << ACRPLLAI_AIPLL_BYPVCO_SHIFT) | \
	 (((unsigned long)(AIPLL_BYPOUT)) << ACRPLLAI_AIPLL_BYPOUT_SHIFT) | \
	 (((unsigned long)(AIPLL_PWRDN)) << ACRPLLAI_AIPLL_PWRDN_SHIFT) | \
	 (((unsigned long)(AIPLL_TEST)) << ACRPLLAI_AIPLL_TEST_SHIFT) | \
	 (((unsigned long)(AIPLL_NLCK)) << ACRPLLAI_AIPLL_NLCK_SHIFT))

/*
 *  ACRPLLAIEXT struct
 */
#define ACRPLLAIEXT_PAD0_SIZE	9
#define ACRPLLAIEXT_PAD0_SHIFT	0
#define ACRPLLAIEXT_PAD0_MASK	0x000001ff
#define ACRPLLAIEXT_GET_PAD0(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_PAD0_MASK) >> ACRPLLAIEXT_PAD0_SHIFT)
#define ACRPLLAIEXT_SET_PAD0(ACRPLLAIEXT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRPLLAIEXT_PAD0_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRPLLAIEXT_PAD0_SHIFT);\
}
#define ACRPLLAIEXT_PAD1_SIZE	9
#define ACRPLLAIEXT_PAD1_SHIFT	9
#define ACRPLLAIEXT_PAD1_MASK	0x0003fe00
#define ACRPLLAIEXT_GET_PAD1(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_PAD1_MASK) >> ACRPLLAIEXT_PAD1_SHIFT)
#define ACRPLLAIEXT_SET_PAD1(ACRPLLAIEXT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRPLLAIEXT_PAD1_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_PAD1_MASK) | (((unsigned long)(pad1)) << ACRPLLAIEXT_PAD1_SHIFT);\
}
#define ACRPLLAIEXT_PAD2_SIZE	9
#define ACRPLLAIEXT_PAD2_SHIFT	18
#define ACRPLLAIEXT_PAD2_MASK	0x07fc0000
#define ACRPLLAIEXT_GET_PAD2(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_PAD2_MASK) >> ACRPLLAIEXT_PAD2_SHIFT)
#define ACRPLLAIEXT_SET_PAD2(ACRPLLAIEXT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << ACRPLLAIEXT_PAD2_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_PAD2_MASK) | (((unsigned long)(pad2)) << ACRPLLAIEXT_PAD2_SHIFT);\
}
#define ACRPLLAIEXT_AIPLL_ENSAT_SIZE	1
#define ACRPLLAIEXT_AIPLL_ENSAT_SHIFT	27
#define ACRPLLAIEXT_AIPLL_ENSAT_MASK	0x08000000
#define ACRPLLAIEXT_GET_AIPLL_ENSAT(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_AIPLL_ENSAT_MASK) >> ACRPLLAIEXT_AIPLL_ENSAT_SHIFT)
#define ACRPLLAIEXT_SET_AIPLL_ENSAT(ACRPLLAIEXT, AIPLL_ENSAT) { \
	FDL_ASSERT(!((AIPLL_ENSAT) & ~((1 << ACRPLLAIEXT_AIPLL_ENSAT_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_AIPLL_ENSAT_MASK) | (((unsigned long)(AIPLL_ENSAT)) << ACRPLLAIEXT_AIPLL_ENSAT_SHIFT);\
}
#define ACRPLLAIEXT_AIPLL_FASTEN_SIZE	1
#define ACRPLLAIEXT_AIPLL_FASTEN_SHIFT	28
#define ACRPLLAIEXT_AIPLL_FASTEN_MASK	0x10000000
#define ACRPLLAIEXT_GET_AIPLL_FASTEN(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_AIPLL_FASTEN_MASK) >> ACRPLLAIEXT_AIPLL_FASTEN_SHIFT)
#define ACRPLLAIEXT_SET_AIPLL_FASTEN(ACRPLLAIEXT, AIPLL_FASTEN) { \
	FDL_ASSERT(!((AIPLL_FASTEN) & ~((1 << ACRPLLAIEXT_AIPLL_FASTEN_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_AIPLL_FASTEN_MASK) | (((unsigned long)(AIPLL_FASTEN)) << ACRPLLAIEXT_AIPLL_FASTEN_SHIFT);\
}
#define ACRPLLAIEXT_AIPLL_OUTRESET_SIZE	1
#define ACRPLLAIEXT_AIPLL_OUTRESET_SHIFT	29
#define ACRPLLAIEXT_AIPLL_OUTRESET_MASK	0x20000000
#define ACRPLLAIEXT_GET_AIPLL_OUTRESET(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_AIPLL_OUTRESET_MASK) >> ACRPLLAIEXT_AIPLL_OUTRESET_SHIFT)
#define ACRPLLAIEXT_SET_AIPLL_OUTRESET(ACRPLLAIEXT, AIPLL_OUTRESET) { \
	FDL_ASSERT(!((AIPLL_OUTRESET) & ~((1 << ACRPLLAIEXT_AIPLL_OUTRESET_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_AIPLL_OUTRESET_MASK) | (((unsigned long)(AIPLL_OUTRESET)) << ACRPLLAIEXT_AIPLL_OUTRESET_SHIFT);\
}
#define ACRPLLAIEXT_AIPLL_RSTB_SIZE	1
#define ACRPLLAIEXT_AIPLL_RSTB_SHIFT	30
#define ACRPLLAIEXT_AIPLL_RSTB_MASK	0x40000000
#define ACRPLLAIEXT_GET_AIPLL_RSTB(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_AIPLL_RSTB_MASK) >> ACRPLLAIEXT_AIPLL_RSTB_SHIFT)
#define ACRPLLAIEXT_SET_AIPLL_RSTB(ACRPLLAIEXT, AIPLL_RSTB) { \
	FDL_ASSERT(!((AIPLL_RSTB) & ~((1 << ACRPLLAIEXT_AIPLL_RSTB_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_AIPLL_RSTB_MASK) | (((unsigned long)(AIPLL_RSTB)) << ACRPLLAIEXT_AIPLL_RSTB_SHIFT);\
}
#define ACRPLLAIEXT_AIPLL_NLCKB_SIZE	1
#define ACRPLLAIEXT_AIPLL_NLCKB_SHIFT	31
#define ACRPLLAIEXT_AIPLL_NLCKB_MASK	0x80000000
#define ACRPLLAIEXT_GET_AIPLL_NLCKB(ACRPLLAIEXT) \
	((((unsigned long)(ACRPLLAIEXT)) & ACRPLLAIEXT_AIPLL_NLCKB_MASK) >> ACRPLLAIEXT_AIPLL_NLCKB_SHIFT)
#define ACRPLLAIEXT_SET_AIPLL_NLCKB(ACRPLLAIEXT, AIPLL_NLCKB) { \
	FDL_ASSERT(!((AIPLL_NLCKB) & ~((1 << ACRPLLAIEXT_AIPLL_NLCKB_SIZE)-1))); \
	ACRPLLAIEXT = (((unsigned long)(ACRPLLAIEXT)) & ~ACRPLLAIEXT_AIPLL_NLCKB_MASK) | (((unsigned long)(AIPLL_NLCKB)) << ACRPLLAIEXT_AIPLL_NLCKB_SHIFT);\
}
#define ACRPLLAIEXT_TOTAL_SIZE	32
#define ACRPLLAIEXT(AIPLL_ENSAT, AIPLL_FASTEN, AIPLL_OUTRESET, AIPLL_RSTB, AIPLL_NLCKB) \
	((((unsigned long)(AIPLL_ENSAT)) << ACRPLLAIEXT_AIPLL_ENSAT_SHIFT) | \
	 (((unsigned long)(AIPLL_FASTEN)) << ACRPLLAIEXT_AIPLL_FASTEN_SHIFT) | \
	 (((unsigned long)(AIPLL_OUTRESET)) << ACRPLLAIEXT_AIPLL_OUTRESET_SHIFT) | \
	 (((unsigned long)(AIPLL_RSTB)) << ACRPLLAIEXT_AIPLL_RSTB_SHIFT) | \
	 (((unsigned long)(AIPLL_NLCKB)) << ACRPLLAIEXT_AIPLL_NLCKB_SHIFT))

/*
 *  ACRPLLUSB struct
 */
#define ACRPLLUSB_USBPLL_CLKR_SIZE	6
#define ACRPLLUSB_USBPLL_CLKR_SHIFT	0
#define ACRPLLUSB_USBPLL_CLKR_MASK	0x0000003f
#define ACRPLLUSB_GET_USBPLL_CLKR(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_CLKR_MASK) >> ACRPLLUSB_USBPLL_CLKR_SHIFT)
#define ACRPLLUSB_SET_USBPLL_CLKR(ACRPLLUSB, USBPLL_CLKR) { \
	FDL_ASSERT(!((USBPLL_CLKR) & ~((1 << ACRPLLUSB_USBPLL_CLKR_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_CLKR_MASK) | (((unsigned long)(USBPLL_CLKR)) << ACRPLLUSB_USBPLL_CLKR_SHIFT);\
}
#define ACRPLLUSB_USBPLL_CLKF_SIZE	12
#define ACRPLLUSB_USBPLL_CLKF_SHIFT	6
#define ACRPLLUSB_USBPLL_CLKF_MASK	0x0003ffc0
#define ACRPLLUSB_GET_USBPLL_CLKF(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_CLKF_MASK) >> ACRPLLUSB_USBPLL_CLKF_SHIFT)
#define ACRPLLUSB_SET_USBPLL_CLKF(ACRPLLUSB, USBPLL_CLKF) { \
	FDL_ASSERT(!((USBPLL_CLKF) & ~((1 << ACRPLLUSB_USBPLL_CLKF_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_CLKF_MASK) | (((unsigned long)(USBPLL_CLKF)) << ACRPLLUSB_USBPLL_CLKF_SHIFT);\
}
#define ACRPLLUSB_USBPLL_CLKO_0_SIZE	9
#define ACRPLLUSB_USBPLL_CLKO_0_SHIFT	18
#define ACRPLLUSB_USBPLL_CLKO_0_MASK	0x07fc0000
#define ACRPLLUSB_GET_USBPLL_CLKO_0(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_CLKO_0_MASK) >> ACRPLLUSB_USBPLL_CLKO_0_SHIFT)
#define ACRPLLUSB_SET_USBPLL_CLKO_0(ACRPLLUSB, USBPLL_CLKO_0) { \
	FDL_ASSERT(!((USBPLL_CLKO_0) & ~((1 << ACRPLLUSB_USBPLL_CLKO_0_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_CLKO_0_MASK) | (((unsigned long)(USBPLL_CLKO_0)) << ACRPLLUSB_USBPLL_CLKO_0_SHIFT);\
}
#define ACRPLLUSB_USBPLL_BYPVCO_SIZE	1
#define ACRPLLUSB_USBPLL_BYPVCO_SHIFT	27
#define ACRPLLUSB_USBPLL_BYPVCO_MASK	0x08000000
#define ACRPLLUSB_GET_USBPLL_BYPVCO(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_BYPVCO_MASK) >> ACRPLLUSB_USBPLL_BYPVCO_SHIFT)
#define ACRPLLUSB_SET_USBPLL_BYPVCO(ACRPLLUSB, USBPLL_BYPVCO) { \
	FDL_ASSERT(!((USBPLL_BYPVCO) & ~((1 << ACRPLLUSB_USBPLL_BYPVCO_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_BYPVCO_MASK) | (((unsigned long)(USBPLL_BYPVCO)) << ACRPLLUSB_USBPLL_BYPVCO_SHIFT);\
}
#define ACRPLLUSB_USBPLL_BYPOUT_SIZE	1
#define ACRPLLUSB_USBPLL_BYPOUT_SHIFT	28
#define ACRPLLUSB_USBPLL_BYPOUT_MASK	0x10000000
#define ACRPLLUSB_GET_USBPLL_BYPOUT(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_BYPOUT_MASK) >> ACRPLLUSB_USBPLL_BYPOUT_SHIFT)
#define ACRPLLUSB_SET_USBPLL_BYPOUT(ACRPLLUSB, USBPLL_BYPOUT) { \
	FDL_ASSERT(!((USBPLL_BYPOUT) & ~((1 << ACRPLLUSB_USBPLL_BYPOUT_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_BYPOUT_MASK) | (((unsigned long)(USBPLL_BYPOUT)) << ACRPLLUSB_USBPLL_BYPOUT_SHIFT);\
}
#define ACRPLLUSB_USBPLL_PWRDN_SIZE	1
#define ACRPLLUSB_USBPLL_PWRDN_SHIFT	29
#define ACRPLLUSB_USBPLL_PWRDN_MASK	0x20000000
#define ACRPLLUSB_GET_USBPLL_PWRDN(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_PWRDN_MASK) >> ACRPLLUSB_USBPLL_PWRDN_SHIFT)
#define ACRPLLUSB_SET_USBPLL_PWRDN(ACRPLLUSB, USBPLL_PWRDN) { \
	FDL_ASSERT(!((USBPLL_PWRDN) & ~((1 << ACRPLLUSB_USBPLL_PWRDN_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_PWRDN_MASK) | (((unsigned long)(USBPLL_PWRDN)) << ACRPLLUSB_USBPLL_PWRDN_SHIFT);\
}
#define ACRPLLUSB_USBPLL_TEST_SIZE	1
#define ACRPLLUSB_USBPLL_TEST_SHIFT	30
#define ACRPLLUSB_USBPLL_TEST_MASK	0x40000000
#define ACRPLLUSB_GET_USBPLL_TEST(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_TEST_MASK) >> ACRPLLUSB_USBPLL_TEST_SHIFT)
#define ACRPLLUSB_SET_USBPLL_TEST(ACRPLLUSB, USBPLL_TEST) { \
	FDL_ASSERT(!((USBPLL_TEST) & ~((1 << ACRPLLUSB_USBPLL_TEST_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_TEST_MASK) | (((unsigned long)(USBPLL_TEST)) << ACRPLLUSB_USBPLL_TEST_SHIFT);\
}
#define ACRPLLUSB_USBPLL_NLCK_SIZE	1
#define ACRPLLUSB_USBPLL_NLCK_SHIFT	31
#define ACRPLLUSB_USBPLL_NLCK_MASK	0x80000000
#define ACRPLLUSB_GET_USBPLL_NLCK(ACRPLLUSB) \
	((((unsigned long)(ACRPLLUSB)) & ACRPLLUSB_USBPLL_NLCK_MASK) >> ACRPLLUSB_USBPLL_NLCK_SHIFT)
#define ACRPLLUSB_SET_USBPLL_NLCK(ACRPLLUSB, USBPLL_NLCK) { \
	FDL_ASSERT(!((USBPLL_NLCK) & ~((1 << ACRPLLUSB_USBPLL_NLCK_SIZE)-1))); \
	ACRPLLUSB = (((unsigned long)(ACRPLLUSB)) & ~ACRPLLUSB_USBPLL_NLCK_MASK) | (((unsigned long)(USBPLL_NLCK)) << ACRPLLUSB_USBPLL_NLCK_SHIFT);\
}
#define ACRPLLUSB_TOTAL_SIZE	32
#define ACRPLLUSB(USBPLL_CLKR, USBPLL_CLKF, USBPLL_CLKO_0, USBPLL_BYPVCO, USBPLL_BYPOUT, USBPLL_PWRDN, USBPLL_TEST, USBPLL_NLCK) \
	((((unsigned long)(USBPLL_CLKR)) << ACRPLLUSB_USBPLL_CLKR_SHIFT) | \
	 (((unsigned long)(USBPLL_CLKF)) << ACRPLLUSB_USBPLL_CLKF_SHIFT) | \
	 (((unsigned long)(USBPLL_CLKO_0)) << ACRPLLUSB_USBPLL_CLKO_0_SHIFT) | \
	 (((unsigned long)(USBPLL_BYPVCO)) << ACRPLLUSB_USBPLL_BYPVCO_SHIFT) | \
	 (((unsigned long)(USBPLL_BYPOUT)) << ACRPLLUSB_USBPLL_BYPOUT_SHIFT) | \
	 (((unsigned long)(USBPLL_PWRDN)) << ACRPLLUSB_USBPLL_PWRDN_SHIFT) | \
	 (((unsigned long)(USBPLL_TEST)) << ACRPLLUSB_USBPLL_TEST_SHIFT) | \
	 (((unsigned long)(USBPLL_NLCK)) << ACRPLLUSB_USBPLL_NLCK_SHIFT))

/*
 *  ACRPLLUSBEXT struct
 */
#define ACRPLLUSBEXT_USBPLL_CLKO_1_SIZE	9
#define ACRPLLUSBEXT_USBPLL_CLKO_1_SHIFT	0
#define ACRPLLUSBEXT_USBPLL_CLKO_1_MASK	0x000001ff
#define ACRPLLUSBEXT_GET_USBPLL_CLKO_1(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_USBPLL_CLKO_1_MASK) >> ACRPLLUSBEXT_USBPLL_CLKO_1_SHIFT)
#define ACRPLLUSBEXT_SET_USBPLL_CLKO_1(ACRPLLUSBEXT, USBPLL_CLKO_1) { \
	FDL_ASSERT(!((USBPLL_CLKO_1) & ~((1 << ACRPLLUSBEXT_USBPLL_CLKO_1_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_USBPLL_CLKO_1_MASK) | (((unsigned long)(USBPLL_CLKO_1)) << ACRPLLUSBEXT_USBPLL_CLKO_1_SHIFT);\
}
#define ACRPLLUSBEXT_PAD0_SIZE	9
#define ACRPLLUSBEXT_PAD0_SHIFT	9
#define ACRPLLUSBEXT_PAD0_MASK	0x0003fe00
#define ACRPLLUSBEXT_GET_PAD0(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_PAD0_MASK) >> ACRPLLUSBEXT_PAD0_SHIFT)
#define ACRPLLUSBEXT_SET_PAD0(ACRPLLUSBEXT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRPLLUSBEXT_PAD0_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRPLLUSBEXT_PAD0_SHIFT);\
}
#define ACRPLLUSBEXT_PAD1_SIZE	9
#define ACRPLLUSBEXT_PAD1_SHIFT	18
#define ACRPLLUSBEXT_PAD1_MASK	0x07fc0000
#define ACRPLLUSBEXT_GET_PAD1(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_PAD1_MASK) >> ACRPLLUSBEXT_PAD1_SHIFT)
#define ACRPLLUSBEXT_SET_PAD1(ACRPLLUSBEXT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRPLLUSBEXT_PAD1_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_PAD1_MASK) | (((unsigned long)(pad1)) << ACRPLLUSBEXT_PAD1_SHIFT);\
}
#define ACRPLLUSBEXT_USBPLL_ENSAT_SIZE	1
#define ACRPLLUSBEXT_USBPLL_ENSAT_SHIFT	27
#define ACRPLLUSBEXT_USBPLL_ENSAT_MASK	0x08000000
#define ACRPLLUSBEXT_GET_USBPLL_ENSAT(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_USBPLL_ENSAT_MASK) >> ACRPLLUSBEXT_USBPLL_ENSAT_SHIFT)
#define ACRPLLUSBEXT_SET_USBPLL_ENSAT(ACRPLLUSBEXT, USBPLL_ENSAT) { \
	FDL_ASSERT(!((USBPLL_ENSAT) & ~((1 << ACRPLLUSBEXT_USBPLL_ENSAT_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_USBPLL_ENSAT_MASK) | (((unsigned long)(USBPLL_ENSAT)) << ACRPLLUSBEXT_USBPLL_ENSAT_SHIFT);\
}
#define ACRPLLUSBEXT_USBPLL_FASTEN_SIZE	1
#define ACRPLLUSBEXT_USBPLL_FASTEN_SHIFT	28
#define ACRPLLUSBEXT_USBPLL_FASTEN_MASK	0x10000000
#define ACRPLLUSBEXT_GET_USBPLL_FASTEN(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_USBPLL_FASTEN_MASK) >> ACRPLLUSBEXT_USBPLL_FASTEN_SHIFT)
#define ACRPLLUSBEXT_SET_USBPLL_FASTEN(ACRPLLUSBEXT, USBPLL_FASTEN) { \
	FDL_ASSERT(!((USBPLL_FASTEN) & ~((1 << ACRPLLUSBEXT_USBPLL_FASTEN_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_USBPLL_FASTEN_MASK) | (((unsigned long)(USBPLL_FASTEN)) << ACRPLLUSBEXT_USBPLL_FASTEN_SHIFT);\
}
#define ACRPLLUSBEXT_USBPLL_OUTRESET_SIZE	1
#define ACRPLLUSBEXT_USBPLL_OUTRESET_SHIFT	29
#define ACRPLLUSBEXT_USBPLL_OUTRESET_MASK	0x20000000
#define ACRPLLUSBEXT_GET_USBPLL_OUTRESET(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_USBPLL_OUTRESET_MASK) >> ACRPLLUSBEXT_USBPLL_OUTRESET_SHIFT)
#define ACRPLLUSBEXT_SET_USBPLL_OUTRESET(ACRPLLUSBEXT, USBPLL_OUTRESET) { \
	FDL_ASSERT(!((USBPLL_OUTRESET) & ~((1 << ACRPLLUSBEXT_USBPLL_OUTRESET_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_USBPLL_OUTRESET_MASK) | (((unsigned long)(USBPLL_OUTRESET)) << ACRPLLUSBEXT_USBPLL_OUTRESET_SHIFT);\
}
#define ACRPLLUSBEXT_USBPLL_RSTB_SIZE	1
#define ACRPLLUSBEXT_USBPLL_RSTB_SHIFT	30
#define ACRPLLUSBEXT_USBPLL_RSTB_MASK	0x40000000
#define ACRPLLUSBEXT_GET_USBPLL_RSTB(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_USBPLL_RSTB_MASK) >> ACRPLLUSBEXT_USBPLL_RSTB_SHIFT)
#define ACRPLLUSBEXT_SET_USBPLL_RSTB(ACRPLLUSBEXT, USBPLL_RSTB) { \
	FDL_ASSERT(!((USBPLL_RSTB) & ~((1 << ACRPLLUSBEXT_USBPLL_RSTB_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_USBPLL_RSTB_MASK) | (((unsigned long)(USBPLL_RSTB)) << ACRPLLUSBEXT_USBPLL_RSTB_SHIFT);\
}
#define ACRPLLUSBEXT_USBPLL_NLCKB_SIZE	1
#define ACRPLLUSBEXT_USBPLL_NLCKB_SHIFT	31
#define ACRPLLUSBEXT_USBPLL_NLCKB_MASK	0x80000000
#define ACRPLLUSBEXT_GET_USBPLL_NLCKB(ACRPLLUSBEXT) \
	((((unsigned long)(ACRPLLUSBEXT)) & ACRPLLUSBEXT_USBPLL_NLCKB_MASK) >> ACRPLLUSBEXT_USBPLL_NLCKB_SHIFT)
#define ACRPLLUSBEXT_SET_USBPLL_NLCKB(ACRPLLUSBEXT, USBPLL_NLCKB) { \
	FDL_ASSERT(!((USBPLL_NLCKB) & ~((1 << ACRPLLUSBEXT_USBPLL_NLCKB_SIZE)-1))); \
	ACRPLLUSBEXT = (((unsigned long)(ACRPLLUSBEXT)) & ~ACRPLLUSBEXT_USBPLL_NLCKB_MASK) | (((unsigned long)(USBPLL_NLCKB)) << ACRPLLUSBEXT_USBPLL_NLCKB_SHIFT);\
}
#define ACRPLLUSBEXT_TOTAL_SIZE	32
#define ACRPLLUSBEXT(USBPLL_CLKO_1, USBPLL_ENSAT, USBPLL_FASTEN, USBPLL_OUTRESET, USBPLL_RSTB, USBPLL_NLCKB) \
	((((unsigned long)(USBPLL_CLKO_1)) << ACRPLLUSBEXT_USBPLL_CLKO_1_SHIFT) | \
	 (((unsigned long)(USBPLL_ENSAT)) << ACRPLLUSBEXT_USBPLL_ENSAT_SHIFT) | \
	 (((unsigned long)(USBPLL_FASTEN)) << ACRPLLUSBEXT_USBPLL_FASTEN_SHIFT) | \
	 (((unsigned long)(USBPLL_OUTRESET)) << ACRPLLUSBEXT_USBPLL_OUTRESET_SHIFT) | \
	 (((unsigned long)(USBPLL_RSTB)) << ACRPLLUSBEXT_USBPLL_RSTB_SHIFT) | \
	 (((unsigned long)(USBPLL_NLCKB)) << ACRPLLUSBEXT_USBPLL_NLCKB_SHIFT))

/*
 *  ACRCOMPAT struct
 */
#define ACRCOMPAT_PI_DEEP3_SIZE	1
#define ACRCOMPAT_PI_DEEP3_SHIFT	0
#define ACRCOMPAT_PI_DEEP3_MASK	0x00000001
#define ACRCOMPAT_GET_PI_DEEP3(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PI_DEEP3_MASK) >> ACRCOMPAT_PI_DEEP3_SHIFT)
#define ACRCOMPAT_SET_PI_DEEP3(ACRCOMPAT, PI_DEEP3) { \
	FDL_ASSERT(!((PI_DEEP3) & ~((1 << ACRCOMPAT_PI_DEEP3_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PI_DEEP3_MASK) | (((unsigned long)(PI_DEEP3)) << ACRCOMPAT_PI_DEEP3_SHIFT);\
}
#define ACRCOMPAT_PI_AHB_DEC_EN_SIZE	1
#define ACRCOMPAT_PI_AHB_DEC_EN_SHIFT	1
#define ACRCOMPAT_PI_AHB_DEC_EN_MASK	0x00000002
#define ACRCOMPAT_GET_PI_AHB_DEC_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PI_AHB_DEC_EN_MASK) >> ACRCOMPAT_PI_AHB_DEC_EN_SHIFT)
#define ACRCOMPAT_SET_PI_AHB_DEC_EN(ACRCOMPAT, PI_AHB_DEC_EN) { \
	FDL_ASSERT(!((PI_AHB_DEC_EN) & ~((1 << ACRCOMPAT_PI_AHB_DEC_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PI_AHB_DEC_EN_MASK) | (((unsigned long)(PI_AHB_DEC_EN)) << ACRCOMPAT_PI_AHB_DEC_EN_SHIFT);\
}
#define ACRCOMPAT_PI_AHB_INT_EN_SIZE	1
#define ACRCOMPAT_PI_AHB_INT_EN_SHIFT	2
#define ACRCOMPAT_PI_AHB_INT_EN_MASK	0x00000004
#define ACRCOMPAT_GET_PI_AHB_INT_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PI_AHB_INT_EN_MASK) >> ACRCOMPAT_PI_AHB_INT_EN_SHIFT)
#define ACRCOMPAT_SET_PI_AHB_INT_EN(ACRCOMPAT, PI_AHB_INT_EN) { \
	FDL_ASSERT(!((PI_AHB_INT_EN) & ~((1 << ACRCOMPAT_PI_AHB_INT_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PI_AHB_INT_EN_MASK) | (((unsigned long)(PI_AHB_INT_EN)) << ACRCOMPAT_PI_AHB_INT_EN_SHIFT);\
}
#define ACRCOMPAT_PI_EXP_ADDR_SIZE	1
#define ACRCOMPAT_PI_EXP_ADDR_SHIFT	3
#define ACRCOMPAT_PI_EXP_ADDR_MASK	0x00000008
#define ACRCOMPAT_GET_PI_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PI_EXP_ADDR_MASK) >> ACRCOMPAT_PI_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_PI_EXP_ADDR(ACRCOMPAT, PI_EXP_ADDR) { \
	FDL_ASSERT(!((PI_EXP_ADDR) & ~((1 << ACRCOMPAT_PI_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PI_EXP_ADDR_MASK) | (((unsigned long)(PI_EXP_ADDR)) << ACRCOMPAT_PI_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_PI_STR_EN_SIZE	1
#define ACRCOMPAT_PI_STR_EN_SHIFT	4
#define ACRCOMPAT_PI_STR_EN_MASK	0x00000010
#define ACRCOMPAT_GET_PI_STR_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PI_STR_EN_MASK) >> ACRCOMPAT_PI_STR_EN_SHIFT)
#define ACRCOMPAT_SET_PI_STR_EN(ACRCOMPAT, PI_STR_EN) { \
	FDL_ASSERT(!((PI_STR_EN) & ~((1 << ACRCOMPAT_PI_STR_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PI_STR_EN_MASK) | (((unsigned long)(PI_STR_EN)) << ACRCOMPAT_PI_STR_EN_SHIFT);\
}
#define ACRCOMPAT_PI_MEMRSTB_EN_SIZE	1
#define ACRCOMPAT_PI_MEMRSTB_EN_SHIFT	5
#define ACRCOMPAT_PI_MEMRSTB_EN_MASK	0x00000020
#define ACRCOMPAT_GET_PI_MEMRSTB_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PI_MEMRSTB_EN_MASK) >> ACRCOMPAT_PI_MEMRSTB_EN_SHIFT)
#define ACRCOMPAT_SET_PI_MEMRSTB_EN(ACRCOMPAT, PI_MEMRSTB_EN) { \
	FDL_ASSERT(!((PI_MEMRSTB_EN) & ~((1 << ACRCOMPAT_PI_MEMRSTB_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PI_MEMRSTB_EN_MASK) | (((unsigned long)(PI_MEMRSTB_EN)) << ACRCOMPAT_PI_MEMRSTB_EN_SHIFT);\
}
#define ACRCOMPAT_PI_DIRSTB_EN_SIZE	1
#define ACRCOMPAT_PI_DIRSTB_EN_SHIFT	6
#define ACRCOMPAT_PI_DIRSTB_EN_MASK	0x00000040
#define ACRCOMPAT_GET_PI_DIRSTB_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PI_DIRSTB_EN_MASK) >> ACRCOMPAT_PI_DIRSTB_EN_SHIFT)
#define ACRCOMPAT_SET_PI_DIRSTB_EN(ACRCOMPAT, PI_DIRSTB_EN) { \
	FDL_ASSERT(!((PI_DIRSTB_EN) & ~((1 << ACRCOMPAT_PI_DIRSTB_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PI_DIRSTB_EN_MASK) | (((unsigned long)(PI_DIRSTB_EN)) << ACRCOMPAT_PI_DIRSTB_EN_SHIFT);\
}
#define ACRCOMPAT_AI_48K_CLK_SIZE	1
#define ACRCOMPAT_AI_48K_CLK_SHIFT	7
#define ACRCOMPAT_AI_48K_CLK_MASK	0x00000080
#define ACRCOMPAT_GET_AI_48K_CLK(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_AI_48K_CLK_MASK) >> ACRCOMPAT_AI_48K_CLK_SHIFT)
#define ACRCOMPAT_SET_AI_48K_CLK(ACRCOMPAT, AI_48K_CLK) { \
	FDL_ASSERT(!((AI_48K_CLK) & ~((1 << ACRCOMPAT_AI_48K_CLK_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_AI_48K_CLK_MASK) | (((unsigned long)(AI_48K_CLK)) << ACRCOMPAT_AI_48K_CLK_SHIFT);\
}
#define ACRCOMPAT_AI_CLK_FIX_SIZE	1
#define ACRCOMPAT_AI_CLK_FIX_SHIFT	8
#define ACRCOMPAT_AI_CLK_FIX_MASK	0x00000100
#define ACRCOMPAT_GET_AI_CLK_FIX(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_AI_CLK_FIX_MASK) >> ACRCOMPAT_AI_CLK_FIX_SHIFT)
#define ACRCOMPAT_SET_AI_CLK_FIX(ACRCOMPAT, AI_CLK_FIX) { \
	FDL_ASSERT(!((AI_CLK_FIX) & ~((1 << ACRCOMPAT_AI_CLK_FIX_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_AI_CLK_FIX_MASK) | (((unsigned long)(AI_CLK_FIX)) << ACRCOMPAT_AI_CLK_FIX_SHIFT);\
}
#define ACRCOMPAT_SI_PRG_DIV_EN_SIZE	1
#define ACRCOMPAT_SI_PRG_DIV_EN_SHIFT	9
#define ACRCOMPAT_SI_PRG_DIV_EN_MASK	0x00000200
#define ACRCOMPAT_GET_SI_PRG_DIV_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_SI_PRG_DIV_EN_MASK) >> ACRCOMPAT_SI_PRG_DIV_EN_SHIFT)
#define ACRCOMPAT_SET_SI_PRG_DIV_EN(ACRCOMPAT, SI_PRG_DIV_EN) { \
	FDL_ASSERT(!((SI_PRG_DIV_EN) & ~((1 << ACRCOMPAT_SI_PRG_DIV_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_SI_PRG_DIV_EN_MASK) | (((unsigned long)(SI_PRG_DIV_EN)) << ACRCOMPAT_SI_PRG_DIV_EN_SHIFT);\
}
#define ACRCOMPAT_EXI_NEW_DIV_EN_SIZE	1
#define ACRCOMPAT_EXI_NEW_DIV_EN_SHIFT	10
#define ACRCOMPAT_EXI_NEW_DIV_EN_MASK	0x00000400
#define ACRCOMPAT_GET_EXI_NEW_DIV_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_EXI_NEW_DIV_EN_MASK) >> ACRCOMPAT_EXI_NEW_DIV_EN_SHIFT)
#define ACRCOMPAT_SET_EXI_NEW_DIV_EN(ACRCOMPAT, EXI_NEW_DIV_EN) { \
	FDL_ASSERT(!((EXI_NEW_DIV_EN) & ~((1 << ACRCOMPAT_EXI_NEW_DIV_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_EXI_NEW_DIV_EN_MASK) | (((unsigned long)(EXI_NEW_DIV_EN)) << ACRCOMPAT_EXI_NEW_DIV_EN_SHIFT);\
}
#define ACRCOMPAT_EXI_EXP_ADDR_SIZE	1
#define ACRCOMPAT_EXI_EXP_ADDR_SHIFT	11
#define ACRCOMPAT_EXI_EXP_ADDR_MASK	0x00000800
#define ACRCOMPAT_GET_EXI_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_EXI_EXP_ADDR_MASK) >> ACRCOMPAT_EXI_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_EXI_EXP_ADDR(ACRCOMPAT, EXI_EXP_ADDR) { \
	FDL_ASSERT(!((EXI_EXP_ADDR) & ~((1 << ACRCOMPAT_EXI_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_EXI_EXP_ADDR_MASK) | (((unsigned long)(EXI_EXP_ADDR)) << ACRCOMPAT_EXI_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_DI_EXP_ADDR_SIZE	1
#define ACRCOMPAT_DI_EXP_ADDR_SHIFT	12
#define ACRCOMPAT_DI_EXP_ADDR_MASK	0x00001000
#define ACRCOMPAT_GET_DI_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_DI_EXP_ADDR_MASK) >> ACRCOMPAT_DI_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_DI_EXP_ADDR(ACRCOMPAT, DI_EXP_ADDR) { \
	FDL_ASSERT(!((DI_EXP_ADDR) & ~((1 << ACRCOMPAT_DI_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_DI_EXP_ADDR_MASK) | (((unsigned long)(DI_EXP_ADDR)) << ACRCOMPAT_DI_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_CP_EXP_ADDR_SIZE	1
#define ACRCOMPAT_CP_EXP_ADDR_SHIFT	13
#define ACRCOMPAT_CP_EXP_ADDR_MASK	0x00002000
#define ACRCOMPAT_GET_CP_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_CP_EXP_ADDR_MASK) >> ACRCOMPAT_CP_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_CP_EXP_ADDR(ACRCOMPAT, CP_EXP_ADDR) { \
	FDL_ASSERT(!((CP_EXP_ADDR) & ~((1 << ACRCOMPAT_CP_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_CP_EXP_ADDR_MASK) | (((unsigned long)(CP_EXP_ADDR)) << ACRCOMPAT_CP_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_TC_EXP_ADDR_SIZE	1
#define ACRCOMPAT_TC_EXP_ADDR_SHIFT	14
#define ACRCOMPAT_TC_EXP_ADDR_MASK	0x00004000
#define ACRCOMPAT_GET_TC_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_TC_EXP_ADDR_MASK) >> ACRCOMPAT_TC_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_TC_EXP_ADDR(ACRCOMPAT, TC_EXP_ADDR) { \
	FDL_ASSERT(!((TC_EXP_ADDR) & ~((1 << ACRCOMPAT_TC_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_TC_EXP_ADDR_MASK) | (((unsigned long)(TC_EXP_ADDR)) << ACRCOMPAT_TC_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_DSP_NEW_MEM_SIZE	1
#define ACRCOMPAT_DSP_NEW_MEM_SHIFT	15
#define ACRCOMPAT_DSP_NEW_MEM_MASK	0x00008000
#define ACRCOMPAT_GET_DSP_NEW_MEM(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_DSP_NEW_MEM_MASK) >> ACRCOMPAT_DSP_NEW_MEM_SHIFT)
#define ACRCOMPAT_SET_DSP_NEW_MEM(ACRCOMPAT, DSP_NEW_MEM) { \
	FDL_ASSERT(!((DSP_NEW_MEM) & ~((1 << ACRCOMPAT_DSP_NEW_MEM_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_DSP_NEW_MEM_MASK) | (((unsigned long)(DSP_NEW_MEM)) << ACRCOMPAT_DSP_NEW_MEM_SHIFT);\
}
#define ACRCOMPAT_DSP_EXP_ADDR_SIZE	1
#define ACRCOMPAT_DSP_EXP_ADDR_SHIFT	16
#define ACRCOMPAT_DSP_EXP_ADDR_MASK	0x00010000
#define ACRCOMPAT_GET_DSP_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_DSP_EXP_ADDR_MASK) >> ACRCOMPAT_DSP_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_DSP_EXP_ADDR(ACRCOMPAT, DSP_EXP_ADDR) { \
	FDL_ASSERT(!((DSP_EXP_ADDR) & ~((1 << ACRCOMPAT_DSP_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_DSP_EXP_ADDR_MASK) | (((unsigned long)(DSP_EXP_ADDR)) << ACRCOMPAT_DSP_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_PE_EXP_ADDR_SIZE	1
#define ACRCOMPAT_PE_EXP_ADDR_SHIFT	17
#define ACRCOMPAT_PE_EXP_ADDR_MASK	0x00020000
#define ACRCOMPAT_GET_PE_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PE_EXP_ADDR_MASK) >> ACRCOMPAT_PE_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_PE_EXP_ADDR(ACRCOMPAT, PE_EXP_ADDR) { \
	FDL_ASSERT(!((PE_EXP_ADDR) & ~((1 << ACRCOMPAT_PE_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PE_EXP_ADDR_MASK) | (((unsigned long)(PE_EXP_ADDR)) << ACRCOMPAT_PE_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_VI_EXP_ADDR_SIZE	1
#define ACRCOMPAT_VI_EXP_ADDR_SHIFT	18
#define ACRCOMPAT_VI_EXP_ADDR_MASK	0x00040000
#define ACRCOMPAT_GET_VI_EXP_ADDR(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_VI_EXP_ADDR_MASK) >> ACRCOMPAT_VI_EXP_ADDR_SHIFT)
#define ACRCOMPAT_SET_VI_EXP_ADDR(ACRCOMPAT, VI_EXP_ADDR) { \
	FDL_ASSERT(!((VI_EXP_ADDR) & ~((1 << ACRCOMPAT_VI_EXP_ADDR_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_VI_EXP_ADDR_MASK) | (((unsigned long)(VI_EXP_ADDR)) << ACRCOMPAT_VI_EXP_ADDR_SHIFT);\
}
#define ACRCOMPAT_EXI_BOOTREG_RWEN_SIZE	1
#define ACRCOMPAT_EXI_BOOTREG_RWEN_SHIFT	19
#define ACRCOMPAT_EXI_BOOTREG_RWEN_MASK	0x00080000
#define ACRCOMPAT_GET_EXI_BOOTREG_RWEN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_EXI_BOOTREG_RWEN_MASK) >> ACRCOMPAT_EXI_BOOTREG_RWEN_SHIFT)
#define ACRCOMPAT_SET_EXI_BOOTREG_RWEN(ACRCOMPAT, EXI_BOOTREG_RWEN) { \
	FDL_ASSERT(!((EXI_BOOTREG_RWEN) & ~((1 << ACRCOMPAT_EXI_BOOTREG_RWEN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_EXI_BOOTREG_RWEN_MASK) | (((unsigned long)(EXI_BOOTREG_RWEN)) << ACRCOMPAT_EXI_BOOTREG_RWEN_SHIFT);\
}
#define ACRCOMPAT_EXI_USE_BOOTREG_SIZE	1
#define ACRCOMPAT_EXI_USE_BOOTREG_SHIFT	20
#define ACRCOMPAT_EXI_USE_BOOTREG_MASK	0x00100000
#define ACRCOMPAT_GET_EXI_USE_BOOTREG(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_EXI_USE_BOOTREG_MASK) >> ACRCOMPAT_EXI_USE_BOOTREG_SHIFT)
#define ACRCOMPAT_SET_EXI_USE_BOOTREG(ACRCOMPAT, EXI_USE_BOOTREG) { \
	FDL_ASSERT(!((EXI_USE_BOOTREG) & ~((1 << ACRCOMPAT_EXI_USE_BOOTREG_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_EXI_USE_BOOTREG_MASK) | (((unsigned long)(EXI_USE_BOOTREG)) << ACRCOMPAT_EXI_USE_BOOTREG_SHIFT);\
}
#define ACRCOMPAT_DI_NODVDRD_EN_SIZE	1
#define ACRCOMPAT_DI_NODVDRD_EN_SHIFT	21
#define ACRCOMPAT_DI_NODVDRD_EN_MASK	0x00200000
#define ACRCOMPAT_GET_DI_NODVDRD_EN(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_DI_NODVDRD_EN_MASK) >> ACRCOMPAT_DI_NODVDRD_EN_SHIFT)
#define ACRCOMPAT_SET_DI_NODVDRD_EN(ACRCOMPAT, DI_NODVDRD_EN) { \
	FDL_ASSERT(!((DI_NODVDRD_EN) & ~((1 << ACRCOMPAT_DI_NODVDRD_EN_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_DI_NODVDRD_EN_MASK) | (((unsigned long)(DI_NODVDRD_EN)) << ACRCOMPAT_DI_NODVDRD_EN_SHIFT);\
}
#define ACRCOMPAT_DI_RSTBUGCOMPAT_SIZE	1
#define ACRCOMPAT_DI_RSTBUGCOMPAT_SHIFT	22
#define ACRCOMPAT_DI_RSTBUGCOMPAT_MASK	0x00400000
#define ACRCOMPAT_GET_DI_RSTBUGCOMPAT(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_DI_RSTBUGCOMPAT_MASK) >> ACRCOMPAT_DI_RSTBUGCOMPAT_SHIFT)
#define ACRCOMPAT_SET_DI_RSTBUGCOMPAT(ACRCOMPAT, DI_RSTBUGCOMPAT) { \
	FDL_ASSERT(!((DI_RSTBUGCOMPAT) & ~((1 << ACRCOMPAT_DI_RSTBUGCOMPAT_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_DI_RSTBUGCOMPAT_MASK) | (((unsigned long)(DI_RSTBUGCOMPAT)) << ACRCOMPAT_DI_RSTBUGCOMPAT_SHIFT);\
}
#define ACRCOMPAT_PAD0_SIZE	9
#define ACRCOMPAT_PAD0_SHIFT	23
#define ACRCOMPAT_PAD0_MASK	0xff800000
#define ACRCOMPAT_GET_PAD0(ACRCOMPAT) \
	((((unsigned long)(ACRCOMPAT)) & ACRCOMPAT_PAD0_MASK) >> ACRCOMPAT_PAD0_SHIFT)
#define ACRCOMPAT_SET_PAD0(ACRCOMPAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRCOMPAT_PAD0_SIZE)-1))); \
	ACRCOMPAT = (((unsigned long)(ACRCOMPAT)) & ~ACRCOMPAT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRCOMPAT_PAD0_SHIFT);\
}
#define ACRCOMPAT_TOTAL_SIZE	32
#define ACRCOMPAT(PI_DEEP3, PI_AHB_DEC_EN, PI_AHB_INT_EN, PI_EXP_ADDR, PI_STR_EN, PI_MEMRSTB_EN, PI_DIRSTB_EN, AI_48K_CLK, AI_CLK_FIX, SI_PRG_DIV_EN, EXI_NEW_DIV_EN, EXI_EXP_ADDR, DI_EXP_ADDR, CP_EXP_ADDR, TC_EXP_ADDR, DSP_NEW_MEM, DSP_EXP_ADDR, PE_EXP_ADDR, VI_EXP_ADDR, EXI_BOOTREG_RWEN, EXI_USE_BOOTREG, DI_NODVDRD_EN, DI_RSTBUGCOMPAT) \
	((((unsigned long)(PI_DEEP3)) << ACRCOMPAT_PI_DEEP3_SHIFT) | \
	 (((unsigned long)(PI_AHB_DEC_EN)) << ACRCOMPAT_PI_AHB_DEC_EN_SHIFT) | \
	 (((unsigned long)(PI_AHB_INT_EN)) << ACRCOMPAT_PI_AHB_INT_EN_SHIFT) | \
	 (((unsigned long)(PI_EXP_ADDR)) << ACRCOMPAT_PI_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(PI_STR_EN)) << ACRCOMPAT_PI_STR_EN_SHIFT) | \
	 (((unsigned long)(PI_MEMRSTB_EN)) << ACRCOMPAT_PI_MEMRSTB_EN_SHIFT) | \
	 (((unsigned long)(PI_DIRSTB_EN)) << ACRCOMPAT_PI_DIRSTB_EN_SHIFT) | \
	 (((unsigned long)(AI_48K_CLK)) << ACRCOMPAT_AI_48K_CLK_SHIFT) | \
	 (((unsigned long)(AI_CLK_FIX)) << ACRCOMPAT_AI_CLK_FIX_SHIFT) | \
	 (((unsigned long)(SI_PRG_DIV_EN)) << ACRCOMPAT_SI_PRG_DIV_EN_SHIFT) | \
	 (((unsigned long)(EXI_NEW_DIV_EN)) << ACRCOMPAT_EXI_NEW_DIV_EN_SHIFT) | \
	 (((unsigned long)(EXI_EXP_ADDR)) << ACRCOMPAT_EXI_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(DI_EXP_ADDR)) << ACRCOMPAT_DI_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(CP_EXP_ADDR)) << ACRCOMPAT_CP_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(TC_EXP_ADDR)) << ACRCOMPAT_TC_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(DSP_NEW_MEM)) << ACRCOMPAT_DSP_NEW_MEM_SHIFT) | \
	 (((unsigned long)(DSP_EXP_ADDR)) << ACRCOMPAT_DSP_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(PE_EXP_ADDR)) << ACRCOMPAT_PE_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(VI_EXP_ADDR)) << ACRCOMPAT_VI_EXP_ADDR_SHIFT) | \
	 (((unsigned long)(EXI_BOOTREG_RWEN)) << ACRCOMPAT_EXI_BOOTREG_RWEN_SHIFT) | \
	 (((unsigned long)(EXI_USE_BOOTREG)) << ACRCOMPAT_EXI_USE_BOOTREG_SHIFT) | \
	 (((unsigned long)(DI_NODVDRD_EN)) << ACRCOMPAT_DI_NODVDRD_EN_SHIFT) | \
	 (((unsigned long)(DI_RSTBUGCOMPAT)) << ACRCOMPAT_DI_RSTBUGCOMPAT_SHIFT))

/*
 *  ACRRSTAHB struct
 */
#define ACRRSTAHB_RSTB_SRN_SIZE	1
#define ACRRSTAHB_RSTB_SRN_SHIFT	0
#define ACRRSTAHB_RSTB_SRN_MASK	0x00000001
#define ACRRSTAHB_GET_RSTB_SRN(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_SRN_MASK) >> ACRRSTAHB_RSTB_SRN_SHIFT)
#define ACRRSTAHB_SET_RSTB_SRN(ACRRSTAHB, RSTB_SRN) { \
	FDL_ASSERT(!((RSTB_SRN) & ~((1 << ACRRSTAHB_RSTB_SRN_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_SRN_MASK) | (((unsigned long)(RSTB_SRN)) << ACRRSTAHB_RSTB_SRN_SHIFT);\
}
#define ACRRSTAHB_RSTB_AES_SIZE	1
#define ACRRSTAHB_RSTB_AES_SHIFT	1
#define ACRRSTAHB_RSTB_AES_MASK	0x00000002
#define ACRRSTAHB_GET_RSTB_AES(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_AES_MASK) >> ACRRSTAHB_RSTB_AES_SHIFT)
#define ACRRSTAHB_SET_RSTB_AES(ACRRSTAHB, RSTB_AES) { \
	FDL_ASSERT(!((RSTB_AES) & ~((1 << ACRRSTAHB_RSTB_AES_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_AES_MASK) | (((unsigned long)(RSTB_AES)) << ACRRSTAHB_RSTB_AES_SHIFT);\
}
#define ACRRSTAHB_RSTB_SHA_SIZE	1
#define ACRRSTAHB_RSTB_SHA_SHIFT	2
#define ACRRSTAHB_RSTB_SHA_MASK	0x00000004
#define ACRRSTAHB_GET_RSTB_SHA(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_SHA_MASK) >> ACRRSTAHB_RSTB_SHA_SHIFT)
#define ACRRSTAHB_SET_RSTB_SHA(ACRRSTAHB, RSTB_SHA) { \
	FDL_ASSERT(!((RSTB_SHA) & ~((1 << ACRRSTAHB_RSTB_SHA_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_SHA_MASK) | (((unsigned long)(RSTB_SHA)) << ACRRSTAHB_RSTB_SHA_SHIFT);\
}
#define ACRRSTAHB_RSTB_FLA_SIZE	1
#define ACRRSTAHB_RSTB_FLA_SHIFT	3
#define ACRRSTAHB_RSTB_FLA_MASK	0x00000008
#define ACRRSTAHB_GET_RSTB_FLA(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_FLA_MASK) >> ACRRSTAHB_RSTB_FLA_SHIFT)
#define ACRRSTAHB_SET_RSTB_FLA(ACRRSTAHB, RSTB_FLA) { \
	FDL_ASSERT(!((RSTB_FLA) & ~((1 << ACRRSTAHB_RSTB_FLA_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_FLA_MASK) | (((unsigned long)(RSTB_FLA)) << ACRRSTAHB_RSTB_FLA_SHIFT);\
}
#define ACRRSTAHB_RSTB_ACR_SIZE	1
#define ACRRSTAHB_RSTB_ACR_SHIFT	4
#define ACRRSTAHB_RSTB_ACR_MASK	0x00000010
#define ACRRSTAHB_GET_RSTB_ACR(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_ACR_MASK) >> ACRRSTAHB_RSTB_ACR_SHIFT)
#define ACRRSTAHB_SET_RSTB_ACR(ACRRSTAHB, RSTB_ACR) { \
	FDL_ASSERT(!((RSTB_ACR) & ~((1 << ACRRSTAHB_RSTB_ACR_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_ACR_MASK) | (((unsigned long)(RSTB_ACR)) << ACRRSTAHB_RSTB_ACR_SHIFT);\
}
#define ACRRSTAHB_RSTB_AIM_SIZE	1
#define ACRRSTAHB_RSTB_AIM_SHIFT	5
#define ACRRSTAHB_RSTB_AIM_MASK	0x00000020
#define ACRRSTAHB_GET_RSTB_AIM(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_AIM_MASK) >> ACRRSTAHB_RSTB_AIM_SHIFT)
#define ACRRSTAHB_SET_RSTB_AIM(ACRRSTAHB, RSTB_AIM) { \
	FDL_ASSERT(!((RSTB_AIM) & ~((1 << ACRRSTAHB_RSTB_AIM_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_AIM_MASK) | (((unsigned long)(RSTB_AIM)) << ACRRSTAHB_RSTB_AIM_SHIFT);\
}
#define ACRRSTAHB_RSTB_AHM_SIZE	1
#define ACRRSTAHB_RSTB_AHM_SHIFT	6
#define ACRRSTAHB_RSTB_AHM_MASK	0x00000040
#define ACRRSTAHB_GET_RSTB_AHM(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_AHM_MASK) >> ACRRSTAHB_RSTB_AHM_SHIFT)
#define ACRRSTAHB_SET_RSTB_AHM(ACRRSTAHB, RSTB_AHM) { \
	FDL_ASSERT(!((RSTB_AHM) & ~((1 << ACRRSTAHB_RSTB_AHM_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_AHM_MASK) | (((unsigned long)(RSTB_AHM)) << ACRRSTAHB_RSTB_AHM_SHIFT);\
}
#define ACRRSTAHB_RSTB_SDI_SIZE	1
#define ACRRSTAHB_RSTB_SDI_SHIFT	7
#define ACRRSTAHB_RSTB_SDI_MASK	0x00000080
#define ACRRSTAHB_GET_RSTB_SDI(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_SDI_MASK) >> ACRRSTAHB_RSTB_SDI_SHIFT)
#define ACRRSTAHB_SET_RSTB_SDI(ACRRSTAHB, RSTB_SDI) { \
	FDL_ASSERT(!((RSTB_SDI) & ~((1 << ACRRSTAHB_RSTB_SDI_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_SDI_MASK) | (((unsigned long)(RSTB_SDI)) << ACRRSTAHB_RSTB_SDI_SHIFT);\
}
#define ACRRSTAHB_RSTB_USB_SIZE	1
#define ACRRSTAHB_RSTB_USB_SHIFT	8
#define ACRRSTAHB_RSTB_USB_MASK	0x00000100
#define ACRRSTAHB_GET_RSTB_USB(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_USB_MASK) >> ACRRSTAHB_RSTB_USB_SHIFT)
#define ACRRSTAHB_SET_RSTB_USB(ACRRSTAHB, RSTB_USB) { \
	FDL_ASSERT(!((RSTB_USB) & ~((1 << ACRRSTAHB_RSTB_USB_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_USB_MASK) | (((unsigned long)(RSTB_USB)) << ACRRSTAHB_RSTB_USB_SHIFT);\
}
#define ACRRSTAHB_RSTB_AHP_SIZE	1
#define ACRRSTAHB_RSTB_AHP_SHIFT	9
#define ACRRSTAHB_RSTB_AHP_MASK	0x00000200
#define ACRRSTAHB_GET_RSTB_AHP(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_AHP_MASK) >> ACRRSTAHB_RSTB_AHP_SHIFT)
#define ACRRSTAHB_SET_RSTB_AHP(ACRRSTAHB, RSTB_AHP) { \
	FDL_ASSERT(!((RSTB_AHP) & ~((1 << ACRRSTAHB_RSTB_AHP_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_AHP_MASK) | (((unsigned long)(RSTB_AHP)) << ACRRSTAHB_RSTB_AHP_SHIFT);\
}
#define ACRRSTAHB_RSTB_ARB_CPU_SIZE	1
#define ACRRSTAHB_RSTB_ARB_CPU_SHIFT	10
#define ACRRSTAHB_RSTB_ARB_CPU_MASK	0x00000400
#define ACRRSTAHB_GET_RSTB_ARB_CPU(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_ARB_CPU_MASK) >> ACRRSTAHB_RSTB_ARB_CPU_SHIFT)
#define ACRRSTAHB_SET_RSTB_ARB_CPU(ACRRSTAHB, RSTB_ARB_CPU) { \
	FDL_ASSERT(!((RSTB_ARB_CPU) & ~((1 << ACRRSTAHB_RSTB_ARB_CPU_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_ARB_CPU_MASK) | (((unsigned long)(RSTB_ARB_CPU)) << ACRRSTAHB_RSTB_ARB_CPU_SHIFT);\
}
#define ACRRSTAHB_RSTB_DEC_CPU_SIZE	1
#define ACRRSTAHB_RSTB_DEC_CPU_SHIFT	11
#define ACRRSTAHB_RSTB_DEC_CPU_MASK	0x00000800
#define ACRRSTAHB_GET_RSTB_DEC_CPU(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_DEC_CPU_MASK) >> ACRRSTAHB_RSTB_DEC_CPU_SHIFT)
#define ACRRSTAHB_SET_RSTB_DEC_CPU(ACRRSTAHB, RSTB_DEC_CPU) { \
	FDL_ASSERT(!((RSTB_DEC_CPU) & ~((1 << ACRRSTAHB_RSTB_DEC_CPU_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_DEC_CPU_MASK) | (((unsigned long)(RSTB_DEC_CPU)) << ACRRSTAHB_RSTB_DEC_CPU_SHIFT);\
}
#define ACRRSTAHB_RSTB_ARB_DMA_SIZE	1
#define ACRRSTAHB_RSTB_ARB_DMA_SHIFT	12
#define ACRRSTAHB_RSTB_ARB_DMA_MASK	0x00001000
#define ACRRSTAHB_GET_RSTB_ARB_DMA(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_ARB_DMA_MASK) >> ACRRSTAHB_RSTB_ARB_DMA_SHIFT)
#define ACRRSTAHB_SET_RSTB_ARB_DMA(ACRRSTAHB, RSTB_ARB_DMA) { \
	FDL_ASSERT(!((RSTB_ARB_DMA) & ~((1 << ACRRSTAHB_RSTB_ARB_DMA_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_ARB_DMA_MASK) | (((unsigned long)(RSTB_ARB_DMA)) << ACRRSTAHB_RSTB_ARB_DMA_SHIFT);\
}
#define ACRRSTAHB_RSTB_DEC_DMA_SIZE	1
#define ACRRSTAHB_RSTB_DEC_DMA_SHIFT	13
#define ACRRSTAHB_RSTB_DEC_DMA_MASK	0x00002000
#define ACRRSTAHB_GET_RSTB_DEC_DMA(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_DEC_DMA_MASK) >> ACRRSTAHB_RSTB_DEC_DMA_SHIFT)
#define ACRRSTAHB_SET_RSTB_DEC_DMA(ACRRSTAHB, RSTB_DEC_DMA) { \
	FDL_ASSERT(!((RSTB_DEC_DMA) & ~((1 << ACRRSTAHB_RSTB_DEC_DMA_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_DEC_DMA_MASK) | (((unsigned long)(RSTB_DEC_DMA)) << ACRRSTAHB_RSTB_DEC_DMA_SHIFT);\
}
#define ACRRSTAHB_RSTB_ELA_SIZE	1
#define ACRRSTAHB_RSTB_ELA_SHIFT	14
#define ACRRSTAHB_RSTB_ELA_MASK	0x00004000
#define ACRRSTAHB_GET_RSTB_ELA(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_ELA_MASK) >> ACRRSTAHB_RSTB_ELA_SHIFT)
#define ACRRSTAHB_SET_RSTB_ELA(ACRRSTAHB, RSTB_ELA) { \
	FDL_ASSERT(!((RSTB_ELA) & ~((1 << ACRRSTAHB_RSTB_ELA_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_ELA_MASK) | (((unsigned long)(RSTB_ELA)) << ACRRSTAHB_RSTB_ELA_SHIFT);\
}
#define ACRRSTAHB_RSTB_WTCHDG_SIZE	1
#define ACRRSTAHB_RSTB_WTCHDG_SHIFT	15
#define ACRRSTAHB_RSTB_WTCHDG_MASK	0x00008000
#define ACRRSTAHB_GET_RSTB_WTCHDG(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_RSTB_WTCHDG_MASK) >> ACRRSTAHB_RSTB_WTCHDG_SHIFT)
#define ACRRSTAHB_SET_RSTB_WTCHDG(ACRRSTAHB, RSTB_WTCHDG) { \
	FDL_ASSERT(!((RSTB_WTCHDG) & ~((1 << ACRRSTAHB_RSTB_WTCHDG_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_RSTB_WTCHDG_MASK) | (((unsigned long)(RSTB_WTCHDG)) << ACRRSTAHB_RSTB_WTCHDG_SHIFT);\
}
#define ACRRSTAHB_PAD0_SIZE	16
#define ACRRSTAHB_PAD0_SHIFT	16
#define ACRRSTAHB_PAD0_MASK	0xffff0000
#define ACRRSTAHB_GET_PAD0(ACRRSTAHB) \
	((((unsigned long)(ACRRSTAHB)) & ACRRSTAHB_PAD0_MASK) >> ACRRSTAHB_PAD0_SHIFT)
#define ACRRSTAHB_SET_PAD0(ACRRSTAHB, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRRSTAHB_PAD0_SIZE)-1))); \
	ACRRSTAHB = (((unsigned long)(ACRRSTAHB)) & ~ACRRSTAHB_PAD0_MASK) | (((unsigned long)(pad0)) << ACRRSTAHB_PAD0_SHIFT);\
}
#define ACRRSTAHB_TOTAL_SIZE	32
#define ACRRSTAHB(RSTB_SRN, RSTB_AES, RSTB_SHA, RSTB_FLA, RSTB_ACR, RSTB_AIM, RSTB_AHM, RSTB_SDI, RSTB_USB, RSTB_AHP, RSTB_ARB_CPU, RSTB_DEC_CPU, RSTB_ARB_DMA, RSTB_DEC_DMA, RSTB_ELA, RSTB_WTCHDG) \
	((((unsigned long)(RSTB_SRN)) << ACRRSTAHB_RSTB_SRN_SHIFT) | \
	 (((unsigned long)(RSTB_AES)) << ACRRSTAHB_RSTB_AES_SHIFT) | \
	 (((unsigned long)(RSTB_SHA)) << ACRRSTAHB_RSTB_SHA_SHIFT) | \
	 (((unsigned long)(RSTB_FLA)) << ACRRSTAHB_RSTB_FLA_SHIFT) | \
	 (((unsigned long)(RSTB_ACR)) << ACRRSTAHB_RSTB_ACR_SHIFT) | \
	 (((unsigned long)(RSTB_AIM)) << ACRRSTAHB_RSTB_AIM_SHIFT) | \
	 (((unsigned long)(RSTB_AHM)) << ACRRSTAHB_RSTB_AHM_SHIFT) | \
	 (((unsigned long)(RSTB_SDI)) << ACRRSTAHB_RSTB_SDI_SHIFT) | \
	 (((unsigned long)(RSTB_USB)) << ACRRSTAHB_RSTB_USB_SHIFT) | \
	 (((unsigned long)(RSTB_AHP)) << ACRRSTAHB_RSTB_AHP_SHIFT) | \
	 (((unsigned long)(RSTB_ARB_CPU)) << ACRRSTAHB_RSTB_ARB_CPU_SHIFT) | \
	 (((unsigned long)(RSTB_DEC_CPU)) << ACRRSTAHB_RSTB_DEC_CPU_SHIFT) | \
	 (((unsigned long)(RSTB_ARB_DMA)) << ACRRSTAHB_RSTB_ARB_DMA_SHIFT) | \
	 (((unsigned long)(RSTB_DEC_DMA)) << ACRRSTAHB_RSTB_DEC_DMA_SHIFT) | \
	 (((unsigned long)(RSTB_ELA)) << ACRRSTAHB_RSTB_ELA_SHIFT) | \
	 (((unsigned long)(RSTB_WTCHDG)) << ACRRSTAHB_RSTB_WTCHDG_SHIFT))

/*
 *  ACRSPARE0 struct
 */
#define ACRSPARE0_AHM_PREFDIS_SIZE	1
#define ACRSPARE0_AHM_PREFDIS_SHIFT	0
#define ACRSPARE0_AHM_PREFDIS_MASK	0x00000001
#define ACRSPARE0_GET_AHM_PREFDIS(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_AHM_PREFDIS_MASK) >> ACRSPARE0_AHM_PREFDIS_SHIFT)
#define ACRSPARE0_SET_AHM_PREFDIS(ACRSPARE0, AHM_PREFDIS) { \
	FDL_ASSERT(!((AHM_PREFDIS) & ~((1 << ACRSPARE0_AHM_PREFDIS_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_AHM_PREFDIS_MASK) | (((unsigned long)(AHM_PREFDIS)) << ACRSPARE0_AHM_PREFDIS_SHIFT);\
}
#define ACRSPARE0_WDG_OUT_DISABLE_SIZE	4
#define ACRSPARE0_WDG_OUT_DISABLE_SHIFT	1
#define ACRSPARE0_WDG_OUT_DISABLE_MASK	0x0000001e
#define ACRSPARE0_GET_WDG_OUT_DISABLE(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_WDG_OUT_DISABLE_MASK) >> ACRSPARE0_WDG_OUT_DISABLE_SHIFT)
#define ACRSPARE0_SET_WDG_OUT_DISABLE(ACRSPARE0, WDG_OUT_DISABLE) { \
	FDL_ASSERT(!((WDG_OUT_DISABLE) & ~((1 << ACRSPARE0_WDG_OUT_DISABLE_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_WDG_OUT_DISABLE_MASK) | (((unsigned long)(WDG_OUT_DISABLE)) << ACRSPARE0_WDG_OUT_DISABLE_SHIFT);\
}
#define ACRSPARE0_AI_64XBCLK_DISABLE_SIZE	1
#define ACRSPARE0_AI_64XBCLK_DISABLE_SHIFT	5
#define ACRSPARE0_AI_64XBCLK_DISABLE_MASK	0x00000020
#define ACRSPARE0_GET_AI_64XBCLK_DISABLE(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_AI_64XBCLK_DISABLE_MASK) >> ACRSPARE0_AI_64XBCLK_DISABLE_SHIFT)
#define ACRSPARE0_SET_AI_64XBCLK_DISABLE(ACRSPARE0, AI_64XBCLK_DISABLE) { \
	FDL_ASSERT(!((AI_64XBCLK_DISABLE) & ~((1 << ACRSPARE0_AI_64XBCLK_DISABLE_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_AI_64XBCLK_DISABLE_MASK) | (((unsigned long)(AI_64XBCLK_DISABLE)) << ACRSPARE0_AI_64XBCLK_DISABLE_SHIFT);\
}
#define ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_SIZE	1
#define ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_SHIFT	6
#define ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_MASK	0x00000040
#define ACRSPARE0_GET_AI_SYNCBOUNDFIX_DISABLE(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_MASK) >> ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_SHIFT)
#define ACRSPARE0_SET_AI_SYNCBOUNDFIX_DISABLE(ACRSPARE0, AI_SYNCBOUNDFIX_DISABLE) { \
	FDL_ASSERT(!((AI_SYNCBOUNDFIX_DISABLE) & ~((1 << ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_MASK) | (((unsigned long)(AI_SYNCBOUNDFIX_DISABLE)) << ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_SHIFT);\
}
#define ACRSPARE0_AIP_DISABLE_FIX532_SIZE	1
#define ACRSPARE0_AIP_DISABLE_FIX532_SHIFT	7
#define ACRSPARE0_AIP_DISABLE_FIX532_MASK	0x00000080
#define ACRSPARE0_GET_AIP_DISABLE_FIX532(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_AIP_DISABLE_FIX532_MASK) >> ACRSPARE0_AIP_DISABLE_FIX532_SHIFT)
#define ACRSPARE0_SET_AIP_DISABLE_FIX532(ACRSPARE0, AIP_DISABLE_FIX532) { \
	FDL_ASSERT(!((AIP_DISABLE_FIX532) & ~((1 << ACRSPARE0_AIP_DISABLE_FIX532_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_AIP_DISABLE_FIX532_MASK) | (((unsigned long)(AIP_DISABLE_FIX532)) << ACRSPARE0_AIP_DISABLE_FIX532_SHIFT);\
}
#define ACRSPARE0_AHM_CF2CHNG_DISABLE_SIZE	8
#define ACRSPARE0_AHM_CF2CHNG_DISABLE_SHIFT	8
#define ACRSPARE0_AHM_CF2CHNG_DISABLE_MASK	0x0000ff00
#define ACRSPARE0_GET_AHM_CF2CHNG_DISABLE(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_AHM_CF2CHNG_DISABLE_MASK) >> ACRSPARE0_AHM_CF2CHNG_DISABLE_SHIFT)
#define ACRSPARE0_SET_AHM_CF2CHNG_DISABLE(ACRSPARE0, AHM_CF2CHNG_DISABLE) { \
	FDL_ASSERT(!((AHM_CF2CHNG_DISABLE) & ~((1 << ACRSPARE0_AHM_CF2CHNG_DISABLE_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_AHM_CF2CHNG_DISABLE_MASK) | (((unsigned long)(AHM_CF2CHNG_DISABLE)) << ACRSPARE0_AHM_CF2CHNG_DISABLE_SHIFT);\
}
#define ACRSPARE0_ARB_FRC_REQ_DMA_SIZE	12
#define ACRSPARE0_ARB_FRC_REQ_DMA_SHIFT	16
#define ACRSPARE0_ARB_FRC_REQ_DMA_MASK	0x0fff0000
#define ACRSPARE0_GET_ARB_FRC_REQ_DMA(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_ARB_FRC_REQ_DMA_MASK) >> ACRSPARE0_ARB_FRC_REQ_DMA_SHIFT)
#define ACRSPARE0_SET_ARB_FRC_REQ_DMA(ACRSPARE0, ARB_FRC_REQ_DMA) { \
	FDL_ASSERT(!((ARB_FRC_REQ_DMA) & ~((1 << ACRSPARE0_ARB_FRC_REQ_DMA_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_ARB_FRC_REQ_DMA_MASK) | (((unsigned long)(ARB_FRC_REQ_DMA)) << ACRSPARE0_ARB_FRC_REQ_DMA_SHIFT);\
}
#define ACRSPARE0_ARB_FRC_REQ_CPU_SIZE	4
#define ACRSPARE0_ARB_FRC_REQ_CPU_SHIFT	28
#define ACRSPARE0_ARB_FRC_REQ_CPU_MASK	0xf0000000
#define ACRSPARE0_GET_ARB_FRC_REQ_CPU(ACRSPARE0) \
	((((unsigned long)(ACRSPARE0)) & ACRSPARE0_ARB_FRC_REQ_CPU_MASK) >> ACRSPARE0_ARB_FRC_REQ_CPU_SHIFT)
#define ACRSPARE0_SET_ARB_FRC_REQ_CPU(ACRSPARE0, ARB_FRC_REQ_CPU) { \
	FDL_ASSERT(!((ARB_FRC_REQ_CPU) & ~((1 << ACRSPARE0_ARB_FRC_REQ_CPU_SIZE)-1))); \
	ACRSPARE0 = (((unsigned long)(ACRSPARE0)) & ~ACRSPARE0_ARB_FRC_REQ_CPU_MASK) | (((unsigned long)(ARB_FRC_REQ_CPU)) << ACRSPARE0_ARB_FRC_REQ_CPU_SHIFT);\
}
#define ACRSPARE0_TOTAL_SIZE	32
#define ACRSPARE0(AHM_PREFDIS, WDG_OUT_DISABLE, AI_64XBCLK_DISABLE, AI_SYNCBOUNDFIX_DISABLE, AIP_DISABLE_FIX532, AHM_CF2CHNG_DISABLE, ARB_FRC_REQ_DMA, ARB_FRC_REQ_CPU) \
	((((unsigned long)(AHM_PREFDIS)) << ACRSPARE0_AHM_PREFDIS_SHIFT) | \
	 (((unsigned long)(WDG_OUT_DISABLE)) << ACRSPARE0_WDG_OUT_DISABLE_SHIFT) | \
	 (((unsigned long)(AI_64XBCLK_DISABLE)) << ACRSPARE0_AI_64XBCLK_DISABLE_SHIFT) | \
	 (((unsigned long)(AI_SYNCBOUNDFIX_DISABLE)) << ACRSPARE0_AI_SYNCBOUNDFIX_DISABLE_SHIFT) | \
	 (((unsigned long)(AIP_DISABLE_FIX532)) << ACRSPARE0_AIP_DISABLE_FIX532_SHIFT) | \
	 (((unsigned long)(AHM_CF2CHNG_DISABLE)) << ACRSPARE0_AHM_CF2CHNG_DISABLE_SHIFT) | \
	 (((unsigned long)(ARB_FRC_REQ_DMA)) << ACRSPARE0_ARB_FRC_REQ_DMA_SHIFT) | \
	 (((unsigned long)(ARB_FRC_REQ_CPU)) << ACRSPARE0_ARB_FRC_REQ_CPU_SHIFT))

/*
 *  ACRSPARE1 struct
 */
#define ACRSPARE1_DMA_HMASTER_SIZE	4
#define ACRSPARE1_DMA_HMASTER_SHIFT	0
#define ACRSPARE1_DMA_HMASTER_MASK	0x0000000f
#define ACRSPARE1_GET_DMA_HMASTER(ACRSPARE1) \
	((((unsigned long)(ACRSPARE1)) & ACRSPARE1_DMA_HMASTER_MASK) >> ACRSPARE1_DMA_HMASTER_SHIFT)
#define ACRSPARE1_SET_DMA_HMASTER(ACRSPARE1, DMA_HMASTER) { \
	FDL_ASSERT(!((DMA_HMASTER) & ~((1 << ACRSPARE1_DMA_HMASTER_SIZE)-1))); \
	ACRSPARE1 = (((unsigned long)(ACRSPARE1)) & ~ACRSPARE1_DMA_HMASTER_MASK) | (((unsigned long)(DMA_HMASTER)) << ACRSPARE1_DMA_HMASTER_SHIFT);\
}
#define ACRSPARE1_CPU_HMASTER_SIZE	4
#define ACRSPARE1_CPU_HMASTER_SHIFT	4
#define ACRSPARE1_CPU_HMASTER_MASK	0x000000f0
#define ACRSPARE1_GET_CPU_HMASTER(ACRSPARE1) \
	((((unsigned long)(ACRSPARE1)) & ACRSPARE1_CPU_HMASTER_MASK) >> ACRSPARE1_CPU_HMASTER_SHIFT)
#define ACRSPARE1_SET_CPU_HMASTER(ACRSPARE1, CPU_HMASTER) { \
	FDL_ASSERT(!((CPU_HMASTER) & ~((1 << ACRSPARE1_CPU_HMASTER_SIZE)-1))); \
	ACRSPARE1 = (((unsigned long)(ACRSPARE1)) & ~ACRSPARE1_CPU_HMASTER_MASK) | (((unsigned long)(CPU_HMASTER)) << ACRSPARE1_CPU_HMASTER_SHIFT);\
}
#define ACRSPARE1_SDI_CF2CHNG_DISABLE_SIZE	2
#define ACRSPARE1_SDI_CF2CHNG_DISABLE_SHIFT	8
#define ACRSPARE1_SDI_CF2CHNG_DISABLE_MASK	0x00000300
#define ACRSPARE1_GET_SDI_CF2CHNG_DISABLE(ACRSPARE1) \
	((((unsigned long)(ACRSPARE1)) & ACRSPARE1_SDI_CF2CHNG_DISABLE_MASK) >> ACRSPARE1_SDI_CF2CHNG_DISABLE_SHIFT)
#define ACRSPARE1_SET_SDI_CF2CHNG_DISABLE(ACRSPARE1, SDI_CF2CHNG_DISABLE) { \
	FDL_ASSERT(!((SDI_CF2CHNG_DISABLE) & ~((1 << ACRSPARE1_SDI_CF2CHNG_DISABLE_SIZE)-1))); \
	ACRSPARE1 = (((unsigned long)(ACRSPARE1)) & ~ACRSPARE1_SDI_CF2CHNG_DISABLE_MASK) | (((unsigned long)(SDI_CF2CHNG_DISABLE)) << ACRSPARE1_SDI_CF2CHNG_DISABLE_SHIFT);\
}
#define ACRSPARE1_RW_BITS_SIZE	6
#define ACRSPARE1_RW_BITS_SHIFT	10
#define ACRSPARE1_RW_BITS_MASK	0x0000fc00
#define ACRSPARE1_GET_RW_BITS(ACRSPARE1) \
	((((unsigned long)(ACRSPARE1)) & ACRSPARE1_RW_BITS_MASK) >> ACRSPARE1_RW_BITS_SHIFT)
#define ACRSPARE1_SET_RW_BITS(ACRSPARE1, RW_BITS) { \
	FDL_ASSERT(!((RW_BITS) & ~((1 << ACRSPARE1_RW_BITS_SIZE)-1))); \
	ACRSPARE1 = (((unsigned long)(ACRSPARE1)) & ~ACRSPARE1_RW_BITS_MASK) | (((unsigned long)(RW_BITS)) << ACRSPARE1_RW_BITS_SHIFT);\
}
#define ACRSPARE1_DMA_FRC_HSPLIT_SIZE	12
#define ACRSPARE1_DMA_FRC_HSPLIT_SHIFT	16
#define ACRSPARE1_DMA_FRC_HSPLIT_MASK	0x0fff0000
#define ACRSPARE1_GET_DMA_FRC_HSPLIT(ACRSPARE1) \
	((((unsigned long)(ACRSPARE1)) & ACRSPARE1_DMA_FRC_HSPLIT_MASK) >> ACRSPARE1_DMA_FRC_HSPLIT_SHIFT)
#define ACRSPARE1_SET_DMA_FRC_HSPLIT(ACRSPARE1, DMA_FRC_HSPLIT) { \
	FDL_ASSERT(!((DMA_FRC_HSPLIT) & ~((1 << ACRSPARE1_DMA_FRC_HSPLIT_SIZE)-1))); \
	ACRSPARE1 = (((unsigned long)(ACRSPARE1)) & ~ACRSPARE1_DMA_FRC_HSPLIT_MASK) | (((unsigned long)(DMA_FRC_HSPLIT)) << ACRSPARE1_DMA_FRC_HSPLIT_SHIFT);\
}
#define ACRSPARE1_CPU_FRC_HSPLIT_SIZE	4
#define ACRSPARE1_CPU_FRC_HSPLIT_SHIFT	28
#define ACRSPARE1_CPU_FRC_HSPLIT_MASK	0xf0000000
#define ACRSPARE1_GET_CPU_FRC_HSPLIT(ACRSPARE1) \
	((((unsigned long)(ACRSPARE1)) & ACRSPARE1_CPU_FRC_HSPLIT_MASK) >> ACRSPARE1_CPU_FRC_HSPLIT_SHIFT)
#define ACRSPARE1_SET_CPU_FRC_HSPLIT(ACRSPARE1, CPU_FRC_HSPLIT) { \
	FDL_ASSERT(!((CPU_FRC_HSPLIT) & ~((1 << ACRSPARE1_CPU_FRC_HSPLIT_SIZE)-1))); \
	ACRSPARE1 = (((unsigned long)(ACRSPARE1)) & ~ACRSPARE1_CPU_FRC_HSPLIT_MASK) | (((unsigned long)(CPU_FRC_HSPLIT)) << ACRSPARE1_CPU_FRC_HSPLIT_SHIFT);\
}
#define ACRSPARE1_TOTAL_SIZE	32
#define ACRSPARE1(DMA_HMASTER, CPU_HMASTER, SDI_CF2CHNG_DISABLE, RW_BITS, DMA_FRC_HSPLIT, CPU_FRC_HSPLIT) \
	((((unsigned long)(DMA_HMASTER)) << ACRSPARE1_DMA_HMASTER_SHIFT) | \
	 (((unsigned long)(CPU_HMASTER)) << ACRSPARE1_CPU_HMASTER_SHIFT) | \
	 (((unsigned long)(SDI_CF2CHNG_DISABLE)) << ACRSPARE1_SDI_CF2CHNG_DISABLE_SHIFT) | \
	 (((unsigned long)(RW_BITS)) << ACRSPARE1_RW_BITS_SHIFT) | \
	 (((unsigned long)(DMA_FRC_HSPLIT)) << ACRSPARE1_DMA_FRC_HSPLIT_SHIFT) | \
	 (((unsigned long)(CPU_FRC_HSPLIT)) << ACRSPARE1_CPU_FRC_HSPLIT_SHIFT))

/*
 *  ACRSPARE2 struct
 */
#define ACRSPARE2_RW_BITS_SIZE	32
#define ACRSPARE2_RW_BITS_SHIFT	0
#define ACRSPARE2_RW_BITS_MASK	0xffffffff
#define ACRSPARE2_GET_RW_BITS(ACRSPARE2) \
	((((unsigned long)(ACRSPARE2)) & ACRSPARE2_RW_BITS_MASK) >> ACRSPARE2_RW_BITS_SHIFT)
#define ACRSPARE2_SET_RW_BITS(ACRSPARE2, RW_BITS) { \
	FDL_ASSERT(!((RW_BITS) & ~((1 << ACRSPARE2_RW_BITS_SIZE)-1))); \
	ACRSPARE2 = (((unsigned long)(ACRSPARE2)) & ~ACRSPARE2_RW_BITS_MASK) | (((unsigned long)(RW_BITS)) << ACRSPARE2_RW_BITS_SHIFT);\
}
#define ACRSPARE2_TOTAL_SIZE	32
#define ACRSPARE2(RW_BITS) \
	((((unsigned long)(RW_BITS)) << ACRSPARE2_RW_BITS_SHIFT))

/*
 *  ACRSPARE3 struct
 */
#define ACRSPARE3_RW_BITS_SIZE	32
#define ACRSPARE3_RW_BITS_SHIFT	0
#define ACRSPARE3_RW_BITS_MASK	0xffffffff
#define ACRSPARE3_GET_RW_BITS(ACRSPARE3) \
	((((unsigned long)(ACRSPARE3)) & ACRSPARE3_RW_BITS_MASK) >> ACRSPARE3_RW_BITS_SHIFT)
#define ACRSPARE3_SET_RW_BITS(ACRSPARE3, RW_BITS) { \
	FDL_ASSERT(!((RW_BITS) & ~((1 << ACRSPARE3_RW_BITS_SIZE)-1))); \
	ACRSPARE3 = (((unsigned long)(ACRSPARE3)) & ~ACRSPARE3_RW_BITS_MASK) | (((unsigned long)(RW_BITS)) << ACRSPARE3_RW_BITS_SHIFT);\
}
#define ACRSPARE3_TOTAL_SIZE	32
#define ACRSPARE3(RW_BITS) \
	((((unsigned long)(RW_BITS)) << ACRSPARE3_RW_BITS_SHIFT))

/*
 *  ACRIOPWRCTRL struct
 */
#define ACRIOPWRCTRL_OE_PI_SIZE	1
#define ACRIOPWRCTRL_OE_PI_SHIFT	0
#define ACRIOPWRCTRL_OE_PI_MASK	0x00000001
#define ACRIOPWRCTRL_GET_OE_PI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_PI_MASK) >> ACRIOPWRCTRL_OE_PI_SHIFT)
#define ACRIOPWRCTRL_SET_OE_PI(ACRIOPWRCTRL, OE_PI) { \
	FDL_ASSERT(!((OE_PI) & ~((1 << ACRIOPWRCTRL_OE_PI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_PI_MASK) | (((unsigned long)(OE_PI)) << ACRIOPWRCTRL_OE_PI_SHIFT);\
}
#define ACRIOPWRCTRL_IE_PI_SIZE	1
#define ACRIOPWRCTRL_IE_PI_SHIFT	1
#define ACRIOPWRCTRL_IE_PI_MASK	0x00000002
#define ACRIOPWRCTRL_GET_IE_PI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_PI_MASK) >> ACRIOPWRCTRL_IE_PI_SHIFT)
#define ACRIOPWRCTRL_SET_IE_PI(ACRIOPWRCTRL, IE_PI) { \
	FDL_ASSERT(!((IE_PI) & ~((1 << ACRIOPWRCTRL_IE_PI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_PI_MASK) | (((unsigned long)(IE_PI)) << ACRIOPWRCTRL_IE_PI_SHIFT);\
}
#define ACRIOPWRCTRL_OE_MEM_SIZE	1
#define ACRIOPWRCTRL_OE_MEM_SHIFT	2
#define ACRIOPWRCTRL_OE_MEM_MASK	0x00000004
#define ACRIOPWRCTRL_GET_OE_MEM(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_MEM_MASK) >> ACRIOPWRCTRL_OE_MEM_SHIFT)
#define ACRIOPWRCTRL_SET_OE_MEM(ACRIOPWRCTRL, OE_MEM) { \
	FDL_ASSERT(!((OE_MEM) & ~((1 << ACRIOPWRCTRL_OE_MEM_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_MEM_MASK) | (((unsigned long)(OE_MEM)) << ACRIOPWRCTRL_OE_MEM_SHIFT);\
}
#define ACRIOPWRCTRL_IE_MEM_SIZE	1
#define ACRIOPWRCTRL_IE_MEM_SHIFT	3
#define ACRIOPWRCTRL_IE_MEM_MASK	0x00000008
#define ACRIOPWRCTRL_GET_IE_MEM(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_MEM_MASK) >> ACRIOPWRCTRL_IE_MEM_SHIFT)
#define ACRIOPWRCTRL_SET_IE_MEM(ACRIOPWRCTRL, IE_MEM) { \
	FDL_ASSERT(!((IE_MEM) & ~((1 << ACRIOPWRCTRL_IE_MEM_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_MEM_MASK) | (((unsigned long)(IE_MEM)) << ACRIOPWRCTRL_IE_MEM_SHIFT);\
}
#define ACRIOPWRCTRL_OE_DDR_SIZE	1
#define ACRIOPWRCTRL_OE_DDR_SHIFT	4
#define ACRIOPWRCTRL_OE_DDR_MASK	0x00000010
#define ACRIOPWRCTRL_GET_OE_DDR(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_DDR_MASK) >> ACRIOPWRCTRL_OE_DDR_SHIFT)
#define ACRIOPWRCTRL_SET_OE_DDR(ACRIOPWRCTRL, OE_DDR) { \
	FDL_ASSERT(!((OE_DDR) & ~((1 << ACRIOPWRCTRL_OE_DDR_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_DDR_MASK) | (((unsigned long)(OE_DDR)) << ACRIOPWRCTRL_OE_DDR_SHIFT);\
}
#define ACRIOPWRCTRL_IE_DDR_SIZE	1
#define ACRIOPWRCTRL_IE_DDR_SHIFT	5
#define ACRIOPWRCTRL_IE_DDR_MASK	0x00000020
#define ACRIOPWRCTRL_GET_IE_DDR(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_DDR_MASK) >> ACRIOPWRCTRL_IE_DDR_SHIFT)
#define ACRIOPWRCTRL_SET_IE_DDR(ACRIOPWRCTRL, IE_DDR) { \
	FDL_ASSERT(!((IE_DDR) & ~((1 << ACRIOPWRCTRL_IE_DDR_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_DDR_MASK) | (((unsigned long)(IE_DDR)) << ACRIOPWRCTRL_IE_DDR_SHIFT);\
}
#define ACRIOPWRCTRL_OE_DI_SIZE	1
#define ACRIOPWRCTRL_OE_DI_SHIFT	6
#define ACRIOPWRCTRL_OE_DI_MASK	0x00000040
#define ACRIOPWRCTRL_GET_OE_DI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_DI_MASK) >> ACRIOPWRCTRL_OE_DI_SHIFT)
#define ACRIOPWRCTRL_SET_OE_DI(ACRIOPWRCTRL, OE_DI) { \
	FDL_ASSERT(!((OE_DI) & ~((1 << ACRIOPWRCTRL_OE_DI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_DI_MASK) | (((unsigned long)(OE_DI)) << ACRIOPWRCTRL_OE_DI_SHIFT);\
}
#define ACRIOPWRCTRL_IE_DI_SIZE	1
#define ACRIOPWRCTRL_IE_DI_SHIFT	7
#define ACRIOPWRCTRL_IE_DI_MASK	0x00000080
#define ACRIOPWRCTRL_GET_IE_DI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_DI_MASK) >> ACRIOPWRCTRL_IE_DI_SHIFT)
#define ACRIOPWRCTRL_SET_IE_DI(ACRIOPWRCTRL, IE_DI) { \
	FDL_ASSERT(!((IE_DI) & ~((1 << ACRIOPWRCTRL_IE_DI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_DI_MASK) | (((unsigned long)(IE_DI)) << ACRIOPWRCTRL_IE_DI_SHIFT);\
}
#define ACRIOPWRCTRL_OE_VI_SIZE	1
#define ACRIOPWRCTRL_OE_VI_SHIFT	8
#define ACRIOPWRCTRL_OE_VI_MASK	0x00000100
#define ACRIOPWRCTRL_GET_OE_VI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_VI_MASK) >> ACRIOPWRCTRL_OE_VI_SHIFT)
#define ACRIOPWRCTRL_SET_OE_VI(ACRIOPWRCTRL, OE_VI) { \
	FDL_ASSERT(!((OE_VI) & ~((1 << ACRIOPWRCTRL_OE_VI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_VI_MASK) | (((unsigned long)(OE_VI)) << ACRIOPWRCTRL_OE_VI_SHIFT);\
}
#define ACRIOPWRCTRL_IE_VI_SIZE	1
#define ACRIOPWRCTRL_IE_VI_SHIFT	9
#define ACRIOPWRCTRL_IE_VI_MASK	0x00000200
#define ACRIOPWRCTRL_GET_IE_VI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_VI_MASK) >> ACRIOPWRCTRL_IE_VI_SHIFT)
#define ACRIOPWRCTRL_SET_IE_VI(ACRIOPWRCTRL, IE_VI) { \
	FDL_ASSERT(!((IE_VI) & ~((1 << ACRIOPWRCTRL_IE_VI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_VI_MASK) | (((unsigned long)(IE_VI)) << ACRIOPWRCTRL_IE_VI_SHIFT);\
}
#define ACRIOPWRCTRL_OE_LCD_SIZE	1
#define ACRIOPWRCTRL_OE_LCD_SHIFT	10
#define ACRIOPWRCTRL_OE_LCD_MASK	0x00000400
#define ACRIOPWRCTRL_GET_OE_LCD(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_LCD_MASK) >> ACRIOPWRCTRL_OE_LCD_SHIFT)
#define ACRIOPWRCTRL_SET_OE_LCD(ACRIOPWRCTRL, OE_LCD) { \
	FDL_ASSERT(!((OE_LCD) & ~((1 << ACRIOPWRCTRL_OE_LCD_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_LCD_MASK) | (((unsigned long)(OE_LCD)) << ACRIOPWRCTRL_OE_LCD_SHIFT);\
}
#define ACRIOPWRCTRL_IE_LCD_SIZE	1
#define ACRIOPWRCTRL_IE_LCD_SHIFT	11
#define ACRIOPWRCTRL_IE_LCD_MASK	0x00000800
#define ACRIOPWRCTRL_GET_IE_LCD(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_LCD_MASK) >> ACRIOPWRCTRL_IE_LCD_SHIFT)
#define ACRIOPWRCTRL_SET_IE_LCD(ACRIOPWRCTRL, IE_LCD) { \
	FDL_ASSERT(!((IE_LCD) & ~((1 << ACRIOPWRCTRL_IE_LCD_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_LCD_MASK) | (((unsigned long)(IE_LCD)) << ACRIOPWRCTRL_IE_LCD_SHIFT);\
}
#define ACRIOPWRCTRL_OE_AI_SIZE	1
#define ACRIOPWRCTRL_OE_AI_SHIFT	12
#define ACRIOPWRCTRL_OE_AI_MASK	0x00001000
#define ACRIOPWRCTRL_GET_OE_AI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_AI_MASK) >> ACRIOPWRCTRL_OE_AI_SHIFT)
#define ACRIOPWRCTRL_SET_OE_AI(ACRIOPWRCTRL, OE_AI) { \
	FDL_ASSERT(!((OE_AI) & ~((1 << ACRIOPWRCTRL_OE_AI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_AI_MASK) | (((unsigned long)(OE_AI)) << ACRIOPWRCTRL_OE_AI_SHIFT);\
}
#define ACRIOPWRCTRL_IE_AI_SIZE	1
#define ACRIOPWRCTRL_IE_AI_SHIFT	13
#define ACRIOPWRCTRL_IE_AI_MASK	0x00002000
#define ACRIOPWRCTRL_GET_IE_AI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_AI_MASK) >> ACRIOPWRCTRL_IE_AI_SHIFT)
#define ACRIOPWRCTRL_SET_IE_AI(ACRIOPWRCTRL, IE_AI) { \
	FDL_ASSERT(!((IE_AI) & ~((1 << ACRIOPWRCTRL_IE_AI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_AI_MASK) | (((unsigned long)(IE_AI)) << ACRIOPWRCTRL_IE_AI_SHIFT);\
}
#define ACRIOPWRCTRL_OE_AIS_SIZE	1
#define ACRIOPWRCTRL_OE_AIS_SHIFT	14
#define ACRIOPWRCTRL_OE_AIS_MASK	0x00004000
#define ACRIOPWRCTRL_GET_OE_AIS(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_AIS_MASK) >> ACRIOPWRCTRL_OE_AIS_SHIFT)
#define ACRIOPWRCTRL_SET_OE_AIS(ACRIOPWRCTRL, OE_AIS) { \
	FDL_ASSERT(!((OE_AIS) & ~((1 << ACRIOPWRCTRL_OE_AIS_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_AIS_MASK) | (((unsigned long)(OE_AIS)) << ACRIOPWRCTRL_OE_AIS_SHIFT);\
}
#define ACRIOPWRCTRL_IE_AIS_SIZE	1
#define ACRIOPWRCTRL_IE_AIS_SHIFT	15
#define ACRIOPWRCTRL_IE_AIS_MASK	0x00008000
#define ACRIOPWRCTRL_GET_IE_AIS(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_AIS_MASK) >> ACRIOPWRCTRL_IE_AIS_SHIFT)
#define ACRIOPWRCTRL_SET_IE_AIS(ACRIOPWRCTRL, IE_AIS) { \
	FDL_ASSERT(!((IE_AIS) & ~((1 << ACRIOPWRCTRL_IE_AIS_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_AIS_MASK) | (((unsigned long)(IE_AIS)) << ACRIOPWRCTRL_IE_AIS_SHIFT);\
}
#define ACRIOPWRCTRL_OE_EXI_SIZE	1
#define ACRIOPWRCTRL_OE_EXI_SHIFT	16
#define ACRIOPWRCTRL_OE_EXI_MASK	0x00010000
#define ACRIOPWRCTRL_GET_OE_EXI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_EXI_MASK) >> ACRIOPWRCTRL_OE_EXI_SHIFT)
#define ACRIOPWRCTRL_SET_OE_EXI(ACRIOPWRCTRL, OE_EXI) { \
	FDL_ASSERT(!((OE_EXI) & ~((1 << ACRIOPWRCTRL_OE_EXI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_EXI_MASK) | (((unsigned long)(OE_EXI)) << ACRIOPWRCTRL_OE_EXI_SHIFT);\
}
#define ACRIOPWRCTRL_IE_EXI_SIZE	1
#define ACRIOPWRCTRL_IE_EXI_SHIFT	17
#define ACRIOPWRCTRL_IE_EXI_MASK	0x00020000
#define ACRIOPWRCTRL_GET_IE_EXI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_EXI_MASK) >> ACRIOPWRCTRL_IE_EXI_SHIFT)
#define ACRIOPWRCTRL_SET_IE_EXI(ACRIOPWRCTRL, IE_EXI) { \
	FDL_ASSERT(!((IE_EXI) & ~((1 << ACRIOPWRCTRL_IE_EXI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_EXI_MASK) | (((unsigned long)(IE_EXI)) << ACRIOPWRCTRL_IE_EXI_SHIFT);\
}
#define ACRIOPWRCTRL_OE_SI_SIZE	1
#define ACRIOPWRCTRL_OE_SI_SHIFT	18
#define ACRIOPWRCTRL_OE_SI_MASK	0x00040000
#define ACRIOPWRCTRL_GET_OE_SI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_SI_MASK) >> ACRIOPWRCTRL_OE_SI_SHIFT)
#define ACRIOPWRCTRL_SET_OE_SI(ACRIOPWRCTRL, OE_SI) { \
	FDL_ASSERT(!((OE_SI) & ~((1 << ACRIOPWRCTRL_OE_SI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_SI_MASK) | (((unsigned long)(OE_SI)) << ACRIOPWRCTRL_OE_SI_SHIFT);\
}
#define ACRIOPWRCTRL_IE_SI_SIZE	1
#define ACRIOPWRCTRL_IE_SI_SHIFT	19
#define ACRIOPWRCTRL_IE_SI_MASK	0x00080000
#define ACRIOPWRCTRL_GET_IE_SI(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_SI_MASK) >> ACRIOPWRCTRL_IE_SI_SHIFT)
#define ACRIOPWRCTRL_SET_IE_SI(ACRIOPWRCTRL, IE_SI) { \
	FDL_ASSERT(!((IE_SI) & ~((1 << ACRIOPWRCTRL_IE_SI_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_SI_MASK) | (((unsigned long)(IE_SI)) << ACRIOPWRCTRL_IE_SI_SHIFT);\
}
#define ACRIOPWRCTRL_OE_SDIO_SIZE	1
#define ACRIOPWRCTRL_OE_SDIO_SHIFT	20
#define ACRIOPWRCTRL_OE_SDIO_MASK	0x00100000
#define ACRIOPWRCTRL_GET_OE_SDIO(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_SDIO_MASK) >> ACRIOPWRCTRL_OE_SDIO_SHIFT)
#define ACRIOPWRCTRL_SET_OE_SDIO(ACRIOPWRCTRL, OE_SDIO) { \
	FDL_ASSERT(!((OE_SDIO) & ~((1 << ACRIOPWRCTRL_OE_SDIO_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_SDIO_MASK) | (((unsigned long)(OE_SDIO)) << ACRIOPWRCTRL_OE_SDIO_SHIFT);\
}
#define ACRIOPWRCTRL_IE_SDIO_SIZE	1
#define ACRIOPWRCTRL_IE_SDIO_SHIFT	21
#define ACRIOPWRCTRL_IE_SDIO_MASK	0x00200000
#define ACRIOPWRCTRL_GET_IE_SDIO(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_SDIO_MASK) >> ACRIOPWRCTRL_IE_SDIO_SHIFT)
#define ACRIOPWRCTRL_SET_IE_SDIO(ACRIOPWRCTRL, IE_SDIO) { \
	FDL_ASSERT(!((IE_SDIO) & ~((1 << ACRIOPWRCTRL_IE_SDIO_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_SDIO_MASK) | (((unsigned long)(IE_SDIO)) << ACRIOPWRCTRL_IE_SDIO_SHIFT);\
}
#define ACRIOPWRCTRL_OE_FLASH_SIZE	1
#define ACRIOPWRCTRL_OE_FLASH_SHIFT	22
#define ACRIOPWRCTRL_OE_FLASH_MASK	0x00400000
#define ACRIOPWRCTRL_GET_OE_FLASH(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_FLASH_MASK) >> ACRIOPWRCTRL_OE_FLASH_SHIFT)
#define ACRIOPWRCTRL_SET_OE_FLASH(ACRIOPWRCTRL, OE_FLASH) { \
	FDL_ASSERT(!((OE_FLASH) & ~((1 << ACRIOPWRCTRL_OE_FLASH_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_FLASH_MASK) | (((unsigned long)(OE_FLASH)) << ACRIOPWRCTRL_OE_FLASH_SHIFT);\
}
#define ACRIOPWRCTRL_IE_FLASH_SIZE	1
#define ACRIOPWRCTRL_IE_FLASH_SHIFT	23
#define ACRIOPWRCTRL_IE_FLASH_MASK	0x00800000
#define ACRIOPWRCTRL_GET_IE_FLASH(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_FLASH_MASK) >> ACRIOPWRCTRL_IE_FLASH_SHIFT)
#define ACRIOPWRCTRL_SET_IE_FLASH(ACRIOPWRCTRL, IE_FLASH) { \
	FDL_ASSERT(!((IE_FLASH) & ~((1 << ACRIOPWRCTRL_IE_FLASH_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_FLASH_MASK) | (((unsigned long)(IE_FLASH)) << ACRIOPWRCTRL_IE_FLASH_SHIFT);\
}
#define ACRIOPWRCTRL_OE_GPIO_SIZE	1
#define ACRIOPWRCTRL_OE_GPIO_SHIFT	24
#define ACRIOPWRCTRL_OE_GPIO_MASK	0x01000000
#define ACRIOPWRCTRL_GET_OE_GPIO(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_GPIO_MASK) >> ACRIOPWRCTRL_OE_GPIO_SHIFT)
#define ACRIOPWRCTRL_SET_OE_GPIO(ACRIOPWRCTRL, OE_GPIO) { \
	FDL_ASSERT(!((OE_GPIO) & ~((1 << ACRIOPWRCTRL_OE_GPIO_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_GPIO_MASK) | (((unsigned long)(OE_GPIO)) << ACRIOPWRCTRL_OE_GPIO_SHIFT);\
}
#define ACRIOPWRCTRL_IE_GPIO_SIZE	1
#define ACRIOPWRCTRL_IE_GPIO_SHIFT	25
#define ACRIOPWRCTRL_IE_GPIO_MASK	0x02000000
#define ACRIOPWRCTRL_GET_IE_GPIO(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_GPIO_MASK) >> ACRIOPWRCTRL_IE_GPIO_SHIFT)
#define ACRIOPWRCTRL_SET_IE_GPIO(ACRIOPWRCTRL, IE_GPIO) { \
	FDL_ASSERT(!((IE_GPIO) & ~((1 << ACRIOPWRCTRL_IE_GPIO_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_GPIO_MASK) | (((unsigned long)(IE_GPIO)) << ACRIOPWRCTRL_IE_GPIO_SHIFT);\
}
#define ACRIOPWRCTRL_OE_GPIOLV_SIZE	1
#define ACRIOPWRCTRL_OE_GPIOLV_SHIFT	26
#define ACRIOPWRCTRL_OE_GPIOLV_MASK	0x04000000
#define ACRIOPWRCTRL_GET_OE_GPIOLV(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_OE_GPIOLV_MASK) >> ACRIOPWRCTRL_OE_GPIOLV_SHIFT)
#define ACRIOPWRCTRL_SET_OE_GPIOLV(ACRIOPWRCTRL, OE_GPIOLV) { \
	FDL_ASSERT(!((OE_GPIOLV) & ~((1 << ACRIOPWRCTRL_OE_GPIOLV_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_OE_GPIOLV_MASK) | (((unsigned long)(OE_GPIOLV)) << ACRIOPWRCTRL_OE_GPIOLV_SHIFT);\
}
#define ACRIOPWRCTRL_IE_GPIOLV_SIZE	1
#define ACRIOPWRCTRL_IE_GPIOLV_SHIFT	27
#define ACRIOPWRCTRL_IE_GPIOLV_MASK	0x08000000
#define ACRIOPWRCTRL_GET_IE_GPIOLV(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_IE_GPIOLV_MASK) >> ACRIOPWRCTRL_IE_GPIOLV_SHIFT)
#define ACRIOPWRCTRL_SET_IE_GPIOLV(ACRIOPWRCTRL, IE_GPIOLV) { \
	FDL_ASSERT(!((IE_GPIOLV) & ~((1 << ACRIOPWRCTRL_IE_GPIOLV_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_IE_GPIOLV_MASK) | (((unsigned long)(IE_GPIOLV)) << ACRIOPWRCTRL_IE_GPIOLV_SHIFT);\
}
#define ACRIOPWRCTRL_PAD0_SIZE	4
#define ACRIOPWRCTRL_PAD0_SHIFT	28
#define ACRIOPWRCTRL_PAD0_MASK	0xf0000000
#define ACRIOPWRCTRL_GET_PAD0(ACRIOPWRCTRL) \
	((((unsigned long)(ACRIOPWRCTRL)) & ACRIOPWRCTRL_PAD0_MASK) >> ACRIOPWRCTRL_PAD0_SHIFT)
#define ACRIOPWRCTRL_SET_PAD0(ACRIOPWRCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRIOPWRCTRL_PAD0_SIZE)-1))); \
	ACRIOPWRCTRL = (((unsigned long)(ACRIOPWRCTRL)) & ~ACRIOPWRCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACRIOPWRCTRL_PAD0_SHIFT);\
}
#define ACRIOPWRCTRL_TOTAL_SIZE	32
#define ACRIOPWRCTRL(OE_PI, IE_PI, OE_MEM, IE_MEM, OE_DDR, IE_DDR, OE_DI, IE_DI, OE_VI, IE_VI, OE_LCD, IE_LCD, OE_AI, IE_AI, OE_AIS, IE_AIS, OE_EXI, IE_EXI, OE_SI, IE_SI, OE_SDIO, IE_SDIO, OE_FLASH, IE_FLASH, OE_GPIO, IE_GPIO, OE_GPIOLV, IE_GPIOLV) \
	((((unsigned long)(OE_PI)) << ACRIOPWRCTRL_OE_PI_SHIFT) | \
	 (((unsigned long)(IE_PI)) << ACRIOPWRCTRL_IE_PI_SHIFT) | \
	 (((unsigned long)(OE_MEM)) << ACRIOPWRCTRL_OE_MEM_SHIFT) | \
	 (((unsigned long)(IE_MEM)) << ACRIOPWRCTRL_IE_MEM_SHIFT) | \
	 (((unsigned long)(OE_DDR)) << ACRIOPWRCTRL_OE_DDR_SHIFT) | \
	 (((unsigned long)(IE_DDR)) << ACRIOPWRCTRL_IE_DDR_SHIFT) | \
	 (((unsigned long)(OE_DI)) << ACRIOPWRCTRL_OE_DI_SHIFT) | \
	 (((unsigned long)(IE_DI)) << ACRIOPWRCTRL_IE_DI_SHIFT) | \
	 (((unsigned long)(OE_VI)) << ACRIOPWRCTRL_OE_VI_SHIFT) | \
	 (((unsigned long)(IE_VI)) << ACRIOPWRCTRL_IE_VI_SHIFT) | \
	 (((unsigned long)(OE_LCD)) << ACRIOPWRCTRL_OE_LCD_SHIFT) | \
	 (((unsigned long)(IE_LCD)) << ACRIOPWRCTRL_IE_LCD_SHIFT) | \
	 (((unsigned long)(OE_AI)) << ACRIOPWRCTRL_OE_AI_SHIFT) | \
	 (((unsigned long)(IE_AI)) << ACRIOPWRCTRL_IE_AI_SHIFT) | \
	 (((unsigned long)(OE_AIS)) << ACRIOPWRCTRL_OE_AIS_SHIFT) | \
	 (((unsigned long)(IE_AIS)) << ACRIOPWRCTRL_IE_AIS_SHIFT) | \
	 (((unsigned long)(OE_EXI)) << ACRIOPWRCTRL_OE_EXI_SHIFT) | \
	 (((unsigned long)(IE_EXI)) << ACRIOPWRCTRL_IE_EXI_SHIFT) | \
	 (((unsigned long)(OE_SI)) << ACRIOPWRCTRL_OE_SI_SHIFT) | \
	 (((unsigned long)(IE_SI)) << ACRIOPWRCTRL_IE_SI_SHIFT) | \
	 (((unsigned long)(OE_SDIO)) << ACRIOPWRCTRL_OE_SDIO_SHIFT) | \
	 (((unsigned long)(IE_SDIO)) << ACRIOPWRCTRL_IE_SDIO_SHIFT) | \
	 (((unsigned long)(OE_FLASH)) << ACRIOPWRCTRL_OE_FLASH_SHIFT) | \
	 (((unsigned long)(IE_FLASH)) << ACRIOPWRCTRL_IE_FLASH_SHIFT) | \
	 (((unsigned long)(OE_GPIO)) << ACRIOPWRCTRL_OE_GPIO_SHIFT) | \
	 (((unsigned long)(IE_GPIO)) << ACRIOPWRCTRL_IE_GPIO_SHIFT) | \
	 (((unsigned long)(OE_GPIOLV)) << ACRIOPWRCTRL_OE_GPIOLV_SHIFT) | \
	 (((unsigned long)(IE_GPIOLV)) << ACRIOPWRCTRL_IE_GPIOLV_SHIFT))

/*
 *  ACRIOSTRCTRL0 struct
 */
#define ACRIOSTRCTRL0_AI_SIZE	3
#define ACRIOSTRCTRL0_AI_SHIFT	0
#define ACRIOSTRCTRL0_AI_MASK	0x00000007
#define ACRIOSTRCTRL0_GET_AI(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_AI_MASK) >> ACRIOSTRCTRL0_AI_SHIFT)
#define ACRIOSTRCTRL0_SET_AI(ACRIOSTRCTRL0, AI) { \
	FDL_ASSERT(!((AI) & ~((1 << ACRIOSTRCTRL0_AI_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_AI_MASK) | (((unsigned long)(AI)) << ACRIOSTRCTRL0_AI_SHIFT);\
}
#define ACRIOSTRCTRL0_AIS_SIZE	3
#define ACRIOSTRCTRL0_AIS_SHIFT	3
#define ACRIOSTRCTRL0_AIS_MASK	0x00000038
#define ACRIOSTRCTRL0_GET_AIS(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_AIS_MASK) >> ACRIOSTRCTRL0_AIS_SHIFT)
#define ACRIOSTRCTRL0_SET_AIS(ACRIOSTRCTRL0, AIS) { \
	FDL_ASSERT(!((AIS) & ~((1 << ACRIOSTRCTRL0_AIS_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_AIS_MASK) | (((unsigned long)(AIS)) << ACRIOSTRCTRL0_AIS_SHIFT);\
}
#define ACRIOSTRCTRL0_SI_SIZE	3
#define ACRIOSTRCTRL0_SI_SHIFT	6
#define ACRIOSTRCTRL0_SI_MASK	0x000001c0
#define ACRIOSTRCTRL0_GET_SI(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_SI_MASK) >> ACRIOSTRCTRL0_SI_SHIFT)
#define ACRIOSTRCTRL0_SET_SI(ACRIOSTRCTRL0, SI) { \
	FDL_ASSERT(!((SI) & ~((1 << ACRIOSTRCTRL0_SI_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_SI_MASK) | (((unsigned long)(SI)) << ACRIOSTRCTRL0_SI_SHIFT);\
}
#define ACRIOSTRCTRL0_EXI2_SIZE	3
#define ACRIOSTRCTRL0_EXI2_SHIFT	9
#define ACRIOSTRCTRL0_EXI2_MASK	0x00000e00
#define ACRIOSTRCTRL0_GET_EXI2(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_EXI2_MASK) >> ACRIOSTRCTRL0_EXI2_SHIFT)
#define ACRIOSTRCTRL0_SET_EXI2(ACRIOSTRCTRL0, EXI2) { \
	FDL_ASSERT(!((EXI2) & ~((1 << ACRIOSTRCTRL0_EXI2_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_EXI2_MASK) | (((unsigned long)(EXI2)) << ACRIOSTRCTRL0_EXI2_SHIFT);\
}
#define ACRIOSTRCTRL0_EXI1_SIZE	3
#define ACRIOSTRCTRL0_EXI1_SHIFT	12
#define ACRIOSTRCTRL0_EXI1_MASK	0x00007000
#define ACRIOSTRCTRL0_GET_EXI1(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_EXI1_MASK) >> ACRIOSTRCTRL0_EXI1_SHIFT)
#define ACRIOSTRCTRL0_SET_EXI1(ACRIOSTRCTRL0, EXI1) { \
	FDL_ASSERT(!((EXI1) & ~((1 << ACRIOSTRCTRL0_EXI1_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_EXI1_MASK) | (((unsigned long)(EXI1)) << ACRIOSTRCTRL0_EXI1_SHIFT);\
}
#define ACRIOSTRCTRL0_EXI0_SIZE	3
#define ACRIOSTRCTRL0_EXI0_SHIFT	15
#define ACRIOSTRCTRL0_EXI0_MASK	0x00038000
#define ACRIOSTRCTRL0_GET_EXI0(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_EXI0_MASK) >> ACRIOSTRCTRL0_EXI0_SHIFT)
#define ACRIOSTRCTRL0_SET_EXI0(ACRIOSTRCTRL0, EXI0) { \
	FDL_ASSERT(!((EXI0) & ~((1 << ACRIOSTRCTRL0_EXI0_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_EXI0_MASK) | (((unsigned long)(EXI0)) << ACRIOSTRCTRL0_EXI0_SHIFT);\
}
#define ACRIOSTRCTRL0_DI_SIZE	3
#define ACRIOSTRCTRL0_DI_SHIFT	18
#define ACRIOSTRCTRL0_DI_MASK	0x001c0000
#define ACRIOSTRCTRL0_GET_DI(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_DI_MASK) >> ACRIOSTRCTRL0_DI_SHIFT)
#define ACRIOSTRCTRL0_SET_DI(ACRIOSTRCTRL0, DI) { \
	FDL_ASSERT(!((DI) & ~((1 << ACRIOSTRCTRL0_DI_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_DI_MASK) | (((unsigned long)(DI)) << ACRIOSTRCTRL0_DI_SHIFT);\
}
#define ACRIOSTRCTRL0_VI_SIZE	3
#define ACRIOSTRCTRL0_VI_SHIFT	21
#define ACRIOSTRCTRL0_VI_MASK	0x00e00000
#define ACRIOSTRCTRL0_GET_VI(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_VI_MASK) >> ACRIOSTRCTRL0_VI_SHIFT)
#define ACRIOSTRCTRL0_SET_VI(ACRIOSTRCTRL0, VI) { \
	FDL_ASSERT(!((VI) & ~((1 << ACRIOSTRCTRL0_VI_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_VI_MASK) | (((unsigned long)(VI)) << ACRIOSTRCTRL0_VI_SHIFT);\
}
#define ACRIOSTRCTRL0_PAD0_SIZE	8
#define ACRIOSTRCTRL0_PAD0_SHIFT	24
#define ACRIOSTRCTRL0_PAD0_MASK	0xff000000
#define ACRIOSTRCTRL0_GET_PAD0(ACRIOSTRCTRL0) \
	((((unsigned long)(ACRIOSTRCTRL0)) & ACRIOSTRCTRL0_PAD0_MASK) >> ACRIOSTRCTRL0_PAD0_SHIFT)
#define ACRIOSTRCTRL0_SET_PAD0(ACRIOSTRCTRL0, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRIOSTRCTRL0_PAD0_SIZE)-1))); \
	ACRIOSTRCTRL0 = (((unsigned long)(ACRIOSTRCTRL0)) & ~ACRIOSTRCTRL0_PAD0_MASK) | (((unsigned long)(pad0)) << ACRIOSTRCTRL0_PAD0_SHIFT);\
}
#define ACRIOSTRCTRL0_TOTAL_SIZE	32
#define ACRIOSTRCTRL0(AI, AIS, SI, EXI2, EXI1, EXI0, DI, VI) \
	((((unsigned long)(AI)) << ACRIOSTRCTRL0_AI_SHIFT) | \
	 (((unsigned long)(AIS)) << ACRIOSTRCTRL0_AIS_SHIFT) | \
	 (((unsigned long)(SI)) << ACRIOSTRCTRL0_SI_SHIFT) | \
	 (((unsigned long)(EXI2)) << ACRIOSTRCTRL0_EXI2_SHIFT) | \
	 (((unsigned long)(EXI1)) << ACRIOSTRCTRL0_EXI1_SHIFT) | \
	 (((unsigned long)(EXI0)) << ACRIOSTRCTRL0_EXI0_SHIFT) | \
	 (((unsigned long)(DI)) << ACRIOSTRCTRL0_DI_SHIFT) | \
	 (((unsigned long)(VI)) << ACRIOSTRCTRL0_VI_SHIFT))

/*
 *  ACRIOSTRCTRL1 struct
 */
#define ACRIOSTRCTRL1_P_PI_SIZE	3
#define ACRIOSTRCTRL1_P_PI_SHIFT	0
#define ACRIOSTRCTRL1_P_PI_MASK	0x00000007
#define ACRIOSTRCTRL1_GET_P_PI(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_P_PI_MASK) >> ACRIOSTRCTRL1_P_PI_SHIFT)
#define ACRIOSTRCTRL1_SET_P_PI(ACRIOSTRCTRL1, P_PI) { \
	FDL_ASSERT(!((P_PI) & ~((1 << ACRIOSTRCTRL1_P_PI_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_P_PI_MASK) | (((unsigned long)(P_PI)) << ACRIOSTRCTRL1_P_PI_SHIFT);\
}
#define ACRIOSTRCTRL1_N_PI_SIZE	3
#define ACRIOSTRCTRL1_N_PI_SHIFT	3
#define ACRIOSTRCTRL1_N_PI_MASK	0x00000038
#define ACRIOSTRCTRL1_GET_N_PI(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_N_PI_MASK) >> ACRIOSTRCTRL1_N_PI_SHIFT)
#define ACRIOSTRCTRL1_SET_N_PI(ACRIOSTRCTRL1, N_PI) { \
	FDL_ASSERT(!((N_PI) & ~((1 << ACRIOSTRCTRL1_N_PI_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_N_PI_MASK) | (((unsigned long)(N_PI)) << ACRIOSTRCTRL1_N_PI_SHIFT);\
}
#define ACRIOSTRCTRL1_P_LCD_SIZE	3
#define ACRIOSTRCTRL1_P_LCD_SHIFT	6
#define ACRIOSTRCTRL1_P_LCD_MASK	0x000001c0
#define ACRIOSTRCTRL1_GET_P_LCD(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_P_LCD_MASK) >> ACRIOSTRCTRL1_P_LCD_SHIFT)
#define ACRIOSTRCTRL1_SET_P_LCD(ACRIOSTRCTRL1, P_LCD) { \
	FDL_ASSERT(!((P_LCD) & ~((1 << ACRIOSTRCTRL1_P_LCD_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_P_LCD_MASK) | (((unsigned long)(P_LCD)) << ACRIOSTRCTRL1_P_LCD_SHIFT);\
}
#define ACRIOSTRCTRL1_N_LCD_SIZE	3
#define ACRIOSTRCTRL1_N_LCD_SHIFT	9
#define ACRIOSTRCTRL1_N_LCD_MASK	0x00000e00
#define ACRIOSTRCTRL1_GET_N_LCD(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_N_LCD_MASK) >> ACRIOSTRCTRL1_N_LCD_SHIFT)
#define ACRIOSTRCTRL1_SET_N_LCD(ACRIOSTRCTRL1, N_LCD) { \
	FDL_ASSERT(!((N_LCD) & ~((1 << ACRIOSTRCTRL1_N_LCD_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_N_LCD_MASK) | (((unsigned long)(N_LCD)) << ACRIOSTRCTRL1_N_LCD_SHIFT);\
}
#define ACRIOSTRCTRL1_FLASH_SIZE	3
#define ACRIOSTRCTRL1_FLASH_SHIFT	12
#define ACRIOSTRCTRL1_FLASH_MASK	0x00007000
#define ACRIOSTRCTRL1_GET_FLASH(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_FLASH_MASK) >> ACRIOSTRCTRL1_FLASH_SHIFT)
#define ACRIOSTRCTRL1_SET_FLASH(ACRIOSTRCTRL1, FLASH) { \
	FDL_ASSERT(!((FLASH) & ~((1 << ACRIOSTRCTRL1_FLASH_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_FLASH_MASK) | (((unsigned long)(FLASH)) << ACRIOSTRCTRL1_FLASH_SHIFT);\
}
#define ACRIOSTRCTRL1_GPIO_SIZE	3
#define ACRIOSTRCTRL1_GPIO_SHIFT	15
#define ACRIOSTRCTRL1_GPIO_MASK	0x00038000
#define ACRIOSTRCTRL1_GET_GPIO(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_GPIO_MASK) >> ACRIOSTRCTRL1_GPIO_SHIFT)
#define ACRIOSTRCTRL1_SET_GPIO(ACRIOSTRCTRL1, GPIO) { \
	FDL_ASSERT(!((GPIO) & ~((1 << ACRIOSTRCTRL1_GPIO_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_GPIO_MASK) | (((unsigned long)(GPIO)) << ACRIOSTRCTRL1_GPIO_SHIFT);\
}
#define ACRIOSTRCTRL1_GPIOLV_SIZE	3
#define ACRIOSTRCTRL1_GPIOLV_SHIFT	18
#define ACRIOSTRCTRL1_GPIOLV_MASK	0x001c0000
#define ACRIOSTRCTRL1_GET_GPIOLV(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_GPIOLV_MASK) >> ACRIOSTRCTRL1_GPIOLV_SHIFT)
#define ACRIOSTRCTRL1_SET_GPIOLV(ACRIOSTRCTRL1, GPIOLV) { \
	FDL_ASSERT(!((GPIOLV) & ~((1 << ACRIOSTRCTRL1_GPIOLV_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_GPIOLV_MASK) | (((unsigned long)(GPIOLV)) << ACRIOSTRCTRL1_GPIOLV_SHIFT);\
}
#define ACRIOSTRCTRL1_SDIO_SIZE	3
#define ACRIOSTRCTRL1_SDIO_SHIFT	21
#define ACRIOSTRCTRL1_SDIO_MASK	0x00e00000
#define ACRIOSTRCTRL1_GET_SDIO(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_SDIO_MASK) >> ACRIOSTRCTRL1_SDIO_SHIFT)
#define ACRIOSTRCTRL1_SET_SDIO(ACRIOSTRCTRL1, SDIO) { \
	FDL_ASSERT(!((SDIO) & ~((1 << ACRIOSTRCTRL1_SDIO_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_SDIO_MASK) | (((unsigned long)(SDIO)) << ACRIOSTRCTRL1_SDIO_SHIFT);\
}
#define ACRIOSTRCTRL1_LCD_AUTO_SIZE	1
#define ACRIOSTRCTRL1_LCD_AUTO_SHIFT	24
#define ACRIOSTRCTRL1_LCD_AUTO_MASK	0x01000000
#define ACRIOSTRCTRL1_GET_LCD_AUTO(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_LCD_AUTO_MASK) >> ACRIOSTRCTRL1_LCD_AUTO_SHIFT)
#define ACRIOSTRCTRL1_SET_LCD_AUTO(ACRIOSTRCTRL1, LCD_AUTO) { \
	FDL_ASSERT(!((LCD_AUTO) & ~((1 << ACRIOSTRCTRL1_LCD_AUTO_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_LCD_AUTO_MASK) | (((unsigned long)(LCD_AUTO)) << ACRIOSTRCTRL1_LCD_AUTO_SHIFT);\
}
#define ACRIOSTRCTRL1_PAD0_SIZE	7
#define ACRIOSTRCTRL1_PAD0_SHIFT	25
#define ACRIOSTRCTRL1_PAD0_MASK	0xfe000000
#define ACRIOSTRCTRL1_GET_PAD0(ACRIOSTRCTRL1) \
	((((unsigned long)(ACRIOSTRCTRL1)) & ACRIOSTRCTRL1_PAD0_MASK) >> ACRIOSTRCTRL1_PAD0_SHIFT)
#define ACRIOSTRCTRL1_SET_PAD0(ACRIOSTRCTRL1, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRIOSTRCTRL1_PAD0_SIZE)-1))); \
	ACRIOSTRCTRL1 = (((unsigned long)(ACRIOSTRCTRL1)) & ~ACRIOSTRCTRL1_PAD0_MASK) | (((unsigned long)(pad0)) << ACRIOSTRCTRL1_PAD0_SHIFT);\
}
#define ACRIOSTRCTRL1_TOTAL_SIZE	32
#define ACRIOSTRCTRL1(P_PI, N_PI, P_LCD, N_LCD, FLASH, GPIO, GPIOLV, SDIO, LCD_AUTO) \
	((((unsigned long)(P_PI)) << ACRIOSTRCTRL1_P_PI_SHIFT) | \
	 (((unsigned long)(N_PI)) << ACRIOSTRCTRL1_N_PI_SHIFT) | \
	 (((unsigned long)(P_LCD)) << ACRIOSTRCTRL1_P_LCD_SHIFT) | \
	 (((unsigned long)(N_LCD)) << ACRIOSTRCTRL1_N_LCD_SHIFT) | \
	 (((unsigned long)(FLASH)) << ACRIOSTRCTRL1_FLASH_SHIFT) | \
	 (((unsigned long)(GPIO)) << ACRIOSTRCTRL1_GPIO_SHIFT) | \
	 (((unsigned long)(GPIOLV)) << ACRIOSTRCTRL1_GPIOLV_SHIFT) | \
	 (((unsigned long)(SDIO)) << ACRIOSTRCTRL1_SDIO_SHIFT) | \
	 (((unsigned long)(LCD_AUTO)) << ACRIOSTRCTRL1_LCD_AUTO_SHIFT))

/*
 *  ACRCLKSTRCTRL struct
 */
#define ACRCLKSTRCTRL_CPUCLK_PSTRP_SIZE	3
#define ACRCLKSTRCTRL_CPUCLK_PSTRP_SHIFT	0
#define ACRCLKSTRCTRL_CPUCLK_PSTRP_MASK	0x00000007
#define ACRCLKSTRCTRL_GET_CPUCLK_PSTRP(ACRCLKSTRCTRL) \
	((((unsigned long)(ACRCLKSTRCTRL)) & ACRCLKSTRCTRL_CPUCLK_PSTRP_MASK) >> ACRCLKSTRCTRL_CPUCLK_PSTRP_SHIFT)
#define ACRCLKSTRCTRL_SET_CPUCLK_PSTRP(ACRCLKSTRCTRL, CPUCLK_PSTRP) { \
	FDL_ASSERT(!((CPUCLK_PSTRP) & ~((1 << ACRCLKSTRCTRL_CPUCLK_PSTRP_SIZE)-1))); \
	ACRCLKSTRCTRL = (((unsigned long)(ACRCLKSTRCTRL)) & ~ACRCLKSTRCTRL_CPUCLK_PSTRP_MASK) | (((unsigned long)(CPUCLK_PSTRP)) << ACRCLKSTRCTRL_CPUCLK_PSTRP_SHIFT);\
}
#define ACRCLKSTRCTRL_CPUCLK_PSTRN_SIZE	3
#define ACRCLKSTRCTRL_CPUCLK_PSTRN_SHIFT	3
#define ACRCLKSTRCTRL_CPUCLK_PSTRN_MASK	0x00000038
#define ACRCLKSTRCTRL_GET_CPUCLK_PSTRN(ACRCLKSTRCTRL) \
	((((unsigned long)(ACRCLKSTRCTRL)) & ACRCLKSTRCTRL_CPUCLK_PSTRN_MASK) >> ACRCLKSTRCTRL_CPUCLK_PSTRN_SHIFT)
#define ACRCLKSTRCTRL_SET_CPUCLK_PSTRN(ACRCLKSTRCTRL, CPUCLK_PSTRN) { \
	FDL_ASSERT(!((CPUCLK_PSTRN) & ~((1 << ACRCLKSTRCTRL_CPUCLK_PSTRN_SIZE)-1))); \
	ACRCLKSTRCTRL = (((unsigned long)(ACRCLKSTRCTRL)) & ~ACRCLKSTRCTRL_CPUCLK_PSTRN_MASK) | (((unsigned long)(CPUCLK_PSTRN)) << ACRCLKSTRCTRL_CPUCLK_PSTRN_SHIFT);\
}
#define ACRCLKSTRCTRL_CPUCLK_NSTRP_SIZE	3
#define ACRCLKSTRCTRL_CPUCLK_NSTRP_SHIFT	6
#define ACRCLKSTRCTRL_CPUCLK_NSTRP_MASK	0x000001c0
#define ACRCLKSTRCTRL_GET_CPUCLK_NSTRP(ACRCLKSTRCTRL) \
	((((unsigned long)(ACRCLKSTRCTRL)) & ACRCLKSTRCTRL_CPUCLK_NSTRP_MASK) >> ACRCLKSTRCTRL_CPUCLK_NSTRP_SHIFT)
#define ACRCLKSTRCTRL_SET_CPUCLK_NSTRP(ACRCLKSTRCTRL, CPUCLK_NSTRP) { \
	FDL_ASSERT(!((CPUCLK_NSTRP) & ~((1 << ACRCLKSTRCTRL_CPUCLK_NSTRP_SIZE)-1))); \
	ACRCLKSTRCTRL = (((unsigned long)(ACRCLKSTRCTRL)) & ~ACRCLKSTRCTRL_CPUCLK_NSTRP_MASK) | (((unsigned long)(CPUCLK_NSTRP)) << ACRCLKSTRCTRL_CPUCLK_NSTRP_SHIFT);\
}
#define ACRCLKSTRCTRL_CPUCLK_NSTRN_SIZE	3
#define ACRCLKSTRCTRL_CPUCLK_NSTRN_SHIFT	9
#define ACRCLKSTRCTRL_CPUCLK_NSTRN_MASK	0x00000e00
#define ACRCLKSTRCTRL_GET_CPUCLK_NSTRN(ACRCLKSTRCTRL) \
	((((unsigned long)(ACRCLKSTRCTRL)) & ACRCLKSTRCTRL_CPUCLK_NSTRN_MASK) >> ACRCLKSTRCTRL_CPUCLK_NSTRN_SHIFT)
#define ACRCLKSTRCTRL_SET_CPUCLK_NSTRN(ACRCLKSTRCTRL, CPUCLK_NSTRN) { \
	FDL_ASSERT(!((CPUCLK_NSTRN) & ~((1 << ACRCLKSTRCTRL_CPUCLK_NSTRN_SIZE)-1))); \
	ACRCLKSTRCTRL = (((unsigned long)(ACRCLKSTRCTRL)) & ~ACRCLKSTRCTRL_CPUCLK_NSTRN_MASK) | (((unsigned long)(CPUCLK_NSTRN)) << ACRCLKSTRCTRL_CPUCLK_NSTRN_SHIFT);\
}
#define ACRCLKSTRCTRL_XTAL_EN0_SIZE	1
#define ACRCLKSTRCTRL_XTAL_EN0_SHIFT	12
#define ACRCLKSTRCTRL_XTAL_EN0_MASK	0x00001000
#define ACRCLKSTRCTRL_GET_XTAL_EN0(ACRCLKSTRCTRL) \
	((((unsigned long)(ACRCLKSTRCTRL)) & ACRCLKSTRCTRL_XTAL_EN0_MASK) >> ACRCLKSTRCTRL_XTAL_EN0_SHIFT)
#define ACRCLKSTRCTRL_SET_XTAL_EN0(ACRCLKSTRCTRL, XTAL_EN0) { \
	FDL_ASSERT(!((XTAL_EN0) & ~((1 << ACRCLKSTRCTRL_XTAL_EN0_SIZE)-1))); \
	ACRCLKSTRCTRL = (((unsigned long)(ACRCLKSTRCTRL)) & ~ACRCLKSTRCTRL_XTAL_EN0_MASK) | (((unsigned long)(XTAL_EN0)) << ACRCLKSTRCTRL_XTAL_EN0_SHIFT);\
}
#define ACRCLKSTRCTRL_XTAL_EN1_SIZE	1
#define ACRCLKSTRCTRL_XTAL_EN1_SHIFT	13
#define ACRCLKSTRCTRL_XTAL_EN1_MASK	0x00002000
#define ACRCLKSTRCTRL_GET_XTAL_EN1(ACRCLKSTRCTRL) \
	((((unsigned long)(ACRCLKSTRCTRL)) & ACRCLKSTRCTRL_XTAL_EN1_MASK) >> ACRCLKSTRCTRL_XTAL_EN1_SHIFT)
#define ACRCLKSTRCTRL_SET_XTAL_EN1(ACRCLKSTRCTRL, XTAL_EN1) { \
	FDL_ASSERT(!((XTAL_EN1) & ~((1 << ACRCLKSTRCTRL_XTAL_EN1_SIZE)-1))); \
	ACRCLKSTRCTRL = (((unsigned long)(ACRCLKSTRCTRL)) & ~ACRCLKSTRCTRL_XTAL_EN1_MASK) | (((unsigned long)(XTAL_EN1)) << ACRCLKSTRCTRL_XTAL_EN1_SHIFT);\
}
#define ACRCLKSTRCTRL_PAD0_SIZE	18
#define ACRCLKSTRCTRL_PAD0_SHIFT	14
#define ACRCLKSTRCTRL_PAD0_MASK	0xffffc000
#define ACRCLKSTRCTRL_GET_PAD0(ACRCLKSTRCTRL) \
	((((unsigned long)(ACRCLKSTRCTRL)) & ACRCLKSTRCTRL_PAD0_MASK) >> ACRCLKSTRCTRL_PAD0_SHIFT)
#define ACRCLKSTRCTRL_SET_PAD0(ACRCLKSTRCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRCLKSTRCTRL_PAD0_SIZE)-1))); \
	ACRCLKSTRCTRL = (((unsigned long)(ACRCLKSTRCTRL)) & ~ACRCLKSTRCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACRCLKSTRCTRL_PAD0_SHIFT);\
}
#define ACRCLKSTRCTRL_TOTAL_SIZE	32
#define ACRCLKSTRCTRL(CPUCLK_PSTRP, CPUCLK_PSTRN, CPUCLK_NSTRP, CPUCLK_NSTRN, XTAL_EN0, XTAL_EN1) \
	((((unsigned long)(CPUCLK_PSTRP)) << ACRCLKSTRCTRL_CPUCLK_PSTRP_SHIFT) | \
	 (((unsigned long)(CPUCLK_PSTRN)) << ACRCLKSTRCTRL_CPUCLK_PSTRN_SHIFT) | \
	 (((unsigned long)(CPUCLK_NSTRP)) << ACRCLKSTRCTRL_CPUCLK_NSTRP_SHIFT) | \
	 (((unsigned long)(CPUCLK_NSTRN)) << ACRCLKSTRCTRL_CPUCLK_NSTRN_SHIFT) | \
	 (((unsigned long)(XTAL_EN0)) << ACRCLKSTRCTRL_XTAL_EN0_SHIFT) | \
	 (((unsigned long)(XTAL_EN1)) << ACRCLKSTRCTRL_XTAL_EN1_SHIFT))

/*
 *  ACREFUSEADDR struct
 */
#define ACREFUSEADDR_EFADDR_SIZE	5
#define ACREFUSEADDR_EFADDR_SHIFT	0
#define ACREFUSEADDR_EFADDR_MASK	0x0000001f
#define ACREFUSEADDR_GET_EFADDR(ACREFUSEADDR) \
	((((unsigned long)(ACREFUSEADDR)) & ACREFUSEADDR_EFADDR_MASK) >> ACREFUSEADDR_EFADDR_SHIFT)
#define ACREFUSEADDR_SET_EFADDR(ACREFUSEADDR, EFADDR) { \
	FDL_ASSERT(!((EFADDR) & ~((1 << ACREFUSEADDR_EFADDR_SIZE)-1))); \
	ACREFUSEADDR = (((unsigned long)(ACREFUSEADDR)) & ~ACREFUSEADDR_EFADDR_MASK) | (((unsigned long)(EFADDR)) << ACREFUSEADDR_EFADDR_SHIFT);\
}
#define ACREFUSEADDR_PAD0_SIZE	26
#define ACREFUSEADDR_PAD0_SHIFT	5
#define ACREFUSEADDR_PAD0_MASK	0x7fffffe0
#define ACREFUSEADDR_GET_PAD0(ACREFUSEADDR) \
	((((unsigned long)(ACREFUSEADDR)) & ACREFUSEADDR_PAD0_MASK) >> ACREFUSEADDR_PAD0_SHIFT)
#define ACREFUSEADDR_SET_PAD0(ACREFUSEADDR, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACREFUSEADDR_PAD0_SIZE)-1))); \
	ACREFUSEADDR = (((unsigned long)(ACREFUSEADDR)) & ~ACREFUSEADDR_PAD0_MASK) | (((unsigned long)(pad0)) << ACREFUSEADDR_PAD0_SHIFT);\
}
#define ACREFUSEADDR_EFEN_SIZE	1
#define ACREFUSEADDR_EFEN_SHIFT	31
#define ACREFUSEADDR_EFEN_MASK	0x80000000
#define ACREFUSEADDR_GET_EFEN(ACREFUSEADDR) \
	((((unsigned long)(ACREFUSEADDR)) & ACREFUSEADDR_EFEN_MASK) >> ACREFUSEADDR_EFEN_SHIFT)
#define ACREFUSEADDR_SET_EFEN(ACREFUSEADDR, EFEN) { \
	FDL_ASSERT(!((EFEN) & ~((1 << ACREFUSEADDR_EFEN_SIZE)-1))); \
	ACREFUSEADDR = (((unsigned long)(ACREFUSEADDR)) & ~ACREFUSEADDR_EFEN_MASK) | (((unsigned long)(EFEN)) << ACREFUSEADDR_EFEN_SHIFT);\
}
#define ACREFUSEADDR_TOTAL_SIZE	32
#define ACREFUSEADDR(EFADDR, EFEN) \
	((((unsigned long)(EFADDR)) << ACREFUSEADDR_EFADDR_SHIFT) | \
	 (((unsigned long)(EFEN)) << ACREFUSEADDR_EFEN_SHIFT))

/*
 *  ACREFUSEDATA struct
 */
#define ACREFUSEDATA_EFDATA_SIZE	32
#define ACREFUSEDATA_EFDATA_SHIFT	0
#define ACREFUSEDATA_EFDATA_MASK	0xffffffff
#define ACREFUSEDATA_GET_EFDATA(ACREFUSEDATA) \
	((((unsigned long)(ACREFUSEDATA)) & ACREFUSEDATA_EFDATA_MASK) >> ACREFUSEDATA_EFDATA_SHIFT)
#define ACREFUSEDATA_SET_EFDATA(ACREFUSEDATA, EFDATA) { \
	FDL_ASSERT(!((EFDATA) & ~((1 << ACREFUSEDATA_EFDATA_SIZE)-1))); \
	ACREFUSEDATA = (((unsigned long)(ACREFUSEDATA)) & ~ACREFUSEDATA_EFDATA_MASK) | (((unsigned long)(EFDATA)) << ACREFUSEDATA_EFDATA_SHIFT);\
}
#define ACREFUSEDATA_TOTAL_SIZE	32
#define ACREFUSEDATA(EFDATA) \
	((((unsigned long)(EFDATA)) << ACREFUSEDATA_EFDATA_SHIFT))

/*
 *  GPIPPCOUT struct
 */
#define GPIPPCOUT_OUT_SIZE	24
#define GPIPPCOUT_OUT_SHIFT	0
#define GPIPPCOUT_OUT_MASK	0x00ffffff
#define GPIPPCOUT_GET_OUT(GPIPPCOUT) \
	((((unsigned long)(GPIPPCOUT)) & GPIPPCOUT_OUT_MASK) >> GPIPPCOUT_OUT_SHIFT)
#define GPIPPCOUT_SET_OUT(GPIPPCOUT, OUT) { \
	FDL_ASSERT(!((OUT) & ~((1 << GPIPPCOUT_OUT_SIZE)-1))); \
	GPIPPCOUT = (((unsigned long)(GPIPPCOUT)) & ~GPIPPCOUT_OUT_MASK) | (((unsigned long)(OUT)) << GPIPPCOUT_OUT_SHIFT);\
}
#define GPIPPCOUT_PAD0_SIZE	8
#define GPIPPCOUT_PAD0_SHIFT	24
#define GPIPPCOUT_PAD0_MASK	0xff000000
#define GPIPPCOUT_GET_PAD0(GPIPPCOUT) \
	((((unsigned long)(GPIPPCOUT)) & GPIPPCOUT_PAD0_MASK) >> GPIPPCOUT_PAD0_SHIFT)
#define GPIPPCOUT_SET_PAD0(GPIPPCOUT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCOUT_PAD0_SIZE)-1))); \
	GPIPPCOUT = (((unsigned long)(GPIPPCOUT)) & ~GPIPPCOUT_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCOUT_PAD0_SHIFT);\
}
#define GPIPPCOUT_TOTAL_SIZE	32
#define GPIPPCOUT(OUT) \
	((((unsigned long)(OUT)) << GPIPPCOUT_OUT_SHIFT))

/*
 *  GPIPPCOUTEN struct
 */
#define GPIPPCOUTEN_OUTEN_SIZE	24
#define GPIPPCOUTEN_OUTEN_SHIFT	0
#define GPIPPCOUTEN_OUTEN_MASK	0x00ffffff
#define GPIPPCOUTEN_GET_OUTEN(GPIPPCOUTEN) \
	((((unsigned long)(GPIPPCOUTEN)) & GPIPPCOUTEN_OUTEN_MASK) >> GPIPPCOUTEN_OUTEN_SHIFT)
#define GPIPPCOUTEN_SET_OUTEN(GPIPPCOUTEN, OUTEN) { \
	FDL_ASSERT(!((OUTEN) & ~((1 << GPIPPCOUTEN_OUTEN_SIZE)-1))); \
	GPIPPCOUTEN = (((unsigned long)(GPIPPCOUTEN)) & ~GPIPPCOUTEN_OUTEN_MASK) | (((unsigned long)(OUTEN)) << GPIPPCOUTEN_OUTEN_SHIFT);\
}
#define GPIPPCOUTEN_PAD0_SIZE	8
#define GPIPPCOUTEN_PAD0_SHIFT	24
#define GPIPPCOUTEN_PAD0_MASK	0xff000000
#define GPIPPCOUTEN_GET_PAD0(GPIPPCOUTEN) \
	((((unsigned long)(GPIPPCOUTEN)) & GPIPPCOUTEN_PAD0_MASK) >> GPIPPCOUTEN_PAD0_SHIFT)
#define GPIPPCOUTEN_SET_PAD0(GPIPPCOUTEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCOUTEN_PAD0_SIZE)-1))); \
	GPIPPCOUTEN = (((unsigned long)(GPIPPCOUTEN)) & ~GPIPPCOUTEN_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCOUTEN_PAD0_SHIFT);\
}
#define GPIPPCOUTEN_TOTAL_SIZE	32
#define GPIPPCOUTEN(OUTEN) \
	((((unsigned long)(OUTEN)) << GPIPPCOUTEN_OUTEN_SHIFT))

/*
 *  GPIPPCOE struct
 */
#define GPIPPCOE_OE_SIZE	24
#define GPIPPCOE_OE_SHIFT	0
#define GPIPPCOE_OE_MASK	0x00ffffff
#define GPIPPCOE_GET_OE(GPIPPCOE) \
	((((unsigned long)(GPIPPCOE)) & GPIPPCOE_OE_MASK) >> GPIPPCOE_OE_SHIFT)
#define GPIPPCOE_SET_OE(GPIPPCOE, OE) { \
	FDL_ASSERT(!((OE) & ~((1 << GPIPPCOE_OE_SIZE)-1))); \
	GPIPPCOE = (((unsigned long)(GPIPPCOE)) & ~GPIPPCOE_OE_MASK) | (((unsigned long)(OE)) << GPIPPCOE_OE_SHIFT);\
}
#define GPIPPCOE_PAD0_SIZE	8
#define GPIPPCOE_PAD0_SHIFT	24
#define GPIPPCOE_PAD0_MASK	0xff000000
#define GPIPPCOE_GET_PAD0(GPIPPCOE) \
	((((unsigned long)(GPIPPCOE)) & GPIPPCOE_PAD0_MASK) >> GPIPPCOE_PAD0_SHIFT)
#define GPIPPCOE_SET_PAD0(GPIPPCOE, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCOE_PAD0_SIZE)-1))); \
	GPIPPCOE = (((unsigned long)(GPIPPCOE)) & ~GPIPPCOE_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCOE_PAD0_SHIFT);\
}
#define GPIPPCOE_TOTAL_SIZE	32
#define GPIPPCOE(OE) \
	((((unsigned long)(OE)) << GPIPPCOE_OE_SHIFT))

/*
 *  GPIPPCIN struct
 */
#define GPIPPCIN_IN_SIZE	24
#define GPIPPCIN_IN_SHIFT	0
#define GPIPPCIN_IN_MASK	0x00ffffff
#define GPIPPCIN_GET_IN(GPIPPCIN) \
	((((unsigned long)(GPIPPCIN)) & GPIPPCIN_IN_MASK) >> GPIPPCIN_IN_SHIFT)
#define GPIPPCIN_SET_IN(GPIPPCIN, IN) { \
	FDL_ASSERT(!((IN) & ~((1 << GPIPPCIN_IN_SIZE)-1))); \
	GPIPPCIN = (((unsigned long)(GPIPPCIN)) & ~GPIPPCIN_IN_MASK) | (((unsigned long)(IN)) << GPIPPCIN_IN_SHIFT);\
}
#define GPIPPCIN_PAD0_SIZE	8
#define GPIPPCIN_PAD0_SHIFT	24
#define GPIPPCIN_PAD0_MASK	0xff000000
#define GPIPPCIN_GET_PAD0(GPIPPCIN) \
	((((unsigned long)(GPIPPCIN)) & GPIPPCIN_PAD0_MASK) >> GPIPPCIN_PAD0_SHIFT)
#define GPIPPCIN_SET_PAD0(GPIPPCIN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCIN_PAD0_SIZE)-1))); \
	GPIPPCIN = (((unsigned long)(GPIPPCIN)) & ~GPIPPCIN_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCIN_PAD0_SHIFT);\
}
#define GPIPPCIN_TOTAL_SIZE	32
#define GPIPPCIN(IN) \
	((((unsigned long)(IN)) << GPIPPCIN_IN_SHIFT))

/*
 *  GPIPPCINTPOL struct
 */
#define GPIPPCINTPOL_POLARITY_SIZE	24
#define GPIPPCINTPOL_POLARITY_SHIFT	0
#define GPIPPCINTPOL_POLARITY_MASK	0x00ffffff
#define GPIPPCINTPOL_GET_POLARITY(GPIPPCINTPOL) \
	((((unsigned long)(GPIPPCINTPOL)) & GPIPPCINTPOL_POLARITY_MASK) >> GPIPPCINTPOL_POLARITY_SHIFT)
#define GPIPPCINTPOL_SET_POLARITY(GPIPPCINTPOL, POLARITY) { \
	FDL_ASSERT(!((POLARITY) & ~((1 << GPIPPCINTPOL_POLARITY_SIZE)-1))); \
	GPIPPCINTPOL = (((unsigned long)(GPIPPCINTPOL)) & ~GPIPPCINTPOL_POLARITY_MASK) | (((unsigned long)(POLARITY)) << GPIPPCINTPOL_POLARITY_SHIFT);\
}
#define GPIPPCINTPOL_PAD0_SIZE	8
#define GPIPPCINTPOL_PAD0_SHIFT	24
#define GPIPPCINTPOL_PAD0_MASK	0xff000000
#define GPIPPCINTPOL_GET_PAD0(GPIPPCINTPOL) \
	((((unsigned long)(GPIPPCINTPOL)) & GPIPPCINTPOL_PAD0_MASK) >> GPIPPCINTPOL_PAD0_SHIFT)
#define GPIPPCINTPOL_SET_PAD0(GPIPPCINTPOL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCINTPOL_PAD0_SIZE)-1))); \
	GPIPPCINTPOL = (((unsigned long)(GPIPPCINTPOL)) & ~GPIPPCINTPOL_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCINTPOL_PAD0_SHIFT);\
}
#define GPIPPCINTPOL_TOTAL_SIZE	32
#define GPIPPCINTPOL(POLARITY) \
	((((unsigned long)(POLARITY)) << GPIPPCINTPOL_POLARITY_SHIFT))

/*
 *  GPIPPCINTSTS struct
 */
#define GPIPPCINTSTS_INTSTS_SIZE	24
#define GPIPPCINTSTS_INTSTS_SHIFT	0
#define GPIPPCINTSTS_INTSTS_MASK	0x00ffffff
#define GPIPPCINTSTS_GET_INTSTS(GPIPPCINTSTS) \
	((((unsigned long)(GPIPPCINTSTS)) & GPIPPCINTSTS_INTSTS_MASK) >> GPIPPCINTSTS_INTSTS_SHIFT)
#define GPIPPCINTSTS_SET_INTSTS(GPIPPCINTSTS, INTSTS) { \
	FDL_ASSERT(!((INTSTS) & ~((1 << GPIPPCINTSTS_INTSTS_SIZE)-1))); \
	GPIPPCINTSTS = (((unsigned long)(GPIPPCINTSTS)) & ~GPIPPCINTSTS_INTSTS_MASK) | (((unsigned long)(INTSTS)) << GPIPPCINTSTS_INTSTS_SHIFT);\
}
#define GPIPPCINTSTS_PAD0_SIZE	8
#define GPIPPCINTSTS_PAD0_SHIFT	24
#define GPIPPCINTSTS_PAD0_MASK	0xff000000
#define GPIPPCINTSTS_GET_PAD0(GPIPPCINTSTS) \
	((((unsigned long)(GPIPPCINTSTS)) & GPIPPCINTSTS_PAD0_MASK) >> GPIPPCINTSTS_PAD0_SHIFT)
#define GPIPPCINTSTS_SET_PAD0(GPIPPCINTSTS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCINTSTS_PAD0_SIZE)-1))); \
	GPIPPCINTSTS = (((unsigned long)(GPIPPCINTSTS)) & ~GPIPPCINTSTS_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCINTSTS_PAD0_SHIFT);\
}
#define GPIPPCINTSTS_TOTAL_SIZE	32
#define GPIPPCINTSTS(INTSTS) \
	((((unsigned long)(INTSTS)) << GPIPPCINTSTS_INTSTS_SHIFT))

/*
 *  GPIPPCINTEN struct
 */
#define GPIPPCINTEN_INTEN_SIZE	24
#define GPIPPCINTEN_INTEN_SHIFT	0
#define GPIPPCINTEN_INTEN_MASK	0x00ffffff
#define GPIPPCINTEN_GET_INTEN(GPIPPCINTEN) \
	((((unsigned long)(GPIPPCINTEN)) & GPIPPCINTEN_INTEN_MASK) >> GPIPPCINTEN_INTEN_SHIFT)
#define GPIPPCINTEN_SET_INTEN(GPIPPCINTEN, INTEN) { \
	FDL_ASSERT(!((INTEN) & ~((1 << GPIPPCINTEN_INTEN_SIZE)-1))); \
	GPIPPCINTEN = (((unsigned long)(GPIPPCINTEN)) & ~GPIPPCINTEN_INTEN_MASK) | (((unsigned long)(INTEN)) << GPIPPCINTEN_INTEN_SHIFT);\
}
#define GPIPPCINTEN_PAD0_SIZE	8
#define GPIPPCINTEN_PAD0_SHIFT	24
#define GPIPPCINTEN_PAD0_MASK	0xff000000
#define GPIPPCINTEN_GET_PAD0(GPIPPCINTEN) \
	((((unsigned long)(GPIPPCINTEN)) & GPIPPCINTEN_PAD0_MASK) >> GPIPPCINTEN_PAD0_SHIFT)
#define GPIPPCINTEN_SET_PAD0(GPIPPCINTEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCINTEN_PAD0_SIZE)-1))); \
	GPIPPCINTEN = (((unsigned long)(GPIPPCINTEN)) & ~GPIPPCINTEN_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCINTEN_PAD0_SHIFT);\
}
#define GPIPPCINTEN_TOTAL_SIZE	32
#define GPIPPCINTEN(INTEN) \
	((((unsigned long)(INTEN)) << GPIPPCINTEN_INTEN_SHIFT))

/*
 *  GPIPPCSTRAPS struct
 */
#define GPIPPCSTRAPS_STRAPS_SIZE	24
#define GPIPPCSTRAPS_STRAPS_SHIFT	0
#define GPIPPCSTRAPS_STRAPS_MASK	0x00ffffff
#define GPIPPCSTRAPS_GET_STRAPS(GPIPPCSTRAPS) \
	((((unsigned long)(GPIPPCSTRAPS)) & GPIPPCSTRAPS_STRAPS_MASK) >> GPIPPCSTRAPS_STRAPS_SHIFT)
#define GPIPPCSTRAPS_SET_STRAPS(GPIPPCSTRAPS, STRAPS) { \
	FDL_ASSERT(!((STRAPS) & ~((1 << GPIPPCSTRAPS_STRAPS_SIZE)-1))); \
	GPIPPCSTRAPS = (((unsigned long)(GPIPPCSTRAPS)) & ~GPIPPCSTRAPS_STRAPS_MASK) | (((unsigned long)(STRAPS)) << GPIPPCSTRAPS_STRAPS_SHIFT);\
}
#define GPIPPCSTRAPS_PAD0_SIZE	8
#define GPIPPCSTRAPS_PAD0_SHIFT	24
#define GPIPPCSTRAPS_PAD0_MASK	0xff000000
#define GPIPPCSTRAPS_GET_PAD0(GPIPPCSTRAPS) \
	((((unsigned long)(GPIPPCSTRAPS)) & GPIPPCSTRAPS_PAD0_MASK) >> GPIPPCSTRAPS_PAD0_SHIFT)
#define GPIPPCSTRAPS_SET_PAD0(GPIPPCSTRAPS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIPPCSTRAPS_PAD0_SIZE)-1))); \
	GPIPPCSTRAPS = (((unsigned long)(GPIPPCSTRAPS)) & ~GPIPPCSTRAPS_PAD0_MASK) | (((unsigned long)(pad0)) << GPIPPCSTRAPS_PAD0_SHIFT);\
}
#define GPIPPCSTRAPS_TOTAL_SIZE	32
#define GPIPPCSTRAPS(STRAPS) \
	((((unsigned long)(STRAPS)) << GPIPPCSTRAPS_STRAPS_SHIFT))

/*
 *  GPIIOPEN struct
 */
#define GPIIOPEN_EN_SIZE	24
#define GPIIOPEN_EN_SHIFT	0
#define GPIIOPEN_EN_MASK	0x00ffffff
#define GPIIOPEN_GET_EN(GPIIOPEN) \
	((((unsigned long)(GPIIOPEN)) & GPIIOPEN_EN_MASK) >> GPIIOPEN_EN_SHIFT)
#define GPIIOPEN_SET_EN(GPIIOPEN, EN) { \
	FDL_ASSERT(!((EN) & ~((1 << GPIIOPEN_EN_SIZE)-1))); \
	GPIIOPEN = (((unsigned long)(GPIIOPEN)) & ~GPIIOPEN_EN_MASK) | (((unsigned long)(EN)) << GPIIOPEN_EN_SHIFT);\
}
#define GPIIOPEN_PAD0_SIZE	8
#define GPIIOPEN_PAD0_SHIFT	24
#define GPIIOPEN_PAD0_MASK	0xff000000
#define GPIIOPEN_GET_PAD0(GPIIOPEN) \
	((((unsigned long)(GPIIOPEN)) & GPIIOPEN_PAD0_MASK) >> GPIIOPEN_PAD0_SHIFT)
#define GPIIOPEN_SET_PAD0(GPIIOPEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPEN_PAD0_SIZE)-1))); \
	GPIIOPEN = (((unsigned long)(GPIIOPEN)) & ~GPIIOPEN_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPEN_PAD0_SHIFT);\
}
#define GPIIOPEN_TOTAL_SIZE	32
#define GPIIOPEN(EN) \
	((((unsigned long)(EN)) << GPIIOPEN_EN_SHIFT))

/*
 *  GPIIOPOUT struct
 */
#define GPIIOPOUT_OUT_SIZE	24
#define GPIIOPOUT_OUT_SHIFT	0
#define GPIIOPOUT_OUT_MASK	0x00ffffff
#define GPIIOPOUT_GET_OUT(GPIIOPOUT) \
	((((unsigned long)(GPIIOPOUT)) & GPIIOPOUT_OUT_MASK) >> GPIIOPOUT_OUT_SHIFT)
#define GPIIOPOUT_SET_OUT(GPIIOPOUT, OUT) { \
	FDL_ASSERT(!((OUT) & ~((1 << GPIIOPOUT_OUT_SIZE)-1))); \
	GPIIOPOUT = (((unsigned long)(GPIIOPOUT)) & ~GPIIOPOUT_OUT_MASK) | (((unsigned long)(OUT)) << GPIIOPOUT_OUT_SHIFT);\
}
#define GPIIOPOUT_PAD0_SIZE	8
#define GPIIOPOUT_PAD0_SHIFT	24
#define GPIIOPOUT_PAD0_MASK	0xff000000
#define GPIIOPOUT_GET_PAD0(GPIIOPOUT) \
	((((unsigned long)(GPIIOPOUT)) & GPIIOPOUT_PAD0_MASK) >> GPIIOPOUT_PAD0_SHIFT)
#define GPIIOPOUT_SET_PAD0(GPIIOPOUT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPOUT_PAD0_SIZE)-1))); \
	GPIIOPOUT = (((unsigned long)(GPIIOPOUT)) & ~GPIIOPOUT_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPOUT_PAD0_SHIFT);\
}
#define GPIIOPOUT_TOTAL_SIZE	32
#define GPIIOPOUT(OUT) \
	((((unsigned long)(OUT)) << GPIIOPOUT_OUT_SHIFT))

/*
 *  GPIIOPOUTEN struct
 */
#define GPIIOPOUTEN_OUTEN_SIZE	24
#define GPIIOPOUTEN_OUTEN_SHIFT	0
#define GPIIOPOUTEN_OUTEN_MASK	0x00ffffff
#define GPIIOPOUTEN_GET_OUTEN(GPIIOPOUTEN) \
	((((unsigned long)(GPIIOPOUTEN)) & GPIIOPOUTEN_OUTEN_MASK) >> GPIIOPOUTEN_OUTEN_SHIFT)
#define GPIIOPOUTEN_SET_OUTEN(GPIIOPOUTEN, OUTEN) { \
	FDL_ASSERT(!((OUTEN) & ~((1 << GPIIOPOUTEN_OUTEN_SIZE)-1))); \
	GPIIOPOUTEN = (((unsigned long)(GPIIOPOUTEN)) & ~GPIIOPOUTEN_OUTEN_MASK) | (((unsigned long)(OUTEN)) << GPIIOPOUTEN_OUTEN_SHIFT);\
}
#define GPIIOPOUTEN_PAD0_SIZE	8
#define GPIIOPOUTEN_PAD0_SHIFT	24
#define GPIIOPOUTEN_PAD0_MASK	0xff000000
#define GPIIOPOUTEN_GET_PAD0(GPIIOPOUTEN) \
	((((unsigned long)(GPIIOPOUTEN)) & GPIIOPOUTEN_PAD0_MASK) >> GPIIOPOUTEN_PAD0_SHIFT)
#define GPIIOPOUTEN_SET_PAD0(GPIIOPOUTEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPOUTEN_PAD0_SIZE)-1))); \
	GPIIOPOUTEN = (((unsigned long)(GPIIOPOUTEN)) & ~GPIIOPOUTEN_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPOUTEN_PAD0_SHIFT);\
}
#define GPIIOPOUTEN_TOTAL_SIZE	32
#define GPIIOPOUTEN(OUTEN) \
	((((unsigned long)(OUTEN)) << GPIIOPOUTEN_OUTEN_SHIFT))

/*
 *  GPIIOPOE struct
 */
#define GPIIOPOE_OE_SIZE	24
#define GPIIOPOE_OE_SHIFT	0
#define GPIIOPOE_OE_MASK	0x00ffffff
#define GPIIOPOE_GET_OE(GPIIOPOE) \
	((((unsigned long)(GPIIOPOE)) & GPIIOPOE_OE_MASK) >> GPIIOPOE_OE_SHIFT)
#define GPIIOPOE_SET_OE(GPIIOPOE, OE) { \
	FDL_ASSERT(!((OE) & ~((1 << GPIIOPOE_OE_SIZE)-1))); \
	GPIIOPOE = (((unsigned long)(GPIIOPOE)) & ~GPIIOPOE_OE_MASK) | (((unsigned long)(OE)) << GPIIOPOE_OE_SHIFT);\
}
#define GPIIOPOE_PAD0_SIZE	8
#define GPIIOPOE_PAD0_SHIFT	24
#define GPIIOPOE_PAD0_MASK	0xff000000
#define GPIIOPOE_GET_PAD0(GPIIOPOE) \
	((((unsigned long)(GPIIOPOE)) & GPIIOPOE_PAD0_MASK) >> GPIIOPOE_PAD0_SHIFT)
#define GPIIOPOE_SET_PAD0(GPIIOPOE, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPOE_PAD0_SIZE)-1))); \
	GPIIOPOE = (((unsigned long)(GPIIOPOE)) & ~GPIIOPOE_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPOE_PAD0_SHIFT);\
}
#define GPIIOPOE_TOTAL_SIZE	32
#define GPIIOPOE(OE) \
	((((unsigned long)(OE)) << GPIIOPOE_OE_SHIFT))

/*
 *  GPIIOPIN struct
 */
#define GPIIOPIN_IN_SIZE	24
#define GPIIOPIN_IN_SHIFT	0
#define GPIIOPIN_IN_MASK	0x00ffffff
#define GPIIOPIN_GET_IN(GPIIOPIN) \
	((((unsigned long)(GPIIOPIN)) & GPIIOPIN_IN_MASK) >> GPIIOPIN_IN_SHIFT)
#define GPIIOPIN_SET_IN(GPIIOPIN, IN) { \
	FDL_ASSERT(!((IN) & ~((1 << GPIIOPIN_IN_SIZE)-1))); \
	GPIIOPIN = (((unsigned long)(GPIIOPIN)) & ~GPIIOPIN_IN_MASK) | (((unsigned long)(IN)) << GPIIOPIN_IN_SHIFT);\
}
#define GPIIOPIN_PAD0_SIZE	8
#define GPIIOPIN_PAD0_SHIFT	24
#define GPIIOPIN_PAD0_MASK	0xff000000
#define GPIIOPIN_GET_PAD0(GPIIOPIN) \
	((((unsigned long)(GPIIOPIN)) & GPIIOPIN_PAD0_MASK) >> GPIIOPIN_PAD0_SHIFT)
#define GPIIOPIN_SET_PAD0(GPIIOPIN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPIN_PAD0_SIZE)-1))); \
	GPIIOPIN = (((unsigned long)(GPIIOPIN)) & ~GPIIOPIN_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPIN_PAD0_SHIFT);\
}
#define GPIIOPIN_TOTAL_SIZE	32
#define GPIIOPIN(IN) \
	((((unsigned long)(IN)) << GPIIOPIN_IN_SHIFT))

/*
 *  GPIIOPINTPOL struct
 */
#define GPIIOPINTPOL_POLARITY_SIZE	24
#define GPIIOPINTPOL_POLARITY_SHIFT	0
#define GPIIOPINTPOL_POLARITY_MASK	0x00ffffff
#define GPIIOPINTPOL_GET_POLARITY(GPIIOPINTPOL) \
	((((unsigned long)(GPIIOPINTPOL)) & GPIIOPINTPOL_POLARITY_MASK) >> GPIIOPINTPOL_POLARITY_SHIFT)
#define GPIIOPINTPOL_SET_POLARITY(GPIIOPINTPOL, POLARITY) { \
	FDL_ASSERT(!((POLARITY) & ~((1 << GPIIOPINTPOL_POLARITY_SIZE)-1))); \
	GPIIOPINTPOL = (((unsigned long)(GPIIOPINTPOL)) & ~GPIIOPINTPOL_POLARITY_MASK) | (((unsigned long)(POLARITY)) << GPIIOPINTPOL_POLARITY_SHIFT);\
}
#define GPIIOPINTPOL_PAD0_SIZE	8
#define GPIIOPINTPOL_PAD0_SHIFT	24
#define GPIIOPINTPOL_PAD0_MASK	0xff000000
#define GPIIOPINTPOL_GET_PAD0(GPIIOPINTPOL) \
	((((unsigned long)(GPIIOPINTPOL)) & GPIIOPINTPOL_PAD0_MASK) >> GPIIOPINTPOL_PAD0_SHIFT)
#define GPIIOPINTPOL_SET_PAD0(GPIIOPINTPOL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPINTPOL_PAD0_SIZE)-1))); \
	GPIIOPINTPOL = (((unsigned long)(GPIIOPINTPOL)) & ~GPIIOPINTPOL_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPINTPOL_PAD0_SHIFT);\
}
#define GPIIOPINTPOL_TOTAL_SIZE	32
#define GPIIOPINTPOL(POLARITY) \
	((((unsigned long)(POLARITY)) << GPIIOPINTPOL_POLARITY_SHIFT))

/*
 *  GPIIOPINTSTS struct
 */
#define GPIIOPINTSTS_INTSTS_SIZE	24
#define GPIIOPINTSTS_INTSTS_SHIFT	0
#define GPIIOPINTSTS_INTSTS_MASK	0x00ffffff
#define GPIIOPINTSTS_GET_INTSTS(GPIIOPINTSTS) \
	((((unsigned long)(GPIIOPINTSTS)) & GPIIOPINTSTS_INTSTS_MASK) >> GPIIOPINTSTS_INTSTS_SHIFT)
#define GPIIOPINTSTS_SET_INTSTS(GPIIOPINTSTS, INTSTS) { \
	FDL_ASSERT(!((INTSTS) & ~((1 << GPIIOPINTSTS_INTSTS_SIZE)-1))); \
	GPIIOPINTSTS = (((unsigned long)(GPIIOPINTSTS)) & ~GPIIOPINTSTS_INTSTS_MASK) | (((unsigned long)(INTSTS)) << GPIIOPINTSTS_INTSTS_SHIFT);\
}
#define GPIIOPINTSTS_PAD0_SIZE	8
#define GPIIOPINTSTS_PAD0_SHIFT	24
#define GPIIOPINTSTS_PAD0_MASK	0xff000000
#define GPIIOPINTSTS_GET_PAD0(GPIIOPINTSTS) \
	((((unsigned long)(GPIIOPINTSTS)) & GPIIOPINTSTS_PAD0_MASK) >> GPIIOPINTSTS_PAD0_SHIFT)
#define GPIIOPINTSTS_SET_PAD0(GPIIOPINTSTS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPINTSTS_PAD0_SIZE)-1))); \
	GPIIOPINTSTS = (((unsigned long)(GPIIOPINTSTS)) & ~GPIIOPINTSTS_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPINTSTS_PAD0_SHIFT);\
}
#define GPIIOPINTSTS_TOTAL_SIZE	32
#define GPIIOPINTSTS(INTSTS) \
	((((unsigned long)(INTSTS)) << GPIIOPINTSTS_INTSTS_SHIFT))

/*
 *  GPIIOPINTEN struct
 */
#define GPIIOPINTEN_INTEN_SIZE	24
#define GPIIOPINTEN_INTEN_SHIFT	0
#define GPIIOPINTEN_INTEN_MASK	0x00ffffff
#define GPIIOPINTEN_GET_INTEN(GPIIOPINTEN) \
	((((unsigned long)(GPIIOPINTEN)) & GPIIOPINTEN_INTEN_MASK) >> GPIIOPINTEN_INTEN_SHIFT)
#define GPIIOPINTEN_SET_INTEN(GPIIOPINTEN, INTEN) { \
	FDL_ASSERT(!((INTEN) & ~((1 << GPIIOPINTEN_INTEN_SIZE)-1))); \
	GPIIOPINTEN = (((unsigned long)(GPIIOPINTEN)) & ~GPIIOPINTEN_INTEN_MASK) | (((unsigned long)(INTEN)) << GPIIOPINTEN_INTEN_SHIFT);\
}
#define GPIIOPINTEN_PAD0_SIZE	8
#define GPIIOPINTEN_PAD0_SHIFT	24
#define GPIIOPINTEN_PAD0_MASK	0xff000000
#define GPIIOPINTEN_GET_PAD0(GPIIOPINTEN) \
	((((unsigned long)(GPIIOPINTEN)) & GPIIOPINTEN_PAD0_MASK) >> GPIIOPINTEN_PAD0_SHIFT)
#define GPIIOPINTEN_SET_PAD0(GPIIOPINTEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPINTEN_PAD0_SIZE)-1))); \
	GPIIOPINTEN = (((unsigned long)(GPIIOPINTEN)) & ~GPIIOPINTEN_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPINTEN_PAD0_SHIFT);\
}
#define GPIIOPINTEN_TOTAL_SIZE	32
#define GPIIOPINTEN(INTEN) \
	((((unsigned long)(INTEN)) << GPIIOPINTEN_INTEN_SHIFT))

/*
 *  GPIIOPSTRAPS struct
 */
#define GPIIOPSTRAPS_STRAPS_SIZE	24
#define GPIIOPSTRAPS_STRAPS_SHIFT	0
#define GPIIOPSTRAPS_STRAPS_MASK	0x00ffffff
#define GPIIOPSTRAPS_GET_STRAPS(GPIIOPSTRAPS) \
	((((unsigned long)(GPIIOPSTRAPS)) & GPIIOPSTRAPS_STRAPS_MASK) >> GPIIOPSTRAPS_STRAPS_SHIFT)
#define GPIIOPSTRAPS_SET_STRAPS(GPIIOPSTRAPS, STRAPS) { \
	FDL_ASSERT(!((STRAPS) & ~((1 << GPIIOPSTRAPS_STRAPS_SIZE)-1))); \
	GPIIOPSTRAPS = (((unsigned long)(GPIIOPSTRAPS)) & ~GPIIOPSTRAPS_STRAPS_MASK) | (((unsigned long)(STRAPS)) << GPIIOPSTRAPS_STRAPS_SHIFT);\
}
#define GPIIOPSTRAPS_PAD0_SIZE	8
#define GPIIOPSTRAPS_PAD0_SHIFT	24
#define GPIIOPSTRAPS_PAD0_MASK	0xff000000
#define GPIIOPSTRAPS_GET_PAD0(GPIIOPSTRAPS) \
	((((unsigned long)(GPIIOPSTRAPS)) & GPIIOPSTRAPS_PAD0_MASK) >> GPIIOPSTRAPS_PAD0_SHIFT)
#define GPIIOPSTRAPS_SET_PAD0(GPIIOPSTRAPS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPSTRAPS_PAD0_SIZE)-1))); \
	GPIIOPSTRAPS = (((unsigned long)(GPIIOPSTRAPS)) & ~GPIIOPSTRAPS_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPSTRAPS_PAD0_SHIFT);\
}
#define GPIIOPSTRAPS_TOTAL_SIZE	32
#define GPIIOPSTRAPS(STRAPS) \
	((((unsigned long)(STRAPS)) << GPIIOPSTRAPS_STRAPS_SHIFT))

/*
 *  GPIIOPPPCOWNER struct
 */
#define GPIIOPPPCOWNER_PPCOWNER_SIZE	24
#define GPIIOPPPCOWNER_PPCOWNER_SHIFT	0
#define GPIIOPPPCOWNER_PPCOWNER_MASK	0x00ffffff
#define GPIIOPPPCOWNER_GET_PPCOWNER(GPIIOPPPCOWNER) \
	((((unsigned long)(GPIIOPPPCOWNER)) & GPIIOPPPCOWNER_PPCOWNER_MASK) >> GPIIOPPPCOWNER_PPCOWNER_SHIFT)
#define GPIIOPPPCOWNER_SET_PPCOWNER(GPIIOPPPCOWNER, PPCOWNER) { \
	FDL_ASSERT(!((PPCOWNER) & ~((1 << GPIIOPPPCOWNER_PPCOWNER_SIZE)-1))); \
	GPIIOPPPCOWNER = (((unsigned long)(GPIIOPPPCOWNER)) & ~GPIIOPPPCOWNER_PPCOWNER_MASK) | (((unsigned long)(PPCOWNER)) << GPIIOPPPCOWNER_PPCOWNER_SHIFT);\
}
#define GPIIOPPPCOWNER_PAD0_SIZE	8
#define GPIIOPPPCOWNER_PAD0_SHIFT	24
#define GPIIOPPPCOWNER_PAD0_MASK	0xff000000
#define GPIIOPPPCOWNER_GET_PAD0(GPIIOPPPCOWNER) \
	((((unsigned long)(GPIIOPPPCOWNER)) & GPIIOPPPCOWNER_PAD0_MASK) >> GPIIOPPPCOWNER_PAD0_SHIFT)
#define GPIIOPPPCOWNER_SET_PAD0(GPIIOPPPCOWNER, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << GPIIOPPPCOWNER_PAD0_SIZE)-1))); \
	GPIIOPPPCOWNER = (((unsigned long)(GPIIOPPPCOWNER)) & ~GPIIOPPPCOWNER_PAD0_MASK) | (((unsigned long)(pad0)) << GPIIOPPPCOWNER_PAD0_SHIFT);\
}
#define GPIIOPPPCOWNER_TOTAL_SIZE	32
#define GPIIOPPPCOWNER(PPCOWNER) \
	((((unsigned long)(PPCOWNER)) << GPIIOPPPCOWNER_PPCOWNER_SHIFT))

/*
 *  ACRVI1CFG struct
 */
#define ACRVI1CFG_LACV_SIZE	10
#define ACRVI1CFG_LACV_SHIFT	0
#define ACRVI1CFG_LACV_MASK	0x000003ff
#define ACRVI1CFG_GET_LACV(ACRVI1CFG) \
	((((unsigned long)(ACRVI1CFG)) & ACRVI1CFG_LACV_MASK) >> ACRVI1CFG_LACV_SHIFT)
#define ACRVI1CFG_SET_LACV(ACRVI1CFG, LACV) { \
	FDL_ASSERT(!((LACV) & ~((1 << ACRVI1CFG_LACV_SIZE)-1))); \
	ACRVI1CFG = (((unsigned long)(ACRVI1CFG)) & ~ACRVI1CFG_LACV_MASK) | (((unsigned long)(LACV)) << ACRVI1CFG_LACV_SHIFT);\
}
#define ACRVI1CFG_LPRB_SIZE	6
#define ACRVI1CFG_LPRB_SHIFT	10
#define ACRVI1CFG_LPRB_MASK	0x0000fc00
#define ACRVI1CFG_GET_LPRB(ACRVI1CFG) \
	((((unsigned long)(ACRVI1CFG)) & ACRVI1CFG_LPRB_MASK) >> ACRVI1CFG_LPRB_SHIFT)
#define ACRVI1CFG_SET_LPRB(ACRVI1CFG, LPRB) { \
	FDL_ASSERT(!((LPRB) & ~((1 << ACRVI1CFG_LPRB_SIZE)-1))); \
	ACRVI1CFG = (((unsigned long)(ACRVI1CFG)) & ~ACRVI1CFG_LPRB_MASK) | (((unsigned long)(LPRB)) << ACRVI1CFG_LPRB_SHIFT);\
}
#define ACRVI1CFG_NINTL_IPOL_SIZE	1
#define ACRVI1CFG_NINTL_IPOL_SHIFT	16
#define ACRVI1CFG_NINTL_IPOL_MASK	0x00010000
#define ACRVI1CFG_GET_NINTL_IPOL(ACRVI1CFG) \
	((((unsigned long)(ACRVI1CFG)) & ACRVI1CFG_NINTL_IPOL_MASK) >> ACRVI1CFG_NINTL_IPOL_SHIFT)
#define ACRVI1CFG_SET_NINTL_IPOL(ACRVI1CFG, NINTL_IPOL) { \
	FDL_ASSERT(!((NINTL_IPOL) & ~((1 << ACRVI1CFG_NINTL_IPOL_SIZE)-1))); \
	ACRVI1CFG = (((unsigned long)(ACRVI1CFG)) & ~ACRVI1CFG_NINTL_IPOL_MASK) | (((unsigned long)(NINTL_IPOL)) << ACRVI1CFG_NINTL_IPOL_SHIFT);\
}
#define ACRVI1CFG_VISEL_SIZE	1
#define ACRVI1CFG_VISEL_SHIFT	17
#define ACRVI1CFG_VISEL_MASK	0x00020000
#define ACRVI1CFG_GET_VISEL(ACRVI1CFG) \
	((((unsigned long)(ACRVI1CFG)) & ACRVI1CFG_VISEL_MASK) >> ACRVI1CFG_VISEL_SHIFT)
#define ACRVI1CFG_SET_VISEL(ACRVI1CFG, VISEL) { \
	FDL_ASSERT(!((VISEL) & ~((1 << ACRVI1CFG_VISEL_SIZE)-1))); \
	ACRVI1CFG = (((unsigned long)(ACRVI1CFG)) & ~ACRVI1CFG_VISEL_MASK) | (((unsigned long)(VISEL)) << ACRVI1CFG_VISEL_SHIFT);\
}
#define ACRVI1CFG_PAD0_SIZE	14
#define ACRVI1CFG_PAD0_SHIFT	18
#define ACRVI1CFG_PAD0_MASK	0xfffc0000
#define ACRVI1CFG_GET_PAD0(ACRVI1CFG) \
	((((unsigned long)(ACRVI1CFG)) & ACRVI1CFG_PAD0_MASK) >> ACRVI1CFG_PAD0_SHIFT)
#define ACRVI1CFG_SET_PAD0(ACRVI1CFG, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRVI1CFG_PAD0_SIZE)-1))); \
	ACRVI1CFG = (((unsigned long)(ACRVI1CFG)) & ~ACRVI1CFG_PAD0_MASK) | (((unsigned long)(pad0)) << ACRVI1CFG_PAD0_SHIFT);\
}
#define ACRVI1CFG_TOTAL_SIZE	32
#define ACRVI1CFG(LACV, LPRB, NINTL_IPOL, VISEL) \
	((((unsigned long)(LACV)) << ACRVI1CFG_LACV_SHIFT) | \
	 (((unsigned long)(LPRB)) << ACRVI1CFG_LPRB_SHIFT) | \
	 (((unsigned long)(NINTL_IPOL)) << ACRVI1CFG_NINTL_IPOL_SHIFT) | \
	 (((unsigned long)(VISEL)) << ACRVI1CFG_VISEL_SHIFT))

/*
 *  ACRVISOLIDCLR struct
 */
#define ACRVISOLIDCLR_VI_SOLCLREN_SIZE	1
#define ACRVISOLIDCLR_VI_SOLCLREN_SHIFT	0
#define ACRVISOLIDCLR_VI_SOLCLREN_MASK	0x00000001
#define ACRVISOLIDCLR_GET_VI_SOLCLREN(ACRVISOLIDCLR) \
	((((unsigned long)(ACRVISOLIDCLR)) & ACRVISOLIDCLR_VI_SOLCLREN_MASK) >> ACRVISOLIDCLR_VI_SOLCLREN_SHIFT)
#define ACRVISOLIDCLR_SET_VI_SOLCLREN(ACRVISOLIDCLR, VI_SOLCLREN) { \
	FDL_ASSERT(!((VI_SOLCLREN) & ~((1 << ACRVISOLIDCLR_VI_SOLCLREN_SIZE)-1))); \
	ACRVISOLIDCLR = (((unsigned long)(ACRVISOLIDCLR)) & ~ACRVISOLIDCLR_VI_SOLCLREN_MASK) | (((unsigned long)(VI_SOLCLREN)) << ACRVISOLIDCLR_VI_SOLCLREN_SHIFT);\
}
#define ACRVISOLIDCLR_PAD0_SIZE	7
#define ACRVISOLIDCLR_PAD0_SHIFT	1
#define ACRVISOLIDCLR_PAD0_MASK	0x000000fe
#define ACRVISOLIDCLR_GET_PAD0(ACRVISOLIDCLR) \
	((((unsigned long)(ACRVISOLIDCLR)) & ACRVISOLIDCLR_PAD0_MASK) >> ACRVISOLIDCLR_PAD0_SHIFT)
#define ACRVISOLIDCLR_SET_PAD0(ACRVISOLIDCLR, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRVISOLIDCLR_PAD0_SIZE)-1))); \
	ACRVISOLIDCLR = (((unsigned long)(ACRVISOLIDCLR)) & ~ACRVISOLIDCLR_PAD0_MASK) | (((unsigned long)(pad0)) << ACRVISOLIDCLR_PAD0_SHIFT);\
}
#define ACRVISOLIDCLR_VI_YCOL_SIZE	8
#define ACRVISOLIDCLR_VI_YCOL_SHIFT	8
#define ACRVISOLIDCLR_VI_YCOL_MASK	0x0000ff00
#define ACRVISOLIDCLR_GET_VI_YCOL(ACRVISOLIDCLR) \
	((((unsigned long)(ACRVISOLIDCLR)) & ACRVISOLIDCLR_VI_YCOL_MASK) >> ACRVISOLIDCLR_VI_YCOL_SHIFT)
#define ACRVISOLIDCLR_SET_VI_YCOL(ACRVISOLIDCLR, VI_YCOL) { \
	FDL_ASSERT(!((VI_YCOL) & ~((1 << ACRVISOLIDCLR_VI_YCOL_SIZE)-1))); \
	ACRVISOLIDCLR = (((unsigned long)(ACRVISOLIDCLR)) & ~ACRVISOLIDCLR_VI_YCOL_MASK) | (((unsigned long)(VI_YCOL)) << ACRVISOLIDCLR_VI_YCOL_SHIFT);\
}
#define ACRVISOLIDCLR_VI_UCOL_SIZE	8
#define ACRVISOLIDCLR_VI_UCOL_SHIFT	16
#define ACRVISOLIDCLR_VI_UCOL_MASK	0x00ff0000
#define ACRVISOLIDCLR_GET_VI_UCOL(ACRVISOLIDCLR) \
	((((unsigned long)(ACRVISOLIDCLR)) & ACRVISOLIDCLR_VI_UCOL_MASK) >> ACRVISOLIDCLR_VI_UCOL_SHIFT)
#define ACRVISOLIDCLR_SET_VI_UCOL(ACRVISOLIDCLR, VI_UCOL) { \
	FDL_ASSERT(!((VI_UCOL) & ~((1 << ACRVISOLIDCLR_VI_UCOL_SIZE)-1))); \
	ACRVISOLIDCLR = (((unsigned long)(ACRVISOLIDCLR)) & ~ACRVISOLIDCLR_VI_UCOL_MASK) | (((unsigned long)(VI_UCOL)) << ACRVISOLIDCLR_VI_UCOL_SHIFT);\
}
#define ACRVISOLIDCLR_VI_VCOL_SIZE	8
#define ACRVISOLIDCLR_VI_VCOL_SHIFT	24
#define ACRVISOLIDCLR_VI_VCOL_MASK	0xff000000
#define ACRVISOLIDCLR_GET_VI_VCOL(ACRVISOLIDCLR) \
	((((unsigned long)(ACRVISOLIDCLR)) & ACRVISOLIDCLR_VI_VCOL_MASK) >> ACRVISOLIDCLR_VI_VCOL_SHIFT)
#define ACRVISOLIDCLR_SET_VI_VCOL(ACRVISOLIDCLR, VI_VCOL) { \
	FDL_ASSERT(!((VI_VCOL) & ~((1 << ACRVISOLIDCLR_VI_VCOL_SIZE)-1))); \
	ACRVISOLIDCLR = (((unsigned long)(ACRVISOLIDCLR)) & ~ACRVISOLIDCLR_VI_VCOL_MASK) | (((unsigned long)(VI_VCOL)) << ACRVISOLIDCLR_VI_VCOL_SHIFT);\
}
#define ACRVISOLIDCLR_TOTAL_SIZE	32
#define ACRVISOLIDCLR(VI_SOLCLREN, VI_YCOL, VI_UCOL, VI_VCOL) \
	((((unsigned long)(VI_SOLCLREN)) << ACRVISOLIDCLR_VI_SOLCLREN_SHIFT) | \
	 (((unsigned long)(VI_YCOL)) << ACRVISOLIDCLR_VI_YCOL_SHIFT) | \
	 (((unsigned long)(VI_UCOL)) << ACRVISOLIDCLR_VI_UCOL_SHIFT) | \
	 (((unsigned long)(VI_VCOL)) << ACRVISOLIDCLR_VI_VCOL_SHIFT))

/*
 *  ACRVIDIM struct
 */
#define ACRVIDIM_CHROMA_SHFT_SIZE	3
#define ACRVIDIM_CHROMA_SHFT_SHIFT	0
#define ACRVIDIM_CHROMA_SHFT_MASK	0x00000007
#define ACRVIDIM_GET_CHROMA_SHFT(ACRVIDIM) \
	((((unsigned long)(ACRVIDIM)) & ACRVIDIM_CHROMA_SHFT_MASK) >> ACRVIDIM_CHROMA_SHFT_SHIFT)
#define ACRVIDIM_SET_CHROMA_SHFT(ACRVIDIM, CHROMA_SHFT) { \
	FDL_ASSERT(!((CHROMA_SHFT) & ~((1 << ACRVIDIM_CHROMA_SHFT_SIZE)-1))); \
	ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_CHROMA_SHFT_MASK) | (((unsigned long)(CHROMA_SHFT)) << ACRVIDIM_CHROMA_SHFT_SHIFT);\
}
#define ACRVIDIM_LUMA_SHFT_SIZE	3
#define ACRVIDIM_LUMA_SHFT_SHIFT	3
#define ACRVIDIM_LUMA_SHFT_MASK	0x00000038
#define ACRVIDIM_GET_LUMA_SHFT(ACRVIDIM) \
	((((unsigned long)(ACRVIDIM)) & ACRVIDIM_LUMA_SHFT_MASK) >> ACRVIDIM_LUMA_SHFT_SHIFT)
#define ACRVIDIM_SET_LUMA_SHFT(ACRVIDIM, LUMA_SHFT) { \
	FDL_ASSERT(!((LUMA_SHFT) & ~((1 << ACRVIDIM_LUMA_SHFT_SIZE)-1))); \
	ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_LUMA_SHFT_MASK) | (((unsigned long)(LUMA_SHFT)) << ACRVIDIM_LUMA_SHFT_SHIFT);\
}
#define ACRVIDIM_DIM_EN_SIZE	1
#define ACRVIDIM_DIM_EN_SHIFT	6
#define ACRVIDIM_DIM_EN_MASK	0x00000040
#define ACRVIDIM_GET_DIM_EN(ACRVIDIM) \
	((((unsigned long)(ACRVIDIM)) & ACRVIDIM_DIM_EN_MASK) >> ACRVIDIM_DIM_EN_SHIFT)
#define ACRVIDIM_SET_DIM_EN(ACRVIDIM, DIM_EN) { \
	FDL_ASSERT(!((DIM_EN) & ~((1 << ACRVIDIM_DIM_EN_SIZE)-1))); \
	ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_DIM_EN_MASK) | (((unsigned long)(DIM_EN)) << ACRVIDIM_DIM_EN_SHIFT);\
}
#define ACRVIDIM_FORCE_DIM_SIZE	1
#define ACRVIDIM_FORCE_DIM_SHIFT	7
#define ACRVIDIM_FORCE_DIM_MASK	0x00000080
#define ACRVIDIM_GET_FORCE_DIM(ACRVIDIM) \
	((((unsigned long)(ACRVIDIM)) & ACRVIDIM_FORCE_DIM_MASK) >> ACRVIDIM_FORCE_DIM_SHIFT)
#define ACRVIDIM_SET_FORCE_DIM(ACRVIDIM, FORCE_DIM) { \
	FDL_ASSERT(!((FORCE_DIM) & ~((1 << ACRVIDIM_FORCE_DIM_SIZE)-1))); \
	ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_FORCE_DIM_MASK) | (((unsigned long)(FORCE_DIM)) << ACRVIDIM_FORCE_DIM_SHIFT);\
}
#define ACRVIDIM_PAD0_SIZE	24
#define ACRVIDIM_PAD0_SHIFT	8
#define ACRVIDIM_PAD0_MASK	0xffffff00
#define ACRVIDIM_GET_PAD0(ACRVIDIM) \
	((((unsigned long)(ACRVIDIM)) & ACRVIDIM_PAD0_MASK) >> ACRVIDIM_PAD0_SHIFT)
#define ACRVIDIM_SET_PAD0(ACRVIDIM, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRVIDIM_PAD0_SIZE)-1))); \
	ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_PAD0_MASK) | (((unsigned long)(pad0)) << ACRVIDIM_PAD0_SHIFT);\
}
#define ACRVIDIM_TOTAL_SIZE	32
#define ACRVIDIM(CHROMA_SHFT, LUMA_SHFT, DIM_EN, FORCE_DIM) \
	((((unsigned long)(CHROMA_SHFT)) << ACRVIDIM_CHROMA_SHFT_SHIFT) | \
	 (((unsigned long)(LUMA_SHFT)) << ACRVIDIM_LUMA_SHFT_SHIFT) | \
	 (((unsigned long)(DIM_EN)) << ACRVIDIM_DIM_EN_SHIFT) | \
	 (((unsigned long)(FORCE_DIM)) << ACRVIDIM_FORCE_DIM_SHIFT))

/*
 *  ACRHDCFG struct
 */
#define ACRHDCFG_CONEXANT_EN_SIZE	1
#define ACRHDCFG_CONEXANT_EN_SHIFT	0
#define ACRHDCFG_CONEXANT_EN_MASK	0x00000001
#define ACRHDCFG_GET_CONEXANT_EN(ACRHDCFG) \
	((((unsigned long)(ACRHDCFG)) & ACRHDCFG_CONEXANT_EN_MASK) >> ACRHDCFG_CONEXANT_EN_SHIFT)
#define ACRHDCFG_SET_CONEXANT_EN(ACRHDCFG, CONEXANT_EN) { \
	FDL_ASSERT(!((CONEXANT_EN) & ~((1 << ACRHDCFG_CONEXANT_EN_SIZE)-1))); \
	ACRHDCFG = (((unsigned long)(ACRHDCFG)) & ~ACRHDCFG_CONEXANT_EN_MASK) | (((unsigned long)(CONEXANT_EN)) << ACRHDCFG_CONEXANT_EN_SHIFT);\
}
#define ACRHDCFG_HD_EN_SIZE	1
#define ACRHDCFG_HD_EN_SHIFT	1
#define ACRHDCFG_HD_EN_MASK	0x00000002
#define ACRHDCFG_GET_HD_EN(ACRHDCFG) \
	((((unsigned long)(ACRHDCFG)) & ACRHDCFG_HD_EN_MASK) >> ACRHDCFG_HD_EN_SHIFT)
#define ACRHDCFG_SET_HD_EN(ACRHDCFG, HD_EN) { \
	FDL_ASSERT(!((HD_EN) & ~((1 << ACRHDCFG_HD_EN_SIZE)-1))); \
	ACRHDCFG = (((unsigned long)(ACRHDCFG)) & ~ACRHDCFG_HD_EN_MASK) | (((unsigned long)(HD_EN)) << ACRHDCFG_HD_EN_SHIFT);\
}
#define ACRHDCFG_CFGADDR_SIZE	3
#define ACRHDCFG_CFGADDR_SHIFT	2
#define ACRHDCFG_CFGADDR_MASK	0x0000001c
#define ACRHDCFG_GET_CFGADDR(ACRHDCFG) \
	((((unsigned long)(ACRHDCFG)) & ACRHDCFG_CFGADDR_MASK) >> ACRHDCFG_CFGADDR_SHIFT)
#define ACRHDCFG_SET_CFGADDR(ACRHDCFG, CFGADDR) { \
	FDL_ASSERT(!((CFGADDR) & ~((1 << ACRHDCFG_CFGADDR_SIZE)-1))); \
	ACRHDCFG = (((unsigned long)(ACRHDCFG)) & ~ACRHDCFG_CFGADDR_MASK) | (((unsigned long)(CFGADDR)) << ACRHDCFG_CFGADDR_SHIFT);\
}
#define ACRHDCFG_PAD0_SIZE	27
#define ACRHDCFG_PAD0_SHIFT	5
#define ACRHDCFG_PAD0_MASK	0xffffffe0
#define ACRHDCFG_GET_PAD0(ACRHDCFG) \
	((((unsigned long)(ACRHDCFG)) & ACRHDCFG_PAD0_MASK) >> ACRHDCFG_PAD0_SHIFT)
#define ACRHDCFG_SET_PAD0(ACRHDCFG, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRHDCFG_PAD0_SIZE)-1))); \
	ACRHDCFG = (((unsigned long)(ACRHDCFG)) & ~ACRHDCFG_PAD0_MASK) | (((unsigned long)(pad0)) << ACRHDCFG_PAD0_SHIFT);\
}
#define ACRHDCFG_TOTAL_SIZE	32
#define ACRHDCFG(CONEXANT_EN, HD_EN, CFGADDR) \
	((((unsigned long)(CONEXANT_EN)) << ACRHDCFG_CONEXANT_EN_SHIFT) | \
	 (((unsigned long)(HD_EN)) << ACRHDCFG_HD_EN_SHIFT) | \
	 (((unsigned long)(CFGADDR)) << ACRHDCFG_CFGADDR_SHIFT))

/*
 *  ACRVICFGDATA struct
 */
#define ACRVICFGDATA_CFGDATA_SIZE	32
#define ACRVICFGDATA_CFGDATA_SHIFT	0
#define ACRVICFGDATA_CFGDATA_MASK	0xffffffff
#define ACRVICFGDATA_GET_CFGDATA(ACRVICFGDATA) \
	((((unsigned long)(ACRVICFGDATA)) & ACRVICFGDATA_CFGDATA_MASK) >> ACRVICFGDATA_CFGDATA_SHIFT)
#define ACRVICFGDATA_SET_CFGDATA(ACRVICFGDATA, CFGDATA) { \
	FDL_ASSERT(!((CFGDATA) & ~((1 << ACRVICFGDATA_CFGDATA_SIZE)-1))); \
	ACRVICFGDATA = (((unsigned long)(ACRVICFGDATA)) & ~ACRVICFGDATA_CFGDATA_MASK) | (((unsigned long)(CFGDATA)) << ACRVICFGDATA_CFGDATA_SHIFT);\
}
#define ACRVICFGDATA_TOTAL_SIZE	32
#define ACRVICFGDATA(CFGDATA) \
	((((unsigned long)(CFGDATA)) << ACRVICFGDATA_CFGDATA_SHIFT))

/*
 *  ACRMEMTSTN struct
 */
#define ACRMEMTSTN_IDATAN_SIZE	1
#define ACRMEMTSTN_IDATAN_SHIFT	0
#define ACRMEMTSTN_IDATAN_MASK	0x00000001
#define ACRMEMTSTN_GET_IDATAN(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_IDATAN_MASK) >> ACRMEMTSTN_IDATAN_SHIFT)
#define ACRMEMTSTN_SET_IDATAN(ACRMEMTSTN, IDATAN) { \
	FDL_ASSERT(!((IDATAN) & ~((1 << ACRMEMTSTN_IDATAN_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_IDATAN_MASK) | (((unsigned long)(IDATAN)) << ACRMEMTSTN_IDATAN_SHIFT);\
}
#define ACRMEMTSTN_REFVEBN_SIZE	1
#define ACRMEMTSTN_REFVEBN_SHIFT	1
#define ACRMEMTSTN_REFVEBN_MASK	0x00000002
#define ACRMEMTSTN_GET_REFVEBN(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_REFVEBN_MASK) >> ACRMEMTSTN_REFVEBN_SHIFT)
#define ACRMEMTSTN_SET_REFVEBN(ACRMEMTSTN, REFVEBN) { \
	FDL_ASSERT(!((REFVEBN) & ~((1 << ACRMEMTSTN_REFVEBN_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_REFVEBN_MASK) | (((unsigned long)(REFVEBN)) << ACRMEMTSTN_REFVEBN_SHIFT);\
}
#define ACRMEMTSTN_PSTRN_SIZE	5
#define ACRMEMTSTN_PSTRN_SHIFT	2
#define ACRMEMTSTN_PSTRN_MASK	0x0000007c
#define ACRMEMTSTN_GET_PSTRN(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_PSTRN_MASK) >> ACRMEMTSTN_PSTRN_SHIFT)
#define ACRMEMTSTN_SET_PSTRN(ACRMEMTSTN, PSTRN) { \
	FDL_ASSERT(!((PSTRN) & ~((1 << ACRMEMTSTN_PSTRN_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_PSTRN_MASK) | (((unsigned long)(PSTRN)) << ACRMEMTSTN_PSTRN_SHIFT);\
}
#define ACRMEMTSTN_NSTRN_SIZE	5
#define ACRMEMTSTN_NSTRN_SHIFT	7
#define ACRMEMTSTN_NSTRN_MASK	0x00000f80
#define ACRMEMTSTN_GET_NSTRN(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_NSTRN_MASK) >> ACRMEMTSTN_NSTRN_SHIFT)
#define ACRMEMTSTN_SET_NSTRN(ACRMEMTSTN, NSTRN) { \
	FDL_ASSERT(!((NSTRN) & ~((1 << ACRMEMTSTN_NSTRN_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_NSTRN_MASK) | (((unsigned long)(NSTRN)) << ACRMEMTSTN_NSTRN_SHIFT);\
}
#define ACRMEMTSTN_OEN_SIZE	3
#define ACRMEMTSTN_OEN_SHIFT	12
#define ACRMEMTSTN_OEN_MASK	0x00007000
#define ACRMEMTSTN_GET_OEN(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_OEN_MASK) >> ACRMEMTSTN_OEN_SHIFT)
#define ACRMEMTSTN_SET_OEN(ACRMEMTSTN, OEN) { \
	FDL_ASSERT(!((OEN) & ~((1 << ACRMEMTSTN_OEN_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_OEN_MASK) | (((unsigned long)(OEN)) << ACRMEMTSTN_OEN_SHIFT);\
}
#define ACRMEMTSTN_ODATAN_SIZE	3
#define ACRMEMTSTN_ODATAN_SHIFT	15
#define ACRMEMTSTN_ODATAN_MASK	0x00038000
#define ACRMEMTSTN_GET_ODATAN(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_ODATAN_MASK) >> ACRMEMTSTN_ODATAN_SHIFT)
#define ACRMEMTSTN_SET_ODATAN(ACRMEMTSTN, ODATAN) { \
	FDL_ASSERT(!((ODATAN) & ~((1 << ACRMEMTSTN_ODATAN_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_ODATAN_MASK) | (((unsigned long)(ODATAN)) << ACRMEMTSTN_ODATAN_SHIFT);\
}
#define ACRMEMTSTN_VREF_INT_SIZE	2
#define ACRMEMTSTN_VREF_INT_SHIFT	18
#define ACRMEMTSTN_VREF_INT_MASK	0x000c0000
#define ACRMEMTSTN_GET_VREF_INT(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_VREF_INT_MASK) >> ACRMEMTSTN_VREF_INT_SHIFT)
#define ACRMEMTSTN_SET_VREF_INT(ACRMEMTSTN, VREF_INT) { \
	FDL_ASSERT(!((VREF_INT) & ~((1 << ACRMEMTSTN_VREF_INT_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_VREF_INT_MASK) | (((unsigned long)(VREF_INT)) << ACRMEMTSTN_VREF_INT_SHIFT);\
}
#define ACRMEMTSTN_PAD0_SIZE	12
#define ACRMEMTSTN_PAD0_SHIFT	20
#define ACRMEMTSTN_PAD0_MASK	0xfff00000
#define ACRMEMTSTN_GET_PAD0(ACRMEMTSTN) \
	((((unsigned long)(ACRMEMTSTN)) & ACRMEMTSTN_PAD0_MASK) >> ACRMEMTSTN_PAD0_SHIFT)
#define ACRMEMTSTN_SET_PAD0(ACRMEMTSTN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRMEMTSTN_PAD0_SIZE)-1))); \
	ACRMEMTSTN = (((unsigned long)(ACRMEMTSTN)) & ~ACRMEMTSTN_PAD0_MASK) | (((unsigned long)(pad0)) << ACRMEMTSTN_PAD0_SHIFT);\
}
#define ACRMEMTSTN_TOTAL_SIZE	32
#define ACRMEMTSTN(IDATAN, REFVEBN, PSTRN, NSTRN, OEN, ODATAN, VREF_INT) \
	((((unsigned long)(IDATAN)) << ACRMEMTSTN_IDATAN_SHIFT) | \
	 (((unsigned long)(REFVEBN)) << ACRMEMTSTN_REFVEBN_SHIFT) | \
	 (((unsigned long)(PSTRN)) << ACRMEMTSTN_PSTRN_SHIFT) | \
	 (((unsigned long)(NSTRN)) << ACRMEMTSTN_NSTRN_SHIFT) | \
	 (((unsigned long)(OEN)) << ACRMEMTSTN_OEN_SHIFT) | \
	 (((unsigned long)(ODATAN)) << ACRMEMTSTN_ODATAN_SHIFT) | \
	 (((unsigned long)(VREF_INT)) << ACRMEMTSTN_VREF_INT_SHIFT))

/*
 *  ACRMEMTSTP struct
 */
#define ACRMEMTSTP_IDATAP_SIZE	1
#define ACRMEMTSTP_IDATAP_SHIFT	0
#define ACRMEMTSTP_IDATAP_MASK	0x00000001
#define ACRMEMTSTP_GET_IDATAP(ACRMEMTSTP) \
	((((unsigned long)(ACRMEMTSTP)) & ACRMEMTSTP_IDATAP_MASK) >> ACRMEMTSTP_IDATAP_SHIFT)
#define ACRMEMTSTP_SET_IDATAP(ACRMEMTSTP, IDATAP) { \
	FDL_ASSERT(!((IDATAP) & ~((1 << ACRMEMTSTP_IDATAP_SIZE)-1))); \
	ACRMEMTSTP = (((unsigned long)(ACRMEMTSTP)) & ~ACRMEMTSTP_IDATAP_MASK) | (((unsigned long)(IDATAP)) << ACRMEMTSTP_IDATAP_SHIFT);\
}
#define ACRMEMTSTP_REFVEBP_SIZE	1
#define ACRMEMTSTP_REFVEBP_SHIFT	1
#define ACRMEMTSTP_REFVEBP_MASK	0x00000002
#define ACRMEMTSTP_GET_REFVEBP(ACRMEMTSTP) \
	((((unsigned long)(ACRMEMTSTP)) & ACRMEMTSTP_REFVEBP_MASK) >> ACRMEMTSTP_REFVEBP_SHIFT)
#define ACRMEMTSTP_SET_REFVEBP(ACRMEMTSTP, REFVEBP) { \
	FDL_ASSERT(!((REFVEBP) & ~((1 << ACRMEMTSTP_REFVEBP_SIZE)-1))); \
	ACRMEMTSTP = (((unsigned long)(ACRMEMTSTP)) & ~ACRMEMTSTP_REFVEBP_MASK) | (((unsigned long)(REFVEBP)) << ACRMEMTSTP_REFVEBP_SHIFT);\
}
#define ACRMEMTSTP_PSTRP_SIZE	5
#define ACRMEMTSTP_PSTRP_SHIFT	2
#define ACRMEMTSTP_PSTRP_MASK	0x0000007c
#define ACRMEMTSTP_GET_PSTRP(ACRMEMTSTP) \
	((((unsigned long)(ACRMEMTSTP)) & ACRMEMTSTP_PSTRP_MASK) >> ACRMEMTSTP_PSTRP_SHIFT)
#define ACRMEMTSTP_SET_PSTRP(ACRMEMTSTP, PSTRP) { \
	FDL_ASSERT(!((PSTRP) & ~((1 << ACRMEMTSTP_PSTRP_SIZE)-1))); \
	ACRMEMTSTP = (((unsigned long)(ACRMEMTSTP)) & ~ACRMEMTSTP_PSTRP_MASK) | (((unsigned long)(PSTRP)) << ACRMEMTSTP_PSTRP_SHIFT);\
}
#define ACRMEMTSTP_NSTRP_SIZE	5
#define ACRMEMTSTP_NSTRP_SHIFT	7
#define ACRMEMTSTP_NSTRP_MASK	0x00000f80
#define ACRMEMTSTP_GET_NSTRP(ACRMEMTSTP) \
	((((unsigned long)(ACRMEMTSTP)) & ACRMEMTSTP_NSTRP_MASK) >> ACRMEMTSTP_NSTRP_SHIFT)
#define ACRMEMTSTP_SET_NSTRP(ACRMEMTSTP, NSTRP) { \
	FDL_ASSERT(!((NSTRP) & ~((1 << ACRMEMTSTP_NSTRP_SIZE)-1))); \
	ACRMEMTSTP = (((unsigned long)(ACRMEMTSTP)) & ~ACRMEMTSTP_NSTRP_MASK) | (((unsigned long)(NSTRP)) << ACRMEMTSTP_NSTRP_SHIFT);\
}
#define ACRMEMTSTP_OEP_SIZE	3
#define ACRMEMTSTP_OEP_SHIFT	12
#define ACRMEMTSTP_OEP_MASK	0x00007000
#define ACRMEMTSTP_GET_OEP(ACRMEMTSTP) \
	((((unsigned long)(ACRMEMTSTP)) & ACRMEMTSTP_OEP_MASK) >> ACRMEMTSTP_OEP_SHIFT)
#define ACRMEMTSTP_SET_OEP(ACRMEMTSTP, OEP) { \
	FDL_ASSERT(!((OEP) & ~((1 << ACRMEMTSTP_OEP_SIZE)-1))); \
	ACRMEMTSTP = (((unsigned long)(ACRMEMTSTP)) & ~ACRMEMTSTP_OEP_MASK) | (((unsigned long)(OEP)) << ACRMEMTSTP_OEP_SHIFT);\
}
#define ACRMEMTSTP_ODATAP_SIZE	3
#define ACRMEMTSTP_ODATAP_SHIFT	15
#define ACRMEMTSTP_ODATAP_MASK	0x00038000
#define ACRMEMTSTP_GET_ODATAP(ACRMEMTSTP) \
	((((unsigned long)(ACRMEMTSTP)) & ACRMEMTSTP_ODATAP_MASK) >> ACRMEMTSTP_ODATAP_SHIFT)
#define ACRMEMTSTP_SET_ODATAP(ACRMEMTSTP, ODATAP) { \
	FDL_ASSERT(!((ODATAP) & ~((1 << ACRMEMTSTP_ODATAP_SIZE)-1))); \
	ACRMEMTSTP = (((unsigned long)(ACRMEMTSTP)) & ~ACRMEMTSTP_ODATAP_MASK) | (((unsigned long)(ODATAP)) << ACRMEMTSTP_ODATAP_SHIFT);\
}
#define ACRMEMTSTP_PAD0_SIZE	14
#define ACRMEMTSTP_PAD0_SHIFT	18
#define ACRMEMTSTP_PAD0_MASK	0xfffc0000
#define ACRMEMTSTP_GET_PAD0(ACRMEMTSTP) \
	((((unsigned long)(ACRMEMTSTP)) & ACRMEMTSTP_PAD0_MASK) >> ACRMEMTSTP_PAD0_SHIFT)
#define ACRMEMTSTP_SET_PAD0(ACRMEMTSTP, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRMEMTSTP_PAD0_SIZE)-1))); \
	ACRMEMTSTP = (((unsigned long)(ACRMEMTSTP)) & ~ACRMEMTSTP_PAD0_MASK) | (((unsigned long)(pad0)) << ACRMEMTSTP_PAD0_SHIFT);\
}
#define ACRMEMTSTP_TOTAL_SIZE	32
#define ACRMEMTSTP(IDATAP, REFVEBP, PSTRP, NSTRP, OEP, ODATAP) \
	((((unsigned long)(IDATAP)) << ACRMEMTSTP_IDATAP_SHIFT) | \
	 (((unsigned long)(REFVEBP)) << ACRMEMTSTP_REFVEBP_SHIFT) | \
	 (((unsigned long)(PSTRP)) << ACRMEMTSTP_PSTRP_SHIFT) | \
	 (((unsigned long)(NSTRP)) << ACRMEMTSTP_NSTRP_SHIFT) | \
	 (((unsigned long)(OEP)) << ACRMEMTSTP_OEP_SHIFT) | \
	 (((unsigned long)(ODATAP)) << ACRMEMTSTP_ODATAP_SHIFT))

/*
 *  ACRSIFRMCNT struct
 */
#define ACRSIFRMCNT_COUNT_SIZE	16
#define ACRSIFRMCNT_COUNT_SHIFT	0
#define ACRSIFRMCNT_COUNT_MASK	0x0000ffff
#define ACRSIFRMCNT_GET_COUNT(ACRSIFRMCNT) \
	((((unsigned long)(ACRSIFRMCNT)) & ACRSIFRMCNT_COUNT_MASK) >> ACRSIFRMCNT_COUNT_SHIFT)
#define ACRSIFRMCNT_SET_COUNT(ACRSIFRMCNT, COUNT) { \
	FDL_ASSERT(!((COUNT) & ~((1 << ACRSIFRMCNT_COUNT_SIZE)-1))); \
	ACRSIFRMCNT = (((unsigned long)(ACRSIFRMCNT)) & ~ACRSIFRMCNT_COUNT_MASK) | (((unsigned long)(COUNT)) << ACRSIFRMCNT_COUNT_SHIFT);\
}
#define ACRSIFRMCNT_RF_IDLE_SIZE	1
#define ACRSIFRMCNT_RF_IDLE_SHIFT	16
#define ACRSIFRMCNT_RF_IDLE_MASK	0x00010000
#define ACRSIFRMCNT_GET_RF_IDLE(ACRSIFRMCNT) \
	((((unsigned long)(ACRSIFRMCNT)) & ACRSIFRMCNT_RF_IDLE_MASK) >> ACRSIFRMCNT_RF_IDLE_SHIFT)
#define ACRSIFRMCNT_SET_RF_IDLE(ACRSIFRMCNT, RF_IDLE) { \
	FDL_ASSERT(!((RF_IDLE) & ~((1 << ACRSIFRMCNT_RF_IDLE_SIZE)-1))); \
	ACRSIFRMCNT = (((unsigned long)(ACRSIFRMCNT)) & ~ACRSIFRMCNT_RF_IDLE_MASK) | (((unsigned long)(RF_IDLE)) << ACRSIFRMCNT_RF_IDLE_SHIFT);\
}
#define ACRSIFRMCNT_PAD0_SIZE	15
#define ACRSIFRMCNT_PAD0_SHIFT	17
#define ACRSIFRMCNT_PAD0_MASK	0xfffe0000
#define ACRSIFRMCNT_GET_PAD0(ACRSIFRMCNT) \
	((((unsigned long)(ACRSIFRMCNT)) & ACRSIFRMCNT_PAD0_MASK) >> ACRSIFRMCNT_PAD0_SHIFT)
#define ACRSIFRMCNT_SET_PAD0(ACRSIFRMCNT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRSIFRMCNT_PAD0_SIZE)-1))); \
	ACRSIFRMCNT = (((unsigned long)(ACRSIFRMCNT)) & ~ACRSIFRMCNT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSIFRMCNT_PAD0_SHIFT);\
}
#define ACRSIFRMCNT_TOTAL_SIZE	32
#define ACRSIFRMCNT(COUNT, RF_IDLE) \
	((((unsigned long)(COUNT)) << ACRSIFRMCNT_COUNT_SHIFT) | \
	 (((unsigned long)(RF_IDLE)) << ACRSIFRMCNT_RF_IDLE_SHIFT))

/*
 *  ACRDBGCLK struct
 */
#define ACRDBGCLK_OBS_CLK0_EN_SIZE	1
#define ACRDBGCLK_OBS_CLK0_EN_SHIFT	0
#define ACRDBGCLK_OBS_CLK0_EN_MASK	0x00000001
#define ACRDBGCLK_GET_OBS_CLK0_EN(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK0_EN_MASK) >> ACRDBGCLK_OBS_CLK0_EN_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK0_EN(ACRDBGCLK, OBS_CLK0_EN) { \
	FDL_ASSERT(!((OBS_CLK0_EN) & ~((1 << ACRDBGCLK_OBS_CLK0_EN_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK0_EN_MASK) | (((unsigned long)(OBS_CLK0_EN)) << ACRDBGCLK_OBS_CLK0_EN_SHIFT);\
}
#define ACRDBGCLK_OBS_CLK0_SEL_SIZE	3
#define ACRDBGCLK_OBS_CLK0_SEL_SHIFT	1
#define ACRDBGCLK_OBS_CLK0_SEL_MASK	0x0000000e
#define ACRDBGCLK_GET_OBS_CLK0_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK0_SEL_MASK) >> ACRDBGCLK_OBS_CLK0_SEL_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK0_SEL(ACRDBGCLK, OBS_CLK0_SEL) { \
	FDL_ASSERT(!((OBS_CLK0_SEL) & ~((1 << ACRDBGCLK_OBS_CLK0_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK0_SEL_MASK) | (((unsigned long)(OBS_CLK0_SEL)) << ACRDBGCLK_OBS_CLK0_SEL_SHIFT);\
}
#define ACRDBGCLK_OBS_CLK0_DIV_SIZE	3
#define ACRDBGCLK_OBS_CLK0_DIV_SHIFT	4
#define ACRDBGCLK_OBS_CLK0_DIV_MASK	0x00000070
#define ACRDBGCLK_GET_OBS_CLK0_DIV(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK0_DIV_MASK) >> ACRDBGCLK_OBS_CLK0_DIV_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK0_DIV(ACRDBGCLK, OBS_CLK0_DIV) { \
	FDL_ASSERT(!((OBS_CLK0_DIV) & ~((1 << ACRDBGCLK_OBS_CLK0_DIV_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK0_DIV_MASK) | (((unsigned long)(OBS_CLK0_DIV)) << ACRDBGCLK_OBS_CLK0_DIV_SHIFT);\
}
#define ACRDBGCLK_OBS_CLK0_INV_SIZE	1
#define ACRDBGCLK_OBS_CLK0_INV_SHIFT	7
#define ACRDBGCLK_OBS_CLK0_INV_MASK	0x00000080
#define ACRDBGCLK_GET_OBS_CLK0_INV(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK0_INV_MASK) >> ACRDBGCLK_OBS_CLK0_INV_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK0_INV(ACRDBGCLK, OBS_CLK0_INV) { \
	FDL_ASSERT(!((OBS_CLK0_INV) & ~((1 << ACRDBGCLK_OBS_CLK0_INV_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK0_INV_MASK) | (((unsigned long)(OBS_CLK0_INV)) << ACRDBGCLK_OBS_CLK0_INV_SHIFT);\
}
#define ACRDBGCLK_OBS_CLK1_EN_SIZE	1
#define ACRDBGCLK_OBS_CLK1_EN_SHIFT	8
#define ACRDBGCLK_OBS_CLK1_EN_MASK	0x00000100
#define ACRDBGCLK_GET_OBS_CLK1_EN(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK1_EN_MASK) >> ACRDBGCLK_OBS_CLK1_EN_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK1_EN(ACRDBGCLK, OBS_CLK1_EN) { \
	FDL_ASSERT(!((OBS_CLK1_EN) & ~((1 << ACRDBGCLK_OBS_CLK1_EN_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK1_EN_MASK) | (((unsigned long)(OBS_CLK1_EN)) << ACRDBGCLK_OBS_CLK1_EN_SHIFT);\
}
#define ACRDBGCLK_OBS_CLK1_SEL_SIZE	3
#define ACRDBGCLK_OBS_CLK1_SEL_SHIFT	9
#define ACRDBGCLK_OBS_CLK1_SEL_MASK	0x00000e00
#define ACRDBGCLK_GET_OBS_CLK1_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK1_SEL_MASK) >> ACRDBGCLK_OBS_CLK1_SEL_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK1_SEL(ACRDBGCLK, OBS_CLK1_SEL) { \
	FDL_ASSERT(!((OBS_CLK1_SEL) & ~((1 << ACRDBGCLK_OBS_CLK1_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK1_SEL_MASK) | (((unsigned long)(OBS_CLK1_SEL)) << ACRDBGCLK_OBS_CLK1_SEL_SHIFT);\
}
#define ACRDBGCLK_OBS_CLK1_DIV_SIZE	3
#define ACRDBGCLK_OBS_CLK1_DIV_SHIFT	12
#define ACRDBGCLK_OBS_CLK1_DIV_MASK	0x00007000
#define ACRDBGCLK_GET_OBS_CLK1_DIV(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK1_DIV_MASK) >> ACRDBGCLK_OBS_CLK1_DIV_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK1_DIV(ACRDBGCLK, OBS_CLK1_DIV) { \
	FDL_ASSERT(!((OBS_CLK1_DIV) & ~((1 << ACRDBGCLK_OBS_CLK1_DIV_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK1_DIV_MASK) | (((unsigned long)(OBS_CLK1_DIV)) << ACRDBGCLK_OBS_CLK1_DIV_SHIFT);\
}
#define ACRDBGCLK_OBS_CLK1_INV_SIZE	1
#define ACRDBGCLK_OBS_CLK1_INV_SHIFT	15
#define ACRDBGCLK_OBS_CLK1_INV_MASK	0x00008000
#define ACRDBGCLK_GET_OBS_CLK1_INV(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_OBS_CLK1_INV_MASK) >> ACRDBGCLK_OBS_CLK1_INV_SHIFT)
#define ACRDBGCLK_SET_OBS_CLK1_INV(ACRDBGCLK, OBS_CLK1_INV) { \
	FDL_ASSERT(!((OBS_CLK1_INV) & ~((1 << ACRDBGCLK_OBS_CLK1_INV_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_OBS_CLK1_INV_MASK) | (((unsigned long)(OBS_CLK1_INV)) << ACRDBGCLK_OBS_CLK1_INV_SHIFT);\
}
#define ACRDBGCLK_DBG_CLK_SYSPLL_SEL_SIZE	1
#define ACRDBGCLK_DBG_CLK_SYSPLL_SEL_SHIFT	16
#define ACRDBGCLK_DBG_CLK_SYSPLL_SEL_MASK	0x00010000
#define ACRDBGCLK_GET_DBG_CLK_SYSPLL_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_DBG_CLK_SYSPLL_SEL_MASK) >> ACRDBGCLK_DBG_CLK_SYSPLL_SEL_SHIFT)
#define ACRDBGCLK_SET_DBG_CLK_SYSPLL_SEL(ACRDBGCLK, DBG_CLK_SYSPLL_SEL) { \
	FDL_ASSERT(!((DBG_CLK_SYSPLL_SEL) & ~((1 << ACRDBGCLK_DBG_CLK_SYSPLL_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_DBG_CLK_SYSPLL_SEL_MASK) | (((unsigned long)(DBG_CLK_SYSPLL_SEL)) << ACRDBGCLK_DBG_CLK_SYSPLL_SEL_SHIFT);\
}
#define ACRDBGCLK_DBG_CLK_DDRPLL_SEL_SIZE	1
#define ACRDBGCLK_DBG_CLK_DDRPLL_SEL_SHIFT	17
#define ACRDBGCLK_DBG_CLK_DDRPLL_SEL_MASK	0x00020000
#define ACRDBGCLK_GET_DBG_CLK_DDRPLL_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_DBG_CLK_DDRPLL_SEL_MASK) >> ACRDBGCLK_DBG_CLK_DDRPLL_SEL_SHIFT)
#define ACRDBGCLK_SET_DBG_CLK_DDRPLL_SEL(ACRDBGCLK, DBG_CLK_DDRPLL_SEL) { \
	FDL_ASSERT(!((DBG_CLK_DDRPLL_SEL) & ~((1 << ACRDBGCLK_DBG_CLK_DDRPLL_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_DBG_CLK_DDRPLL_SEL_MASK) | (((unsigned long)(DBG_CLK_DDRPLL_SEL)) << ACRDBGCLK_DBG_CLK_DDRPLL_SEL_SHIFT);\
}
#define ACRDBGCLK_DBG_CLK_VLCLK_SEL_SIZE	1
#define ACRDBGCLK_DBG_CLK_VLCLK_SEL_SHIFT	18
#define ACRDBGCLK_DBG_CLK_VLCLK_SEL_MASK	0x00040000
#define ACRDBGCLK_GET_DBG_CLK_VLCLK_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_DBG_CLK_VLCLK_SEL_MASK) >> ACRDBGCLK_DBG_CLK_VLCLK_SEL_SHIFT)
#define ACRDBGCLK_SET_DBG_CLK_VLCLK_SEL(ACRDBGCLK, DBG_CLK_VLCLK_SEL) { \
	FDL_ASSERT(!((DBG_CLK_VLCLK_SEL) & ~((1 << ACRDBGCLK_DBG_CLK_VLCLK_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_DBG_CLK_VLCLK_SEL_MASK) | (((unsigned long)(DBG_CLK_VLCLK_SEL)) << ACRDBGCLK_DBG_CLK_VLCLK_SEL_SHIFT);\
}
#define ACRDBGCLK_DBG_CLK_VCCLK_SEL_SIZE	1
#define ACRDBGCLK_DBG_CLK_VCCLK_SEL_SHIFT	19
#define ACRDBGCLK_DBG_CLK_VCCLK_SEL_MASK	0x00080000
#define ACRDBGCLK_GET_DBG_CLK_VCCLK_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_DBG_CLK_VCCLK_SEL_MASK) >> ACRDBGCLK_DBG_CLK_VCCLK_SEL_SHIFT)
#define ACRDBGCLK_SET_DBG_CLK_VCCLK_SEL(ACRDBGCLK, DBG_CLK_VCCLK_SEL) { \
	FDL_ASSERT(!((DBG_CLK_VCCLK_SEL) & ~((1 << ACRDBGCLK_DBG_CLK_VCCLK_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_DBG_CLK_VCCLK_SEL_MASK) | (((unsigned long)(DBG_CLK_VCCLK_SEL)) << ACRDBGCLK_DBG_CLK_VCCLK_SEL_SHIFT);\
}
#define ACRDBGCLK_DBG_CLK_AIPLL_SEL_SIZE	1
#define ACRDBGCLK_DBG_CLK_AIPLL_SEL_SHIFT	20
#define ACRDBGCLK_DBG_CLK_AIPLL_SEL_MASK	0x00100000
#define ACRDBGCLK_GET_DBG_CLK_AIPLL_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_DBG_CLK_AIPLL_SEL_MASK) >> ACRDBGCLK_DBG_CLK_AIPLL_SEL_SHIFT)
#define ACRDBGCLK_SET_DBG_CLK_AIPLL_SEL(ACRDBGCLK, DBG_CLK_AIPLL_SEL) { \
	FDL_ASSERT(!((DBG_CLK_AIPLL_SEL) & ~((1 << ACRDBGCLK_DBG_CLK_AIPLL_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_DBG_CLK_AIPLL_SEL_MASK) | (((unsigned long)(DBG_CLK_AIPLL_SEL)) << ACRDBGCLK_DBG_CLK_AIPLL_SEL_SHIFT);\
}
#define ACRDBGCLK_DBG_CLK_USBPLL_SEL_SIZE	1
#define ACRDBGCLK_DBG_CLK_USBPLL_SEL_SHIFT	21
#define ACRDBGCLK_DBG_CLK_USBPLL_SEL_MASK	0x00200000
#define ACRDBGCLK_GET_DBG_CLK_USBPLL_SEL(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_DBG_CLK_USBPLL_SEL_MASK) >> ACRDBGCLK_DBG_CLK_USBPLL_SEL_SHIFT)
#define ACRDBGCLK_SET_DBG_CLK_USBPLL_SEL(ACRDBGCLK, DBG_CLK_USBPLL_SEL) { \
	FDL_ASSERT(!((DBG_CLK_USBPLL_SEL) & ~((1 << ACRDBGCLK_DBG_CLK_USBPLL_SEL_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_DBG_CLK_USBPLL_SEL_MASK) | (((unsigned long)(DBG_CLK_USBPLL_SEL)) << ACRDBGCLK_DBG_CLK_USBPLL_SEL_SHIFT);\
}
#define ACRDBGCLK_DBG_SWAP_CLKS_SIZE	1
#define ACRDBGCLK_DBG_SWAP_CLKS_SHIFT	22
#define ACRDBGCLK_DBG_SWAP_CLKS_MASK	0x00400000
#define ACRDBGCLK_GET_DBG_SWAP_CLKS(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_DBG_SWAP_CLKS_MASK) >> ACRDBGCLK_DBG_SWAP_CLKS_SHIFT)
#define ACRDBGCLK_SET_DBG_SWAP_CLKS(ACRDBGCLK, DBG_SWAP_CLKS) { \
	FDL_ASSERT(!((DBG_SWAP_CLKS) & ~((1 << ACRDBGCLK_DBG_SWAP_CLKS_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_DBG_SWAP_CLKS_MASK) | (((unsigned long)(DBG_SWAP_CLKS)) << ACRDBGCLK_DBG_SWAP_CLKS_SHIFT);\
}
#define ACRDBGCLK_PAD0_SIZE	9
#define ACRDBGCLK_PAD0_SHIFT	23
#define ACRDBGCLK_PAD0_MASK	0xff800000
#define ACRDBGCLK_GET_PAD0(ACRDBGCLK) \
	((((unsigned long)(ACRDBGCLK)) & ACRDBGCLK_PAD0_MASK) >> ACRDBGCLK_PAD0_SHIFT)
#define ACRDBGCLK_SET_PAD0(ACRDBGCLK, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRDBGCLK_PAD0_SIZE)-1))); \
	ACRDBGCLK = (((unsigned long)(ACRDBGCLK)) & ~ACRDBGCLK_PAD0_MASK) | (((unsigned long)(pad0)) << ACRDBGCLK_PAD0_SHIFT);\
}
#define ACRDBGCLK_TOTAL_SIZE	32
#define ACRDBGCLK(OBS_CLK0_EN, OBS_CLK0_SEL, OBS_CLK0_DIV, OBS_CLK0_INV, OBS_CLK1_EN, OBS_CLK1_SEL, OBS_CLK1_DIV, OBS_CLK1_INV, DBG_CLK_SYSPLL_SEL, DBG_CLK_DDRPLL_SEL, DBG_CLK_VLCLK_SEL, DBG_CLK_VCCLK_SEL, DBG_CLK_AIPLL_SEL, DBG_CLK_USBPLL_SEL, DBG_SWAP_CLKS) \
	((((unsigned long)(OBS_CLK0_EN)) << ACRDBGCLK_OBS_CLK0_EN_SHIFT) | \
	 (((unsigned long)(OBS_CLK0_SEL)) << ACRDBGCLK_OBS_CLK0_SEL_SHIFT) | \
	 (((unsigned long)(OBS_CLK0_DIV)) << ACRDBGCLK_OBS_CLK0_DIV_SHIFT) | \
	 (((unsigned long)(OBS_CLK0_INV)) << ACRDBGCLK_OBS_CLK0_INV_SHIFT) | \
	 (((unsigned long)(OBS_CLK1_EN)) << ACRDBGCLK_OBS_CLK1_EN_SHIFT) | \
	 (((unsigned long)(OBS_CLK1_SEL)) << ACRDBGCLK_OBS_CLK1_SEL_SHIFT) | \
	 (((unsigned long)(OBS_CLK1_DIV)) << ACRDBGCLK_OBS_CLK1_DIV_SHIFT) | \
	 (((unsigned long)(OBS_CLK1_INV)) << ACRDBGCLK_OBS_CLK1_INV_SHIFT) | \
	 (((unsigned long)(DBG_CLK_SYSPLL_SEL)) << ACRDBGCLK_DBG_CLK_SYSPLL_SEL_SHIFT) | \
	 (((unsigned long)(DBG_CLK_DDRPLL_SEL)) << ACRDBGCLK_DBG_CLK_DDRPLL_SEL_SHIFT) | \
	 (((unsigned long)(DBG_CLK_VLCLK_SEL)) << ACRDBGCLK_DBG_CLK_VLCLK_SEL_SHIFT) | \
	 (((unsigned long)(DBG_CLK_VCCLK_SEL)) << ACRDBGCLK_DBG_CLK_VCCLK_SEL_SHIFT) | \
	 (((unsigned long)(DBG_CLK_AIPLL_SEL)) << ACRDBGCLK_DBG_CLK_AIPLL_SEL_SHIFT) | \
	 (((unsigned long)(DBG_CLK_USBPLL_SEL)) << ACRDBGCLK_DBG_CLK_USBPLL_SEL_SHIFT) | \
	 (((unsigned long)(DBG_SWAP_CLKS)) << ACRDBGCLK_DBG_SWAP_CLKS_SHIFT))

/*
 *  ACROBSCLKOCTRL struct
 */
#define ACROBSCLKOCTRL_DRVDUTY_SIZE	2
#define ACROBSCLKOCTRL_DRVDUTY_SHIFT	0
#define ACROBSCLKOCTRL_DRVDUTY_MASK	0x00000003
#define ACROBSCLKOCTRL_GET_DRVDUTY(ACROBSCLKOCTRL) \
	((((unsigned long)(ACROBSCLKOCTRL)) & ACROBSCLKOCTRL_DRVDUTY_MASK) >> ACROBSCLKOCTRL_DRVDUTY_SHIFT)
#define ACROBSCLKOCTRL_SET_DRVDUTY(ACROBSCLKOCTRL, DRVDUTY) { \
	FDL_ASSERT(!((DRVDUTY) & ~((1 << ACROBSCLKOCTRL_DRVDUTY_SIZE)-1))); \
	ACROBSCLKOCTRL = (((unsigned long)(ACROBSCLKOCTRL)) & ~ACROBSCLKOCTRL_DRVDUTY_MASK) | (((unsigned long)(DRVDUTY)) << ACROBSCLKOCTRL_DRVDUTY_SHIFT);\
}
#define ACROBSCLKOCTRL_PSTR_SIZE	5
#define ACROBSCLKOCTRL_PSTR_SHIFT	2
#define ACROBSCLKOCTRL_PSTR_MASK	0x0000007c
#define ACROBSCLKOCTRL_GET_PSTR(ACROBSCLKOCTRL) \
	((((unsigned long)(ACROBSCLKOCTRL)) & ACROBSCLKOCTRL_PSTR_MASK) >> ACROBSCLKOCTRL_PSTR_SHIFT)
#define ACROBSCLKOCTRL_SET_PSTR(ACROBSCLKOCTRL, PSTR) { \
	FDL_ASSERT(!((PSTR) & ~((1 << ACROBSCLKOCTRL_PSTR_SIZE)-1))); \
	ACROBSCLKOCTRL = (((unsigned long)(ACROBSCLKOCTRL)) & ~ACROBSCLKOCTRL_PSTR_MASK) | (((unsigned long)(PSTR)) << ACROBSCLKOCTRL_PSTR_SHIFT);\
}
#define ACROBSCLKOCTRL_NSTR_SIZE	5
#define ACROBSCLKOCTRL_NSTR_SHIFT	7
#define ACROBSCLKOCTRL_NSTR_MASK	0x00000f80
#define ACROBSCLKOCTRL_GET_NSTR(ACROBSCLKOCTRL) \
	((((unsigned long)(ACROBSCLKOCTRL)) & ACROBSCLKOCTRL_NSTR_MASK) >> ACROBSCLKOCTRL_NSTR_SHIFT)
#define ACROBSCLKOCTRL_SET_NSTR(ACROBSCLKOCTRL, NSTR) { \
	FDL_ASSERT(!((NSTR) & ~((1 << ACROBSCLKOCTRL_NSTR_SIZE)-1))); \
	ACROBSCLKOCTRL = (((unsigned long)(ACROBSCLKOCTRL)) & ~ACROBSCLKOCTRL_NSTR_MASK) | (((unsigned long)(NSTR)) << ACROBSCLKOCTRL_NSTR_SHIFT);\
}
#define ACROBSCLKOCTRL_PAD0_SIZE	20
#define ACROBSCLKOCTRL_PAD0_SHIFT	12
#define ACROBSCLKOCTRL_PAD0_MASK	0xfffff000
#define ACROBSCLKOCTRL_GET_PAD0(ACROBSCLKOCTRL) \
	((((unsigned long)(ACROBSCLKOCTRL)) & ACROBSCLKOCTRL_PAD0_MASK) >> ACROBSCLKOCTRL_PAD0_SHIFT)
#define ACROBSCLKOCTRL_SET_PAD0(ACROBSCLKOCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACROBSCLKOCTRL_PAD0_SIZE)-1))); \
	ACROBSCLKOCTRL = (((unsigned long)(ACROBSCLKOCTRL)) & ~ACROBSCLKOCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACROBSCLKOCTRL_PAD0_SHIFT);\
}
#define ACROBSCLKOCTRL_TOTAL_SIZE	32
#define ACROBSCLKOCTRL(DRVDUTY, PSTR, NSTR) \
	((((unsigned long)(DRVDUTY)) << ACROBSCLKOCTRL_DRVDUTY_SHIFT) | \
	 (((unsigned long)(PSTR)) << ACROBSCLKOCTRL_PSTR_SHIFT) | \
	 (((unsigned long)(NSTR)) << ACROBSCLKOCTRL_NSTR_SHIFT))

/*
 *  ACRDBGCLKICTRL struct
 */
#define ACRDBGCLKICTRL_CLK0_REFVEB_SIZE	1
#define ACRDBGCLKICTRL_CLK0_REFVEB_SHIFT	0
#define ACRDBGCLKICTRL_CLK0_REFVEB_MASK	0x00000001
#define ACRDBGCLKICTRL_GET_CLK0_REFVEB(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK0_REFVEB_MASK) >> ACRDBGCLKICTRL_CLK0_REFVEB_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK0_REFVEB(ACRDBGCLKICTRL, CLK0_REFVEB) { \
	FDL_ASSERT(!((CLK0_REFVEB) & ~((1 << ACRDBGCLKICTRL_CLK0_REFVEB_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK0_REFVEB_MASK) | (((unsigned long)(CLK0_REFVEB)) << ACRDBGCLKICTRL_CLK0_REFVEB_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK0_RECDUTY_SIZE	2
#define ACRDBGCLKICTRL_CLK0_RECDUTY_SHIFT	1
#define ACRDBGCLKICTRL_CLK0_RECDUTY_MASK	0x00000006
#define ACRDBGCLKICTRL_GET_CLK0_RECDUTY(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK0_RECDUTY_MASK) >> ACRDBGCLKICTRL_CLK0_RECDUTY_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK0_RECDUTY(ACRDBGCLKICTRL, CLK0_RECDUTY) { \
	FDL_ASSERT(!((CLK0_RECDUTY) & ~((1 << ACRDBGCLKICTRL_CLK0_RECDUTY_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK0_RECDUTY_MASK) | (((unsigned long)(CLK0_RECDUTY)) << ACRDBGCLKICTRL_CLK0_RECDUTY_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK0_PDE_SIZE	1
#define ACRDBGCLKICTRL_CLK0_PDE_SHIFT	3
#define ACRDBGCLKICTRL_CLK0_PDE_MASK	0x00000008
#define ACRDBGCLKICTRL_GET_CLK0_PDE(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK0_PDE_MASK) >> ACRDBGCLKICTRL_CLK0_PDE_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK0_PDE(ACRDBGCLKICTRL, CLK0_PDE) { \
	FDL_ASSERT(!((CLK0_PDE) & ~((1 << ACRDBGCLKICTRL_CLK0_PDE_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK0_PDE_MASK) | (((unsigned long)(CLK0_PDE)) << ACRDBGCLKICTRL_CLK0_PDE_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK0_PDSTR_SIZE	2
#define ACRDBGCLKICTRL_CLK0_PDSTR_SHIFT	4
#define ACRDBGCLKICTRL_CLK0_PDSTR_MASK	0x00000030
#define ACRDBGCLKICTRL_GET_CLK0_PDSTR(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK0_PDSTR_MASK) >> ACRDBGCLKICTRL_CLK0_PDSTR_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK0_PDSTR(ACRDBGCLKICTRL, CLK0_PDSTR) { \
	FDL_ASSERT(!((CLK0_PDSTR) & ~((1 << ACRDBGCLKICTRL_CLK0_PDSTR_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK0_PDSTR_MASK) | (((unsigned long)(CLK0_PDSTR)) << ACRDBGCLKICTRL_CLK0_PDSTR_SHIFT);\
}
#define ACRDBGCLKICTRL_PAD0_SIZE	2
#define ACRDBGCLKICTRL_PAD0_SHIFT	6
#define ACRDBGCLKICTRL_PAD0_MASK	0x000000c0
#define ACRDBGCLKICTRL_GET_PAD0(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_PAD0_MASK) >> ACRDBGCLKICTRL_PAD0_SHIFT)
#define ACRDBGCLKICTRL_SET_PAD0(ACRDBGCLKICTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRDBGCLKICTRL_PAD0_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACRDBGCLKICTRL_PAD0_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK1_REFVEB_SIZE	1
#define ACRDBGCLKICTRL_CLK1_REFVEB_SHIFT	8
#define ACRDBGCLKICTRL_CLK1_REFVEB_MASK	0x00000100
#define ACRDBGCLKICTRL_GET_CLK1_REFVEB(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK1_REFVEB_MASK) >> ACRDBGCLKICTRL_CLK1_REFVEB_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK1_REFVEB(ACRDBGCLKICTRL, CLK1_REFVEB) { \
	FDL_ASSERT(!((CLK1_REFVEB) & ~((1 << ACRDBGCLKICTRL_CLK1_REFVEB_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK1_REFVEB_MASK) | (((unsigned long)(CLK1_REFVEB)) << ACRDBGCLKICTRL_CLK1_REFVEB_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK1_RECDUTY_SIZE	2
#define ACRDBGCLKICTRL_CLK1_RECDUTY_SHIFT	9
#define ACRDBGCLKICTRL_CLK1_RECDUTY_MASK	0x00000600
#define ACRDBGCLKICTRL_GET_CLK1_RECDUTY(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK1_RECDUTY_MASK) >> ACRDBGCLKICTRL_CLK1_RECDUTY_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK1_RECDUTY(ACRDBGCLKICTRL, CLK1_RECDUTY) { \
	FDL_ASSERT(!((CLK1_RECDUTY) & ~((1 << ACRDBGCLKICTRL_CLK1_RECDUTY_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK1_RECDUTY_MASK) | (((unsigned long)(CLK1_RECDUTY)) << ACRDBGCLKICTRL_CLK1_RECDUTY_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK1_PDE_SIZE	1
#define ACRDBGCLKICTRL_CLK1_PDE_SHIFT	11
#define ACRDBGCLKICTRL_CLK1_PDE_MASK	0x00000800
#define ACRDBGCLKICTRL_GET_CLK1_PDE(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK1_PDE_MASK) >> ACRDBGCLKICTRL_CLK1_PDE_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK1_PDE(ACRDBGCLKICTRL, CLK1_PDE) { \
	FDL_ASSERT(!((CLK1_PDE) & ~((1 << ACRDBGCLKICTRL_CLK1_PDE_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK1_PDE_MASK) | (((unsigned long)(CLK1_PDE)) << ACRDBGCLKICTRL_CLK1_PDE_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK1_PDSTR_SIZE	2
#define ACRDBGCLKICTRL_CLK1_PDSTR_SHIFT	12
#define ACRDBGCLKICTRL_CLK1_PDSTR_MASK	0x00003000
#define ACRDBGCLKICTRL_GET_CLK1_PDSTR(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK1_PDSTR_MASK) >> ACRDBGCLKICTRL_CLK1_PDSTR_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK1_PDSTR(ACRDBGCLKICTRL, CLK1_PDSTR) { \
	FDL_ASSERT(!((CLK1_PDSTR) & ~((1 << ACRDBGCLKICTRL_CLK1_PDSTR_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK1_PDSTR_MASK) | (((unsigned long)(CLK1_PDSTR)) << ACRDBGCLKICTRL_CLK1_PDSTR_SHIFT);\
}
#define ACRDBGCLKICTRL_PAD1_SIZE	2
#define ACRDBGCLKICTRL_PAD1_SHIFT	14
#define ACRDBGCLKICTRL_PAD1_MASK	0x0000c000
#define ACRDBGCLKICTRL_GET_PAD1(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_PAD1_MASK) >> ACRDBGCLKICTRL_PAD1_SHIFT)
#define ACRDBGCLKICTRL_SET_PAD1(ACRDBGCLKICTRL, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRDBGCLKICTRL_PAD1_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_PAD1_MASK) | (((unsigned long)(pad1)) << ACRDBGCLKICTRL_PAD1_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK2_REFVEB_SIZE	1
#define ACRDBGCLKICTRL_CLK2_REFVEB_SHIFT	16
#define ACRDBGCLKICTRL_CLK2_REFVEB_MASK	0x00010000
#define ACRDBGCLKICTRL_GET_CLK2_REFVEB(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK2_REFVEB_MASK) >> ACRDBGCLKICTRL_CLK2_REFVEB_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK2_REFVEB(ACRDBGCLKICTRL, CLK2_REFVEB) { \
	FDL_ASSERT(!((CLK2_REFVEB) & ~((1 << ACRDBGCLKICTRL_CLK2_REFVEB_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK2_REFVEB_MASK) | (((unsigned long)(CLK2_REFVEB)) << ACRDBGCLKICTRL_CLK2_REFVEB_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK2_RECDUTY_SIZE	2
#define ACRDBGCLKICTRL_CLK2_RECDUTY_SHIFT	17
#define ACRDBGCLKICTRL_CLK2_RECDUTY_MASK	0x00060000
#define ACRDBGCLKICTRL_GET_CLK2_RECDUTY(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK2_RECDUTY_MASK) >> ACRDBGCLKICTRL_CLK2_RECDUTY_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK2_RECDUTY(ACRDBGCLKICTRL, CLK2_RECDUTY) { \
	FDL_ASSERT(!((CLK2_RECDUTY) & ~((1 << ACRDBGCLKICTRL_CLK2_RECDUTY_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK2_RECDUTY_MASK) | (((unsigned long)(CLK2_RECDUTY)) << ACRDBGCLKICTRL_CLK2_RECDUTY_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK2_PDE_SIZE	1
#define ACRDBGCLKICTRL_CLK2_PDE_SHIFT	19
#define ACRDBGCLKICTRL_CLK2_PDE_MASK	0x00080000
#define ACRDBGCLKICTRL_GET_CLK2_PDE(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK2_PDE_MASK) >> ACRDBGCLKICTRL_CLK2_PDE_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK2_PDE(ACRDBGCLKICTRL, CLK2_PDE) { \
	FDL_ASSERT(!((CLK2_PDE) & ~((1 << ACRDBGCLKICTRL_CLK2_PDE_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK2_PDE_MASK) | (((unsigned long)(CLK2_PDE)) << ACRDBGCLKICTRL_CLK2_PDE_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK2_PDSTR_SIZE	2
#define ACRDBGCLKICTRL_CLK2_PDSTR_SHIFT	20
#define ACRDBGCLKICTRL_CLK2_PDSTR_MASK	0x00300000
#define ACRDBGCLKICTRL_GET_CLK2_PDSTR(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK2_PDSTR_MASK) >> ACRDBGCLKICTRL_CLK2_PDSTR_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK2_PDSTR(ACRDBGCLKICTRL, CLK2_PDSTR) { \
	FDL_ASSERT(!((CLK2_PDSTR) & ~((1 << ACRDBGCLKICTRL_CLK2_PDSTR_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK2_PDSTR_MASK) | (((unsigned long)(CLK2_PDSTR)) << ACRDBGCLKICTRL_CLK2_PDSTR_SHIFT);\
}
#define ACRDBGCLKICTRL_PAD2_SIZE	2
#define ACRDBGCLKICTRL_PAD2_SHIFT	22
#define ACRDBGCLKICTRL_PAD2_MASK	0x00c00000
#define ACRDBGCLKICTRL_GET_PAD2(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_PAD2_MASK) >> ACRDBGCLKICTRL_PAD2_SHIFT)
#define ACRDBGCLKICTRL_SET_PAD2(ACRDBGCLKICTRL, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << ACRDBGCLKICTRL_PAD2_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_PAD2_MASK) | (((unsigned long)(pad2)) << ACRDBGCLKICTRL_PAD2_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK3_REFVEB_SIZE	1
#define ACRDBGCLKICTRL_CLK3_REFVEB_SHIFT	24
#define ACRDBGCLKICTRL_CLK3_REFVEB_MASK	0x01000000
#define ACRDBGCLKICTRL_GET_CLK3_REFVEB(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK3_REFVEB_MASK) >> ACRDBGCLKICTRL_CLK3_REFVEB_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK3_REFVEB(ACRDBGCLKICTRL, CLK3_REFVEB) { \
	FDL_ASSERT(!((CLK3_REFVEB) & ~((1 << ACRDBGCLKICTRL_CLK3_REFVEB_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK3_REFVEB_MASK) | (((unsigned long)(CLK3_REFVEB)) << ACRDBGCLKICTRL_CLK3_REFVEB_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK3_RECDUTY_SIZE	2
#define ACRDBGCLKICTRL_CLK3_RECDUTY_SHIFT	25
#define ACRDBGCLKICTRL_CLK3_RECDUTY_MASK	0x06000000
#define ACRDBGCLKICTRL_GET_CLK3_RECDUTY(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK3_RECDUTY_MASK) >> ACRDBGCLKICTRL_CLK3_RECDUTY_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK3_RECDUTY(ACRDBGCLKICTRL, CLK3_RECDUTY) { \
	FDL_ASSERT(!((CLK3_RECDUTY) & ~((1 << ACRDBGCLKICTRL_CLK3_RECDUTY_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK3_RECDUTY_MASK) | (((unsigned long)(CLK3_RECDUTY)) << ACRDBGCLKICTRL_CLK3_RECDUTY_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK3_PDE_SIZE	1
#define ACRDBGCLKICTRL_CLK3_PDE_SHIFT	27
#define ACRDBGCLKICTRL_CLK3_PDE_MASK	0x08000000
#define ACRDBGCLKICTRL_GET_CLK3_PDE(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK3_PDE_MASK) >> ACRDBGCLKICTRL_CLK3_PDE_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK3_PDE(ACRDBGCLKICTRL, CLK3_PDE) { \
	FDL_ASSERT(!((CLK3_PDE) & ~((1 << ACRDBGCLKICTRL_CLK3_PDE_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK3_PDE_MASK) | (((unsigned long)(CLK3_PDE)) << ACRDBGCLKICTRL_CLK3_PDE_SHIFT);\
}
#define ACRDBGCLKICTRL_CLK3_PDSTR_SIZE	2
#define ACRDBGCLKICTRL_CLK3_PDSTR_SHIFT	28
#define ACRDBGCLKICTRL_CLK3_PDSTR_MASK	0x30000000
#define ACRDBGCLKICTRL_GET_CLK3_PDSTR(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_CLK3_PDSTR_MASK) >> ACRDBGCLKICTRL_CLK3_PDSTR_SHIFT)
#define ACRDBGCLKICTRL_SET_CLK3_PDSTR(ACRDBGCLKICTRL, CLK3_PDSTR) { \
	FDL_ASSERT(!((CLK3_PDSTR) & ~((1 << ACRDBGCLKICTRL_CLK3_PDSTR_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_CLK3_PDSTR_MASK) | (((unsigned long)(CLK3_PDSTR)) << ACRDBGCLKICTRL_CLK3_PDSTR_SHIFT);\
}
#define ACRDBGCLKICTRL_PAD3_SIZE	2
#define ACRDBGCLKICTRL_PAD3_SHIFT	30
#define ACRDBGCLKICTRL_PAD3_MASK	0xc0000000
#define ACRDBGCLKICTRL_GET_PAD3(ACRDBGCLKICTRL) \
	((((unsigned long)(ACRDBGCLKICTRL)) & ACRDBGCLKICTRL_PAD3_MASK) >> ACRDBGCLKICTRL_PAD3_SHIFT)
#define ACRDBGCLKICTRL_SET_PAD3(ACRDBGCLKICTRL, pad3) { \
	FDL_ASSERT(!((pad3) & ~((1 << ACRDBGCLKICTRL_PAD3_SIZE)-1))); \
	ACRDBGCLKICTRL = (((unsigned long)(ACRDBGCLKICTRL)) & ~ACRDBGCLKICTRL_PAD3_MASK) | (((unsigned long)(pad3)) << ACRDBGCLKICTRL_PAD3_SHIFT);\
}
#define ACRDBGCLKICTRL_TOTAL_SIZE	32
#define ACRDBGCLKICTRL(CLK0_REFVEB, CLK0_RECDUTY, CLK0_PDE, CLK0_PDSTR, CLK1_REFVEB, CLK1_RECDUTY, CLK1_PDE, CLK1_PDSTR, CLK2_REFVEB, CLK2_RECDUTY, CLK2_PDE, CLK2_PDSTR, CLK3_REFVEB, CLK3_RECDUTY, CLK3_PDE, CLK3_PDSTR) \
	((((unsigned long)(CLK0_REFVEB)) << ACRDBGCLKICTRL_CLK0_REFVEB_SHIFT) | \
	 (((unsigned long)(CLK0_RECDUTY)) << ACRDBGCLKICTRL_CLK0_RECDUTY_SHIFT) | \
	 (((unsigned long)(CLK0_PDE)) << ACRDBGCLKICTRL_CLK0_PDE_SHIFT) | \
	 (((unsigned long)(CLK0_PDSTR)) << ACRDBGCLKICTRL_CLK0_PDSTR_SHIFT) | \
	 (((unsigned long)(CLK1_REFVEB)) << ACRDBGCLKICTRL_CLK1_REFVEB_SHIFT) | \
	 (((unsigned long)(CLK1_RECDUTY)) << ACRDBGCLKICTRL_CLK1_RECDUTY_SHIFT) | \
	 (((unsigned long)(CLK1_PDE)) << ACRDBGCLKICTRL_CLK1_PDE_SHIFT) | \
	 (((unsigned long)(CLK1_PDSTR)) << ACRDBGCLKICTRL_CLK1_PDSTR_SHIFT) | \
	 (((unsigned long)(CLK2_REFVEB)) << ACRDBGCLKICTRL_CLK2_REFVEB_SHIFT) | \
	 (((unsigned long)(CLK2_RECDUTY)) << ACRDBGCLKICTRL_CLK2_RECDUTY_SHIFT) | \
	 (((unsigned long)(CLK2_PDE)) << ACRDBGCLKICTRL_CLK2_PDE_SHIFT) | \
	 (((unsigned long)(CLK2_PDSTR)) << ACRDBGCLKICTRL_CLK2_PDSTR_SHIFT) | \
	 (((unsigned long)(CLK3_REFVEB)) << ACRDBGCLKICTRL_CLK3_REFVEB_SHIFT) | \
	 (((unsigned long)(CLK3_RECDUTY)) << ACRDBGCLKICTRL_CLK3_RECDUTY_SHIFT) | \
	 (((unsigned long)(CLK3_PDE)) << ACRDBGCLKICTRL_CLK3_PDE_SHIFT) | \
	 (((unsigned long)(CLK3_PDSTR)) << ACRDBGCLKICTRL_CLK3_PDSTR_SHIFT))

/*
 *  ACRDBGPORT struct
 */
#define ACRDBGPORT_OBS_DBG0_EN_SIZE	1
#define ACRDBGPORT_OBS_DBG0_EN_SHIFT	0
#define ACRDBGPORT_OBS_DBG0_EN_MASK	0x00000001
#define ACRDBGPORT_GET_OBS_DBG0_EN(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG0_EN_MASK) >> ACRDBGPORT_OBS_DBG0_EN_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG0_EN(ACRDBGPORT, OBS_DBG0_EN) { \
	FDL_ASSERT(!((OBS_DBG0_EN) & ~((1 << ACRDBGPORT_OBS_DBG0_EN_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG0_EN_MASK) | (((unsigned long)(OBS_DBG0_EN)) << ACRDBGPORT_OBS_DBG0_EN_SHIFT);\
}
#define ACRDBGPORT_OBS_DBG0_SEL_SIZE	8
#define ACRDBGPORT_OBS_DBG0_SEL_SHIFT	1
#define ACRDBGPORT_OBS_DBG0_SEL_MASK	0x000001fe
#define ACRDBGPORT_GET_OBS_DBG0_SEL(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG0_SEL_MASK) >> ACRDBGPORT_OBS_DBG0_SEL_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG0_SEL(ACRDBGPORT, OBS_DBG0_SEL) { \
	FDL_ASSERT(!((OBS_DBG0_SEL) & ~((1 << ACRDBGPORT_OBS_DBG0_SEL_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG0_SEL_MASK) | (((unsigned long)(OBS_DBG0_SEL)) << ACRDBGPORT_OBS_DBG0_SEL_SHIFT);\
}
#define ACRDBGPORT_OBS_DBG0_DIV_SIZE	3
#define ACRDBGPORT_OBS_DBG0_DIV_SHIFT	9
#define ACRDBGPORT_OBS_DBG0_DIV_MASK	0x00000e00
#define ACRDBGPORT_GET_OBS_DBG0_DIV(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG0_DIV_MASK) >> ACRDBGPORT_OBS_DBG0_DIV_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG0_DIV(ACRDBGPORT, OBS_DBG0_DIV) { \
	FDL_ASSERT(!((OBS_DBG0_DIV) & ~((1 << ACRDBGPORT_OBS_DBG0_DIV_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG0_DIV_MASK) | (((unsigned long)(OBS_DBG0_DIV)) << ACRDBGPORT_OBS_DBG0_DIV_SHIFT);\
}
#define ACRDBGPORT_OBS_DBG1_PORT0_SIZE	1
#define ACRDBGPORT_OBS_DBG1_PORT0_SHIFT	12
#define ACRDBGPORT_OBS_DBG1_PORT0_MASK	0x00001000
#define ACRDBGPORT_GET_OBS_DBG1_PORT0(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG1_PORT0_MASK) >> ACRDBGPORT_OBS_DBG1_PORT0_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG1_PORT0(ACRDBGPORT, OBS_DBG1_PORT0) { \
	FDL_ASSERT(!((OBS_DBG1_PORT0) & ~((1 << ACRDBGPORT_OBS_DBG1_PORT0_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG1_PORT0_MASK) | (((unsigned long)(OBS_DBG1_PORT0)) << ACRDBGPORT_OBS_DBG1_PORT0_SHIFT);\
}
#define ACRDBGPORT_OBS_DBG1_EN_SIZE	1
#define ACRDBGPORT_OBS_DBG1_EN_SHIFT	13
#define ACRDBGPORT_OBS_DBG1_EN_MASK	0x00002000
#define ACRDBGPORT_GET_OBS_DBG1_EN(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG1_EN_MASK) >> ACRDBGPORT_OBS_DBG1_EN_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG1_EN(ACRDBGPORT, OBS_DBG1_EN) { \
	FDL_ASSERT(!((OBS_DBG1_EN) & ~((1 << ACRDBGPORT_OBS_DBG1_EN_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG1_EN_MASK) | (((unsigned long)(OBS_DBG1_EN)) << ACRDBGPORT_OBS_DBG1_EN_SHIFT);\
}
#define ACRDBGPORT_OBS_DBG1_SEL_SIZE	8
#define ACRDBGPORT_OBS_DBG1_SEL_SHIFT	14
#define ACRDBGPORT_OBS_DBG1_SEL_MASK	0x003fc000
#define ACRDBGPORT_GET_OBS_DBG1_SEL(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG1_SEL_MASK) >> ACRDBGPORT_OBS_DBG1_SEL_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG1_SEL(ACRDBGPORT, OBS_DBG1_SEL) { \
	FDL_ASSERT(!((OBS_DBG1_SEL) & ~((1 << ACRDBGPORT_OBS_DBG1_SEL_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG1_SEL_MASK) | (((unsigned long)(OBS_DBG1_SEL)) << ACRDBGPORT_OBS_DBG1_SEL_SHIFT);\
}
#define ACRDBGPORT_OBS_DBG1_DIV_SIZE	3
#define ACRDBGPORT_OBS_DBG1_DIV_SHIFT	22
#define ACRDBGPORT_OBS_DBG1_DIV_MASK	0x01c00000
#define ACRDBGPORT_GET_OBS_DBG1_DIV(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG1_DIV_MASK) >> ACRDBGPORT_OBS_DBG1_DIV_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG1_DIV(ACRDBGPORT, OBS_DBG1_DIV) { \
	FDL_ASSERT(!((OBS_DBG1_DIV) & ~((1 << ACRDBGPORT_OBS_DBG1_DIV_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG1_DIV_MASK) | (((unsigned long)(OBS_DBG1_DIV)) << ACRDBGPORT_OBS_DBG1_DIV_SHIFT);\
}
#define ACRDBGPORT_OBS_DBG0_PORT1_SIZE	1
#define ACRDBGPORT_OBS_DBG0_PORT1_SHIFT	25
#define ACRDBGPORT_OBS_DBG0_PORT1_MASK	0x02000000
#define ACRDBGPORT_GET_OBS_DBG0_PORT1(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_OBS_DBG0_PORT1_MASK) >> ACRDBGPORT_OBS_DBG0_PORT1_SHIFT)
#define ACRDBGPORT_SET_OBS_DBG0_PORT1(ACRDBGPORT, OBS_DBG0_PORT1) { \
	FDL_ASSERT(!((OBS_DBG0_PORT1) & ~((1 << ACRDBGPORT_OBS_DBG0_PORT1_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_OBS_DBG0_PORT1_MASK) | (((unsigned long)(OBS_DBG0_PORT1)) << ACRDBGPORT_OBS_DBG0_PORT1_SHIFT);\
}
#define ACRDBGPORT_PAD0_SIZE	6
#define ACRDBGPORT_PAD0_SHIFT	26
#define ACRDBGPORT_PAD0_MASK	0xfc000000
#define ACRDBGPORT_GET_PAD0(ACRDBGPORT) \
	((((unsigned long)(ACRDBGPORT)) & ACRDBGPORT_PAD0_MASK) >> ACRDBGPORT_PAD0_SHIFT)
#define ACRDBGPORT_SET_PAD0(ACRDBGPORT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRDBGPORT_PAD0_SIZE)-1))); \
	ACRDBGPORT = (((unsigned long)(ACRDBGPORT)) & ~ACRDBGPORT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRDBGPORT_PAD0_SHIFT);\
}
#define ACRDBGPORT_TOTAL_SIZE	32
#define ACRDBGPORT(OBS_DBG0_EN, OBS_DBG0_SEL, OBS_DBG0_DIV, OBS_DBG1_PORT0, OBS_DBG1_EN, OBS_DBG1_SEL, OBS_DBG1_DIV, OBS_DBG0_PORT1) \
	((((unsigned long)(OBS_DBG0_EN)) << ACRDBGPORT_OBS_DBG0_EN_SHIFT) | \
	 (((unsigned long)(OBS_DBG0_SEL)) << ACRDBGPORT_OBS_DBG0_SEL_SHIFT) | \
	 (((unsigned long)(OBS_DBG0_DIV)) << ACRDBGPORT_OBS_DBG0_DIV_SHIFT) | \
	 (((unsigned long)(OBS_DBG1_PORT0)) << ACRDBGPORT_OBS_DBG1_PORT0_SHIFT) | \
	 (((unsigned long)(OBS_DBG1_EN)) << ACRDBGPORT_OBS_DBG1_EN_SHIFT) | \
	 (((unsigned long)(OBS_DBG1_SEL)) << ACRDBGPORT_OBS_DBG1_SEL_SHIFT) | \
	 (((unsigned long)(OBS_DBG1_DIV)) << ACRDBGPORT_OBS_DBG1_DIV_SHIFT) | \
	 (((unsigned long)(OBS_DBG0_PORT1)) << ACRDBGPORT_OBS_DBG0_PORT1_SHIFT))

/*
 *  ACRSICLKDIV struct
 */
#define ACRSICLKDIV_DIVISOR_SIZE	8
#define ACRSICLKDIV_DIVISOR_SHIFT	0
#define ACRSICLKDIV_DIVISOR_MASK	0x000000ff
#define ACRSICLKDIV_GET_DIVISOR(ACRSICLKDIV) \
	((((unsigned long)(ACRSICLKDIV)) & ACRSICLKDIV_DIVISOR_MASK) >> ACRSICLKDIV_DIVISOR_SHIFT)
#define ACRSICLKDIV_SET_DIVISOR(ACRSICLKDIV, DIVISOR) { \
	FDL_ASSERT(!((DIVISOR) & ~((1 << ACRSICLKDIV_DIVISOR_SIZE)-1))); \
	ACRSICLKDIV = (((unsigned long)(ACRSICLKDIV)) & ~ACRSICLKDIV_DIVISOR_MASK) | (((unsigned long)(DIVISOR)) << ACRSICLKDIV_DIVISOR_SHIFT);\
}
#define ACRSICLKDIV_PAD0_SIZE	24
#define ACRSICLKDIV_PAD0_SHIFT	8
#define ACRSICLKDIV_PAD0_MASK	0xffffff00
#define ACRSICLKDIV_GET_PAD0(ACRSICLKDIV) \
	((((unsigned long)(ACRSICLKDIV)) & ACRSICLKDIV_PAD0_MASK) >> ACRSICLKDIV_PAD0_SHIFT)
#define ACRSICLKDIV_SET_PAD0(ACRSICLKDIV, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRSICLKDIV_PAD0_SIZE)-1))); \
	ACRSICLKDIV = (((unsigned long)(ACRSICLKDIV)) & ~ACRSICLKDIV_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSICLKDIV_PAD0_SHIFT);\
}
#define ACRSICLKDIV_TOTAL_SIZE	32
#define ACRSICLKDIV(DIVISOR) \
	((((unsigned long)(DIVISOR)) << ACRSICLKDIV_DIVISOR_SHIFT))

/*
 *  ACRSICTRL struct
 */
#define ACRSICTRL_RD_WR_SIZE	1
#define ACRSICTRL_RD_WR_SHIFT	0
#define ACRSICTRL_RD_WR_MASK	0x00000001
#define ACRSICTRL_GET_RD_WR(ACRSICTRL) \
	((((unsigned long)(ACRSICTRL)) & ACRSICTRL_RD_WR_MASK) >> ACRSICTRL_RD_WR_SHIFT)
#define ACRSICTRL_SET_RD_WR(ACRSICTRL, RD_WR) { \
	FDL_ASSERT(!((RD_WR) & ~((1 << ACRSICTRL_RD_WR_SIZE)-1))); \
	ACRSICTRL = (((unsigned long)(ACRSICTRL)) & ~ACRSICTRL_RD_WR_MASK) | (((unsigned long)(RD_WR)) << ACRSICTRL_RD_WR_SHIFT);\
}
#define ACRSICTRL_LAST_WR_SIZE	1
#define ACRSICTRL_LAST_WR_SHIFT	1
#define ACRSICTRL_LAST_WR_MASK	0x00000002
#define ACRSICTRL_GET_LAST_WR(ACRSICTRL) \
	((((unsigned long)(ACRSICTRL)) & ACRSICTRL_LAST_WR_MASK) >> ACRSICTRL_LAST_WR_SHIFT)
#define ACRSICTRL_SET_LAST_WR(ACRSICTRL, LAST_WR) { \
	FDL_ASSERT(!((LAST_WR) & ~((1 << ACRSICTRL_LAST_WR_SIZE)-1))); \
	ACRSICTRL = (((unsigned long)(ACRSICTRL)) & ~ACRSICTRL_LAST_WR_MASK) | (((unsigned long)(LAST_WR)) << ACRSICTRL_LAST_WR_SHIFT);\
}
#define ACRSICTRL_PAD0_SIZE	1
#define ACRSICTRL_PAD0_SHIFT	2
#define ACRSICTRL_PAD0_MASK	0x00000004
#define ACRSICTRL_GET_PAD0(ACRSICTRL) \
	((((unsigned long)(ACRSICTRL)) & ACRSICTRL_PAD0_MASK) >> ACRSICTRL_PAD0_SHIFT)
#define ACRSICTRL_SET_PAD0(ACRSICTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRSICTRL_PAD0_SIZE)-1))); \
	ACRSICTRL = (((unsigned long)(ACRSICTRL)) & ~ACRSICTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSICTRL_PAD0_SHIFT);\
}
#define ACRSICTRL_ADDR_SIZE	5
#define ACRSICTRL_ADDR_SHIFT	3
#define ACRSICTRL_ADDR_MASK	0x000000f8
#define ACRSICTRL_GET_ADDR(ACRSICTRL) \
	((((unsigned long)(ACRSICTRL)) & ACRSICTRL_ADDR_MASK) >> ACRSICTRL_ADDR_SHIFT)
#define ACRSICTRL_SET_ADDR(ACRSICTRL, ADDR) { \
	FDL_ASSERT(!((ADDR) & ~((1 << ACRSICTRL_ADDR_SIZE)-1))); \
	ACRSICTRL = (((unsigned long)(ACRSICTRL)) & ~ACRSICTRL_ADDR_MASK) | (((unsigned long)(ADDR)) << ACRSICTRL_ADDR_SHIFT);\
}
#define ACRSICTRL_PAD1_SIZE	4
#define ACRSICTRL_PAD1_SHIFT	8
#define ACRSICTRL_PAD1_MASK	0x00000f00
#define ACRSICTRL_GET_PAD1(ACRSICTRL) \
	((((unsigned long)(ACRSICTRL)) & ACRSICTRL_PAD1_MASK) >> ACRSICTRL_PAD1_SHIFT)
#define ACRSICTRL_SET_PAD1(ACRSICTRL, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRSICTRL_PAD1_SIZE)-1))); \
	ACRSICTRL = (((unsigned long)(ACRSICTRL)) & ~ACRSICTRL_PAD1_MASK) | (((unsigned long)(pad1)) << ACRSICTRL_PAD1_SHIFT);\
}
#define ACRSICTRL_SOFTR_SIZE	4
#define ACRSICTRL_SOFTR_SHIFT	12
#define ACRSICTRL_SOFTR_MASK	0x0000f000
#define ACRSICTRL_GET_SOFTR(ACRSICTRL) \
	((((unsigned long)(ACRSICTRL)) & ACRSICTRL_SOFTR_MASK) >> ACRSICTRL_SOFTR_SHIFT)
#define ACRSICTRL_SET_SOFTR(ACRSICTRL, SOFTR) { \
	FDL_ASSERT(!((SOFTR) & ~((1 << ACRSICTRL_SOFTR_SIZE)-1))); \
	ACRSICTRL = (((unsigned long)(ACRSICTRL)) & ~ACRSICTRL_SOFTR_MASK) | (((unsigned long)(SOFTR)) << ACRSICTRL_SOFTR_SHIFT);\
}
#define ACRSICTRL_PAD2_SIZE	16
#define ACRSICTRL_PAD2_SHIFT	16
#define ACRSICTRL_PAD2_MASK	0xffff0000
#define ACRSICTRL_GET_PAD2(ACRSICTRL) \
	((((unsigned long)(ACRSICTRL)) & ACRSICTRL_PAD2_MASK) >> ACRSICTRL_PAD2_SHIFT)
#define ACRSICTRL_SET_PAD2(ACRSICTRL, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << ACRSICTRL_PAD2_SIZE)-1))); \
	ACRSICTRL = (((unsigned long)(ACRSICTRL)) & ~ACRSICTRL_PAD2_MASK) | (((unsigned long)(pad2)) << ACRSICTRL_PAD2_SHIFT);\
}
#define ACRSICTRL_TOTAL_SIZE	32
#define ACRSICTRL(RD_WR, LAST_WR, ADDR, SOFTR) \
	((((unsigned long)(RD_WR)) << ACRSICTRL_RD_WR_SHIFT) | \
	 (((unsigned long)(LAST_WR)) << ACRSICTRL_LAST_WR_SHIFT) | \
	 (((unsigned long)(ADDR)) << ACRSICTRL_ADDR_SHIFT) | \
	 (((unsigned long)(SOFTR)) << ACRSICTRL_SOFTR_SHIFT))

/*
 *  ACRSIDATA struct
 */
#define ACRSIDATA_WDATA_SIZE	16
#define ACRSIDATA_WDATA_SHIFT	0
#define ACRSIDATA_WDATA_MASK	0x0000ffff
#define ACRSIDATA_GET_WDATA(ACRSIDATA) \
	((((unsigned long)(ACRSIDATA)) & ACRSIDATA_WDATA_MASK) >> ACRSIDATA_WDATA_SHIFT)
#define ACRSIDATA_SET_WDATA(ACRSIDATA, WDATA) { \
	FDL_ASSERT(!((WDATA) & ~((1 << ACRSIDATA_WDATA_SIZE)-1))); \
	ACRSIDATA = (((unsigned long)(ACRSIDATA)) & ~ACRSIDATA_WDATA_MASK) | (((unsigned long)(WDATA)) << ACRSIDATA_WDATA_SHIFT);\
}
#define ACRSIDATA_PAD0_SIZE	16
#define ACRSIDATA_PAD0_SHIFT	16
#define ACRSIDATA_PAD0_MASK	0xffff0000
#define ACRSIDATA_GET_PAD0(ACRSIDATA) \
	((((unsigned long)(ACRSIDATA)) & ACRSIDATA_PAD0_MASK) >> ACRSIDATA_PAD0_SHIFT)
#define ACRSIDATA_SET_PAD0(ACRSIDATA, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRSIDATA_PAD0_SIZE)-1))); \
	ACRSIDATA = (((unsigned long)(ACRSIDATA)) & ~ACRSIDATA_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSIDATA_PAD0_SHIFT);\
}
#define ACRSIDATA_TOTAL_SIZE	32
#define ACRSIDATA(WDATA) \
	((((unsigned long)(WDATA)) << ACRSIDATA_WDATA_SHIFT))

/*
 *  ACRSIINT struct
 */
#define ACRSIINT_INTR_MSK0_SIZE	1
#define ACRSIINT_INTR_MSK0_SHIFT	0
#define ACRSIINT_INTR_MSK0_MASK	0x00000001
#define ACRSIINT_GET_INTR_MSK0(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_INTR_MSK0_MASK) >> ACRSIINT_INTR_MSK0_SHIFT)
#define ACRSIINT_SET_INTR_MSK0(ACRSIINT, INTR_MSK0) { \
	FDL_ASSERT(!((INTR_MSK0) & ~((1 << ACRSIINT_INTR_MSK0_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_INTR_MSK0_MASK) | (((unsigned long)(INTR_MSK0)) << ACRSIINT_INTR_MSK0_SHIFT);\
}
#define ACRSIINT_NEW_RUMBLE0_SIZE	1
#define ACRSIINT_NEW_RUMBLE0_SHIFT	1
#define ACRSIINT_NEW_RUMBLE0_MASK	0x00000002
#define ACRSIINT_GET_NEW_RUMBLE0(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_NEW_RUMBLE0_MASK) >> ACRSIINT_NEW_RUMBLE0_SHIFT)
#define ACRSIINT_SET_NEW_RUMBLE0(ACRSIINT, NEW_RUMBLE0) { \
	FDL_ASSERT(!((NEW_RUMBLE0) & ~((1 << ACRSIINT_NEW_RUMBLE0_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_NEW_RUMBLE0_MASK) | (((unsigned long)(NEW_RUMBLE0)) << ACRSIINT_NEW_RUMBLE0_SHIFT);\
}
#define ACRSIINT_RUMBLE_STATE0_SIZE	2
#define ACRSIINT_RUMBLE_STATE0_SHIFT	2
#define ACRSIINT_RUMBLE_STATE0_MASK	0x0000000c
#define ACRSIINT_GET_RUMBLE_STATE0(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_RUMBLE_STATE0_MASK) >> ACRSIINT_RUMBLE_STATE0_SHIFT)
#define ACRSIINT_SET_RUMBLE_STATE0(ACRSIINT, RUMBLE_STATE0) { \
	FDL_ASSERT(!((RUMBLE_STATE0) & ~((1 << ACRSIINT_RUMBLE_STATE0_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_RUMBLE_STATE0_MASK) | (((unsigned long)(RUMBLE_STATE0)) << ACRSIINT_RUMBLE_STATE0_SHIFT);\
}
#define ACRSIINT_INTR_MSK1_SIZE	1
#define ACRSIINT_INTR_MSK1_SHIFT	4
#define ACRSIINT_INTR_MSK1_MASK	0x00000010
#define ACRSIINT_GET_INTR_MSK1(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_INTR_MSK1_MASK) >> ACRSIINT_INTR_MSK1_SHIFT)
#define ACRSIINT_SET_INTR_MSK1(ACRSIINT, INTR_MSK1) { \
	FDL_ASSERT(!((INTR_MSK1) & ~((1 << ACRSIINT_INTR_MSK1_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_INTR_MSK1_MASK) | (((unsigned long)(INTR_MSK1)) << ACRSIINT_INTR_MSK1_SHIFT);\
}
#define ACRSIINT_NEW_RUMBLE1_SIZE	1
#define ACRSIINT_NEW_RUMBLE1_SHIFT	5
#define ACRSIINT_NEW_RUMBLE1_MASK	0x00000020
#define ACRSIINT_GET_NEW_RUMBLE1(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_NEW_RUMBLE1_MASK) >> ACRSIINT_NEW_RUMBLE1_SHIFT)
#define ACRSIINT_SET_NEW_RUMBLE1(ACRSIINT, NEW_RUMBLE1) { \
	FDL_ASSERT(!((NEW_RUMBLE1) & ~((1 << ACRSIINT_NEW_RUMBLE1_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_NEW_RUMBLE1_MASK) | (((unsigned long)(NEW_RUMBLE1)) << ACRSIINT_NEW_RUMBLE1_SHIFT);\
}
#define ACRSIINT_RUMBLE_STATE1_SIZE	2
#define ACRSIINT_RUMBLE_STATE1_SHIFT	6
#define ACRSIINT_RUMBLE_STATE1_MASK	0x000000c0
#define ACRSIINT_GET_RUMBLE_STATE1(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_RUMBLE_STATE1_MASK) >> ACRSIINT_RUMBLE_STATE1_SHIFT)
#define ACRSIINT_SET_RUMBLE_STATE1(ACRSIINT, RUMBLE_STATE1) { \
	FDL_ASSERT(!((RUMBLE_STATE1) & ~((1 << ACRSIINT_RUMBLE_STATE1_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_RUMBLE_STATE1_MASK) | (((unsigned long)(RUMBLE_STATE1)) << ACRSIINT_RUMBLE_STATE1_SHIFT);\
}
#define ACRSIINT_INTR_MSK2_SIZE	1
#define ACRSIINT_INTR_MSK2_SHIFT	8
#define ACRSIINT_INTR_MSK2_MASK	0x00000100
#define ACRSIINT_GET_INTR_MSK2(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_INTR_MSK2_MASK) >> ACRSIINT_INTR_MSK2_SHIFT)
#define ACRSIINT_SET_INTR_MSK2(ACRSIINT, INTR_MSK2) { \
	FDL_ASSERT(!((INTR_MSK2) & ~((1 << ACRSIINT_INTR_MSK2_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_INTR_MSK2_MASK) | (((unsigned long)(INTR_MSK2)) << ACRSIINT_INTR_MSK2_SHIFT);\
}
#define ACRSIINT_NEW_RUMBLE2_SIZE	1
#define ACRSIINT_NEW_RUMBLE2_SHIFT	9
#define ACRSIINT_NEW_RUMBLE2_MASK	0x00000200
#define ACRSIINT_GET_NEW_RUMBLE2(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_NEW_RUMBLE2_MASK) >> ACRSIINT_NEW_RUMBLE2_SHIFT)
#define ACRSIINT_SET_NEW_RUMBLE2(ACRSIINT, NEW_RUMBLE2) { \
	FDL_ASSERT(!((NEW_RUMBLE2) & ~((1 << ACRSIINT_NEW_RUMBLE2_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_NEW_RUMBLE2_MASK) | (((unsigned long)(NEW_RUMBLE2)) << ACRSIINT_NEW_RUMBLE2_SHIFT);\
}
#define ACRSIINT_RUMBLE_STATE2_SIZE	2
#define ACRSIINT_RUMBLE_STATE2_SHIFT	10
#define ACRSIINT_RUMBLE_STATE2_MASK	0x00000c00
#define ACRSIINT_GET_RUMBLE_STATE2(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_RUMBLE_STATE2_MASK) >> ACRSIINT_RUMBLE_STATE2_SHIFT)
#define ACRSIINT_SET_RUMBLE_STATE2(ACRSIINT, RUMBLE_STATE2) { \
	FDL_ASSERT(!((RUMBLE_STATE2) & ~((1 << ACRSIINT_RUMBLE_STATE2_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_RUMBLE_STATE2_MASK) | (((unsigned long)(RUMBLE_STATE2)) << ACRSIINT_RUMBLE_STATE2_SHIFT);\
}
#define ACRSIINT_INTR_MSK3_SIZE	1
#define ACRSIINT_INTR_MSK3_SHIFT	12
#define ACRSIINT_INTR_MSK3_MASK	0x00001000
#define ACRSIINT_GET_INTR_MSK3(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_INTR_MSK3_MASK) >> ACRSIINT_INTR_MSK3_SHIFT)
#define ACRSIINT_SET_INTR_MSK3(ACRSIINT, INTR_MSK3) { \
	FDL_ASSERT(!((INTR_MSK3) & ~((1 << ACRSIINT_INTR_MSK3_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_INTR_MSK3_MASK) | (((unsigned long)(INTR_MSK3)) << ACRSIINT_INTR_MSK3_SHIFT);\
}
#define ACRSIINT_NEW_RUMBLE3_SIZE	1
#define ACRSIINT_NEW_RUMBLE3_SHIFT	13
#define ACRSIINT_NEW_RUMBLE3_MASK	0x00002000
#define ACRSIINT_GET_NEW_RUMBLE3(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_NEW_RUMBLE3_MASK) >> ACRSIINT_NEW_RUMBLE3_SHIFT)
#define ACRSIINT_SET_NEW_RUMBLE3(ACRSIINT, NEW_RUMBLE3) { \
	FDL_ASSERT(!((NEW_RUMBLE3) & ~((1 << ACRSIINT_NEW_RUMBLE3_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_NEW_RUMBLE3_MASK) | (((unsigned long)(NEW_RUMBLE3)) << ACRSIINT_NEW_RUMBLE3_SHIFT);\
}
#define ACRSIINT_RUMBLE_STATE3_SIZE	2
#define ACRSIINT_RUMBLE_STATE3_SHIFT	14
#define ACRSIINT_RUMBLE_STATE3_MASK	0x0000c000
#define ACRSIINT_GET_RUMBLE_STATE3(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_RUMBLE_STATE3_MASK) >> ACRSIINT_RUMBLE_STATE3_SHIFT)
#define ACRSIINT_SET_RUMBLE_STATE3(ACRSIINT, RUMBLE_STATE3) { \
	FDL_ASSERT(!((RUMBLE_STATE3) & ~((1 << ACRSIINT_RUMBLE_STATE3_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_RUMBLE_STATE3_MASK) | (((unsigned long)(RUMBLE_STATE3)) << ACRSIINT_RUMBLE_STATE3_SHIFT);\
}
#define ACRSIINT_WR_DONE_MASK_SIZE	1
#define ACRSIINT_WR_DONE_MASK_SHIFT	16
#define ACRSIINT_WR_DONE_MASK_MASK	0x00010000
#define ACRSIINT_GET_WR_DONE_MASK(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_WR_DONE_MASK_MASK) >> ACRSIINT_WR_DONE_MASK_SHIFT)
#define ACRSIINT_SET_WR_DONE_MASK(ACRSIINT, WR_DONE_MASK) { \
	FDL_ASSERT(!((WR_DONE_MASK) & ~((1 << ACRSIINT_WR_DONE_MASK_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_WR_DONE_MASK_MASK) | (((unsigned long)(WR_DONE_MASK)) << ACRSIINT_WR_DONE_MASK_SHIFT);\
}
#define ACRSIINT_WR_DONE_SIZE	1
#define ACRSIINT_WR_DONE_SHIFT	17
#define ACRSIINT_WR_DONE_MASK	0x00020000
#define ACRSIINT_GET_WR_DONE(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_WR_DONE_MASK) >> ACRSIINT_WR_DONE_SHIFT)
#define ACRSIINT_SET_WR_DONE(ACRSIINT, WR_DONE) { \
	FDL_ASSERT(!((WR_DONE) & ~((1 << ACRSIINT_WR_DONE_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_WR_DONE_MASK) | (((unsigned long)(WR_DONE)) << ACRSIINT_WR_DONE_SHIFT);\
}
#define ACRSIINT_WR_IN_PROG_SIZE	1
#define ACRSIINT_WR_IN_PROG_SHIFT	18
#define ACRSIINT_WR_IN_PROG_MASK	0x00040000
#define ACRSIINT_GET_WR_IN_PROG(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_WR_IN_PROG_MASK) >> ACRSIINT_WR_IN_PROG_SHIFT)
#define ACRSIINT_SET_WR_IN_PROG(ACRSIINT, WR_IN_PROG) { \
	FDL_ASSERT(!((WR_IN_PROG) & ~((1 << ACRSIINT_WR_IN_PROG_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_WR_IN_PROG_MASK) | (((unsigned long)(WR_IN_PROG)) << ACRSIINT_WR_IN_PROG_SHIFT);\
}
#define ACRSIINT_PAD0_SIZE	13
#define ACRSIINT_PAD0_SHIFT	19
#define ACRSIINT_PAD0_MASK	0xfff80000
#define ACRSIINT_GET_PAD0(ACRSIINT) \
	((((unsigned long)(ACRSIINT)) & ACRSIINT_PAD0_MASK) >> ACRSIINT_PAD0_SHIFT)
#define ACRSIINT_SET_PAD0(ACRSIINT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRSIINT_PAD0_SIZE)-1))); \
	ACRSIINT = (((unsigned long)(ACRSIINT)) & ~ACRSIINT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSIINT_PAD0_SHIFT);\
}
#define ACRSIINT_TOTAL_SIZE	32
#define ACRSIINT(INTR_MSK0, NEW_RUMBLE0, RUMBLE_STATE0, INTR_MSK1, NEW_RUMBLE1, RUMBLE_STATE1, INTR_MSK2, NEW_RUMBLE2, RUMBLE_STATE2, INTR_MSK3, NEW_RUMBLE3, RUMBLE_STATE3, WR_DONE_MASK, WR_DONE, WR_IN_PROG) \
	((((unsigned long)(INTR_MSK0)) << ACRSIINT_INTR_MSK0_SHIFT) | \
	 (((unsigned long)(NEW_RUMBLE0)) << ACRSIINT_NEW_RUMBLE0_SHIFT) | \
	 (((unsigned long)(RUMBLE_STATE0)) << ACRSIINT_RUMBLE_STATE0_SHIFT) | \
	 (((unsigned long)(INTR_MSK1)) << ACRSIINT_INTR_MSK1_SHIFT) | \
	 (((unsigned long)(NEW_RUMBLE1)) << ACRSIINT_NEW_RUMBLE1_SHIFT) | \
	 (((unsigned long)(RUMBLE_STATE1)) << ACRSIINT_RUMBLE_STATE1_SHIFT) | \
	 (((unsigned long)(INTR_MSK2)) << ACRSIINT_INTR_MSK2_SHIFT) | \
	 (((unsigned long)(NEW_RUMBLE2)) << ACRSIINT_NEW_RUMBLE2_SHIFT) | \
	 (((unsigned long)(RUMBLE_STATE2)) << ACRSIINT_RUMBLE_STATE2_SHIFT) | \
	 (((unsigned long)(INTR_MSK3)) << ACRSIINT_INTR_MSK3_SHIFT) | \
	 (((unsigned long)(NEW_RUMBLE3)) << ACRSIINT_NEW_RUMBLE3_SHIFT) | \
	 (((unsigned long)(RUMBLE_STATE3)) << ACRSIINT_RUMBLE_STATE3_SHIFT) | \
	 (((unsigned long)(WR_DONE_MASK)) << ACRSIINT_WR_DONE_MASK_SHIFT) | \
	 (((unsigned long)(WR_DONE)) << ACRSIINT_WR_DONE_SHIFT) | \
	 (((unsigned long)(WR_IN_PROG)) << ACRSIINT_WR_IN_PROG_SHIFT))

/*
 *  ACRARBCFGM struct
 */
#define ACRARBCFGM_BYTEMIN_SIZE	3
#define ACRARBCFGM_BYTEMIN_SHIFT	0
#define ACRARBCFGM_BYTEMIN_MASK	0x00000007
#define ACRARBCFGM_GET_BYTEMIN(ACRARBCFGM) \
	((((unsigned long)(ACRARBCFGM)) & ACRARBCFGM_BYTEMIN_MASK) >> ACRARBCFGM_BYTEMIN_SHIFT)
#define ACRARBCFGM_SET_BYTEMIN(ACRARBCFGM, BYTEMIN) { \
	FDL_ASSERT(!((BYTEMIN) & ~((1 << ACRARBCFGM_BYTEMIN_SIZE)-1))); \
	ACRARBCFGM = (((unsigned long)(ACRARBCFGM)) & ~ACRARBCFGM_BYTEMIN_MASK) | (((unsigned long)(BYTEMIN)) << ACRARBCFGM_BYTEMIN_SHIFT);\
}
#define ACRARBCFGM_GRANTTODIS_SIZE	1
#define ACRARBCFGM_GRANTTODIS_SHIFT	3
#define ACRARBCFGM_GRANTTODIS_MASK	0x00000008
#define ACRARBCFGM_GET_GRANTTODIS(ACRARBCFGM) \
	((((unsigned long)(ACRARBCFGM)) & ACRARBCFGM_GRANTTODIS_MASK) >> ACRARBCFGM_GRANTTODIS_SHIFT)
#define ACRARBCFGM_SET_GRANTTODIS(ACRARBCFGM, GRANTTODIS) { \
	FDL_ASSERT(!((GRANTTODIS) & ~((1 << ACRARBCFGM_GRANTTODIS_SIZE)-1))); \
	ACRARBCFGM = (((unsigned long)(ACRARBCFGM)) & ~ACRARBCFGM_GRANTTODIS_MASK) | (((unsigned long)(GRANTTODIS)) << ACRARBCFGM_GRANTTODIS_SHIFT);\
}
#define ACRARBCFGM_GRANTTO_SIZE	2
#define ACRARBCFGM_GRANTTO_SHIFT	4
#define ACRARBCFGM_GRANTTO_MASK	0x00000030
#define ACRARBCFGM_GET_GRANTTO(ACRARBCFGM) \
	((((unsigned long)(ACRARBCFGM)) & ACRARBCFGM_GRANTTO_MASK) >> ACRARBCFGM_GRANTTO_SHIFT)
#define ACRARBCFGM_SET_GRANTTO(ACRARBCFGM, GRANTTO) { \
	FDL_ASSERT(!((GRANTTO) & ~((1 << ACRARBCFGM_GRANTTO_SIZE)-1))); \
	ACRARBCFGM = (((unsigned long)(ACRARBCFGM)) & ~ACRARBCFGM_GRANTTO_MASK) | (((unsigned long)(GRANTTO)) << ACRARBCFGM_GRANTTO_SHIFT);\
}
#define ACRARBCFGM_CYMIN_SIZE	4
#define ACRARBCFGM_CYMIN_SHIFT	6
#define ACRARBCFGM_CYMIN_MASK	0x000003c0
#define ACRARBCFGM_GET_CYMIN(ACRARBCFGM) \
	((((unsigned long)(ACRARBCFGM)) & ACRARBCFGM_CYMIN_MASK) >> ACRARBCFGM_CYMIN_SHIFT)
#define ACRARBCFGM_SET_CYMIN(ACRARBCFGM, CYMIN) { \
	FDL_ASSERT(!((CYMIN) & ~((1 << ACRARBCFGM_CYMIN_SIZE)-1))); \
	ACRARBCFGM = (((unsigned long)(ACRARBCFGM)) & ~ACRARBCFGM_CYMIN_MASK) | (((unsigned long)(CYMIN)) << ACRARBCFGM_CYMIN_SHIFT);\
}
#define ACRARBCFGM_REQMASK_SIZE	1
#define ACRARBCFGM_REQMASK_SHIFT	10
#define ACRARBCFGM_REQMASK_MASK	0x00000400
#define ACRARBCFGM_GET_REQMASK(ACRARBCFGM) \
	((((unsigned long)(ACRARBCFGM)) & ACRARBCFGM_REQMASK_MASK) >> ACRARBCFGM_REQMASK_SHIFT)
#define ACRARBCFGM_SET_REQMASK(ACRARBCFGM, REQMASK) { \
	FDL_ASSERT(!((REQMASK) & ~((1 << ACRARBCFGM_REQMASK_SIZE)-1))); \
	ACRARBCFGM = (((unsigned long)(ACRARBCFGM)) & ~ACRARBCFGM_REQMASK_MASK) | (((unsigned long)(REQMASK)) << ACRARBCFGM_REQMASK_SHIFT);\
}
#define ACRARBCFGM_DMAREQPRI_SIZE	1
#define ACRARBCFGM_DMAREQPRI_SHIFT	11
#define ACRARBCFGM_DMAREQPRI_MASK	0x00000800
#define ACRARBCFGM_GET_DMAREQPRI(ACRARBCFGM) \
	((((unsigned long)(ACRARBCFGM)) & ACRARBCFGM_DMAREQPRI_MASK) >> ACRARBCFGM_DMAREQPRI_SHIFT)
#define ACRARBCFGM_SET_DMAREQPRI(ACRARBCFGM, DMAREQPRI) { \
	FDL_ASSERT(!((DMAREQPRI) & ~((1 << ACRARBCFGM_DMAREQPRI_SIZE)-1))); \
	ACRARBCFGM = (((unsigned long)(ACRARBCFGM)) & ~ACRARBCFGM_DMAREQPRI_MASK) | (((unsigned long)(DMAREQPRI)) << ACRARBCFGM_DMAREQPRI_SHIFT);\
}
#define ACRARBCFGM_PAD0_SIZE	20
#define ACRARBCFGM_PAD0_SHIFT	12
#define ACRARBCFGM_PAD0_MASK	0xfffff000
#define ACRARBCFGM_GET_PAD0(ACRARBCFGM) \
	((((unsigned long)(ACRARBCFGM)) & ACRARBCFGM_PAD0_MASK) >> ACRARBCFGM_PAD0_SHIFT)
#define ACRARBCFGM_SET_PAD0(ACRARBCFGM, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRARBCFGM_PAD0_SIZE)-1))); \
	ACRARBCFGM = (((unsigned long)(ACRARBCFGM)) & ~ACRARBCFGM_PAD0_MASK) | (((unsigned long)(pad0)) << ACRARBCFGM_PAD0_SHIFT);\
}
#define ACRARBCFGM_TOTAL_SIZE	32
#define ACRARBCFGM(BYTEMIN, GRANTTODIS, GRANTTO, CYMIN, REQMASK, DMAREQPRI) \
	((((unsigned long)(BYTEMIN)) << ACRARBCFGM_BYTEMIN_SHIFT) | \
	 (((unsigned long)(GRANTTODIS)) << ACRARBCFGM_GRANTTODIS_SHIFT) | \
	 (((unsigned long)(GRANTTO)) << ACRARBCFGM_GRANTTO_SHIFT) | \
	 (((unsigned long)(CYMIN)) << ACRARBCFGM_CYMIN_SHIFT) | \
	 (((unsigned long)(REQMASK)) << ACRARBCFGM_REQMASK_SHIFT) | \
	 (((unsigned long)(DMAREQPRI)) << ACRARBCFGM_DMAREQPRI_SHIFT))

/*
 *  ACRARBCFGCPU struct
 */
#define ACRARBCFGCPU_DELAYEN_SIZE	1
#define ACRARBCFGCPU_DELAYEN_SHIFT	0
#define ACRARBCFGCPU_DELAYEN_MASK	0x00000001
#define ACRARBCFGCPU_GET_DELAYEN(ACRARBCFGCPU) \
	((((unsigned long)(ACRARBCFGCPU)) & ACRARBCFGCPU_DELAYEN_MASK) >> ACRARBCFGCPU_DELAYEN_SHIFT)
#define ACRARBCFGCPU_SET_DELAYEN(ACRARBCFGCPU, DELAYEN) { \
	FDL_ASSERT(!((DELAYEN) & ~((1 << ACRARBCFGCPU_DELAYEN_SIZE)-1))); \
	ACRARBCFGCPU = (((unsigned long)(ACRARBCFGCPU)) & ~ACRARBCFGCPU_DELAYEN_MASK) | (((unsigned long)(DELAYEN)) << ACRARBCFGCPU_DELAYEN_SHIFT);\
}
#define ACRARBCFGCPU_PAD0_SIZE	3
#define ACRARBCFGCPU_PAD0_SHIFT	1
#define ACRARBCFGCPU_PAD0_MASK	0x0000000e
#define ACRARBCFGCPU_GET_PAD0(ACRARBCFGCPU) \
	((((unsigned long)(ACRARBCFGCPU)) & ACRARBCFGCPU_PAD0_MASK) >> ACRARBCFGCPU_PAD0_SHIFT)
#define ACRARBCFGCPU_SET_PAD0(ACRARBCFGCPU, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRARBCFGCPU_PAD0_SIZE)-1))); \
	ACRARBCFGCPU = (((unsigned long)(ACRARBCFGCPU)) & ~ACRARBCFGCPU_PAD0_MASK) | (((unsigned long)(pad0)) << ACRARBCFGCPU_PAD0_SHIFT);\
}
#define ACRARBCFGCPU_DELAYCNT_SIZE	12
#define ACRARBCFGCPU_DELAYCNT_SHIFT	4
#define ACRARBCFGCPU_DELAYCNT_MASK	0x0000fff0
#define ACRARBCFGCPU_GET_DELAYCNT(ACRARBCFGCPU) \
	((((unsigned long)(ACRARBCFGCPU)) & ACRARBCFGCPU_DELAYCNT_MASK) >> ACRARBCFGCPU_DELAYCNT_SHIFT)
#define ACRARBCFGCPU_SET_DELAYCNT(ACRARBCFGCPU, DELAYCNT) { \
	FDL_ASSERT(!((DELAYCNT) & ~((1 << ACRARBCFGCPU_DELAYCNT_SIZE)-1))); \
	ACRARBCFGCPU = (((unsigned long)(ACRARBCFGCPU)) & ~ACRARBCFGCPU_DELAYCNT_MASK) | (((unsigned long)(DELAYCNT)) << ACRARBCFGCPU_DELAYCNT_SHIFT);\
}
#define ACRARBCFGCPU_STOPCNT_SIZE	4
#define ACRARBCFGCPU_STOPCNT_SHIFT	16
#define ACRARBCFGCPU_STOPCNT_MASK	0x000f0000
#define ACRARBCFGCPU_GET_STOPCNT(ACRARBCFGCPU) \
	((((unsigned long)(ACRARBCFGCPU)) & ACRARBCFGCPU_STOPCNT_MASK) >> ACRARBCFGCPU_STOPCNT_SHIFT)
#define ACRARBCFGCPU_SET_STOPCNT(ACRARBCFGCPU, STOPCNT) { \
	FDL_ASSERT(!((STOPCNT) & ~((1 << ACRARBCFGCPU_STOPCNT_SIZE)-1))); \
	ACRARBCFGCPU = (((unsigned long)(ACRARBCFGCPU)) & ~ACRARBCFGCPU_STOPCNT_MASK) | (((unsigned long)(STOPCNT)) << ACRARBCFGCPU_STOPCNT_SHIFT);\
}
#define ACRARBCFGCPU_ARB_DIS_CY_SIZE	1
#define ACRARBCFGCPU_ARB_DIS_CY_SHIFT	20
#define ACRARBCFGCPU_ARB_DIS_CY_MASK	0x00100000
#define ACRARBCFGCPU_GET_ARB_DIS_CY(ACRARBCFGCPU) \
	((((unsigned long)(ACRARBCFGCPU)) & ACRARBCFGCPU_ARB_DIS_CY_MASK) >> ACRARBCFGCPU_ARB_DIS_CY_SHIFT)
#define ACRARBCFGCPU_SET_ARB_DIS_CY(ACRARBCFGCPU, ARB_DIS_CY) { \
	FDL_ASSERT(!((ARB_DIS_CY) & ~((1 << ACRARBCFGCPU_ARB_DIS_CY_SIZE)-1))); \
	ACRARBCFGCPU = (((unsigned long)(ACRARBCFGCPU)) & ~ACRARBCFGCPU_ARB_DIS_CY_MASK) | (((unsigned long)(ARB_DIS_CY)) << ACRARBCFGCPU_ARB_DIS_CY_SHIFT);\
}
#define ACRARBCFGCPU_ARB_DIS_BYTE_SIZE	1
#define ACRARBCFGCPU_ARB_DIS_BYTE_SHIFT	21
#define ACRARBCFGCPU_ARB_DIS_BYTE_MASK	0x00200000
#define ACRARBCFGCPU_GET_ARB_DIS_BYTE(ACRARBCFGCPU) \
	((((unsigned long)(ACRARBCFGCPU)) & ACRARBCFGCPU_ARB_DIS_BYTE_MASK) >> ACRARBCFGCPU_ARB_DIS_BYTE_SHIFT)
#define ACRARBCFGCPU_SET_ARB_DIS_BYTE(ACRARBCFGCPU, ARB_DIS_BYTE) { \
	FDL_ASSERT(!((ARB_DIS_BYTE) & ~((1 << ACRARBCFGCPU_ARB_DIS_BYTE_SIZE)-1))); \
	ACRARBCFGCPU = (((unsigned long)(ACRARBCFGCPU)) & ~ACRARBCFGCPU_ARB_DIS_BYTE_MASK) | (((unsigned long)(ARB_DIS_BYTE)) << ACRARBCFGCPU_ARB_DIS_BYTE_SHIFT);\
}
#define ACRARBCFGCPU_PAD1_SIZE	10
#define ACRARBCFGCPU_PAD1_SHIFT	22
#define ACRARBCFGCPU_PAD1_MASK	0xffc00000
#define ACRARBCFGCPU_GET_PAD1(ACRARBCFGCPU) \
	((((unsigned long)(ACRARBCFGCPU)) & ACRARBCFGCPU_PAD1_MASK) >> ACRARBCFGCPU_PAD1_SHIFT)
#define ACRARBCFGCPU_SET_PAD1(ACRARBCFGCPU, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRARBCFGCPU_PAD1_SIZE)-1))); \
	ACRARBCFGCPU = (((unsigned long)(ACRARBCFGCPU)) & ~ACRARBCFGCPU_PAD1_MASK) | (((unsigned long)(pad1)) << ACRARBCFGCPU_PAD1_SHIFT);\
}
#define ACRARBCFGCPU_TOTAL_SIZE	32
#define ACRARBCFGCPU(DELAYEN, DELAYCNT, STOPCNT, ARB_DIS_CY, ARB_DIS_BYTE) \
	((((unsigned long)(DELAYEN)) << ACRARBCFGCPU_DELAYEN_SHIFT) | \
	 (((unsigned long)(DELAYCNT)) << ACRARBCFGCPU_DELAYCNT_SHIFT) | \
	 (((unsigned long)(STOPCNT)) << ACRARBCFGCPU_STOPCNT_SHIFT) | \
	 (((unsigned long)(ARB_DIS_CY)) << ACRARBCFGCPU_ARB_DIS_CY_SHIFT) | \
	 (((unsigned long)(ARB_DIS_BYTE)) << ACRARBCFGCPU_ARB_DIS_BYTE_SHIFT))

/*
 *  ACRARBCFGDMA struct
 */
#define ACRARBCFGDMA_DELAYEN_SIZE	1
#define ACRARBCFGDMA_DELAYEN_SHIFT	0
#define ACRARBCFGDMA_DELAYEN_MASK	0x00000001
#define ACRARBCFGDMA_GET_DELAYEN(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_DELAYEN_MASK) >> ACRARBCFGDMA_DELAYEN_SHIFT)
#define ACRARBCFGDMA_SET_DELAYEN(ACRARBCFGDMA, DELAYEN) { \
	FDL_ASSERT(!((DELAYEN) & ~((1 << ACRARBCFGDMA_DELAYEN_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_DELAYEN_MASK) | (((unsigned long)(DELAYEN)) << ACRARBCFGDMA_DELAYEN_SHIFT);\
}
#define ACRARBCFGDMA_PAD0_SIZE	3
#define ACRARBCFGDMA_PAD0_SHIFT	1
#define ACRARBCFGDMA_PAD0_MASK	0x0000000e
#define ACRARBCFGDMA_GET_PAD0(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_PAD0_MASK) >> ACRARBCFGDMA_PAD0_SHIFT)
#define ACRARBCFGDMA_SET_PAD0(ACRARBCFGDMA, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRARBCFGDMA_PAD0_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_PAD0_MASK) | (((unsigned long)(pad0)) << ACRARBCFGDMA_PAD0_SHIFT);\
}
#define ACRARBCFGDMA_DELAYCNT_SIZE	12
#define ACRARBCFGDMA_DELAYCNT_SHIFT	4
#define ACRARBCFGDMA_DELAYCNT_MASK	0x0000fff0
#define ACRARBCFGDMA_GET_DELAYCNT(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_DELAYCNT_MASK) >> ACRARBCFGDMA_DELAYCNT_SHIFT)
#define ACRARBCFGDMA_SET_DELAYCNT(ACRARBCFGDMA, DELAYCNT) { \
	FDL_ASSERT(!((DELAYCNT) & ~((1 << ACRARBCFGDMA_DELAYCNT_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_DELAYCNT_MASK) | (((unsigned long)(DELAYCNT)) << ACRARBCFGDMA_DELAYCNT_SHIFT);\
}
#define ACRARBCFGDMA_PRI_EN_SIZE	1
#define ACRARBCFGDMA_PRI_EN_SHIFT	16
#define ACRARBCFGDMA_PRI_EN_MASK	0x00010000
#define ACRARBCFGDMA_GET_PRI_EN(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_PRI_EN_MASK) >> ACRARBCFGDMA_PRI_EN_SHIFT)
#define ACRARBCFGDMA_SET_PRI_EN(ACRARBCFGDMA, PRI_EN) { \
	FDL_ASSERT(!((PRI_EN) & ~((1 << ACRARBCFGDMA_PRI_EN_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_PRI_EN_MASK) | (((unsigned long)(PRI_EN)) << ACRARBCFGDMA_PRI_EN_SHIFT);\
}
#define ACRARBCFGDMA_LP_COUNT_SIZE	3
#define ACRARBCFGDMA_LP_COUNT_SHIFT	17
#define ACRARBCFGDMA_LP_COUNT_MASK	0x000e0000
#define ACRARBCFGDMA_GET_LP_COUNT(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_LP_COUNT_MASK) >> ACRARBCFGDMA_LP_COUNT_SHIFT)
#define ACRARBCFGDMA_SET_LP_COUNT(ACRARBCFGDMA, LP_COUNT) { \
	FDL_ASSERT(!((LP_COUNT) & ~((1 << ACRARBCFGDMA_LP_COUNT_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_LP_COUNT_MASK) | (((unsigned long)(LP_COUNT)) << ACRARBCFGDMA_LP_COUNT_SHIFT);\
}
#define ACRARBCFGDMA_ARB_DIS_CY_SIZE	1
#define ACRARBCFGDMA_ARB_DIS_CY_SHIFT	20
#define ACRARBCFGDMA_ARB_DIS_CY_MASK	0x00100000
#define ACRARBCFGDMA_GET_ARB_DIS_CY(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_ARB_DIS_CY_MASK) >> ACRARBCFGDMA_ARB_DIS_CY_SHIFT)
#define ACRARBCFGDMA_SET_ARB_DIS_CY(ACRARBCFGDMA, ARB_DIS_CY) { \
	FDL_ASSERT(!((ARB_DIS_CY) & ~((1 << ACRARBCFGDMA_ARB_DIS_CY_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_ARB_DIS_CY_MASK) | (((unsigned long)(ARB_DIS_CY)) << ACRARBCFGDMA_ARB_DIS_CY_SHIFT);\
}
#define ACRARBCFGDMA_ARB_DIS_BYTE_SIZE	1
#define ACRARBCFGDMA_ARB_DIS_BYTE_SHIFT	21
#define ACRARBCFGDMA_ARB_DIS_BYTE_MASK	0x00200000
#define ACRARBCFGDMA_GET_ARB_DIS_BYTE(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_ARB_DIS_BYTE_MASK) >> ACRARBCFGDMA_ARB_DIS_BYTE_SHIFT)
#define ACRARBCFGDMA_SET_ARB_DIS_BYTE(ACRARBCFGDMA, ARB_DIS_BYTE) { \
	FDL_ASSERT(!((ARB_DIS_BYTE) & ~((1 << ACRARBCFGDMA_ARB_DIS_BYTE_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_ARB_DIS_BYTE_MASK) | (((unsigned long)(ARB_DIS_BYTE)) << ACRARBCFGDMA_ARB_DIS_BYTE_SHIFT);\
}
#define ACRARBCFGDMA_PAD1_SIZE	10
#define ACRARBCFGDMA_PAD1_SHIFT	22
#define ACRARBCFGDMA_PAD1_MASK	0xffc00000
#define ACRARBCFGDMA_GET_PAD1(ACRARBCFGDMA) \
	((((unsigned long)(ACRARBCFGDMA)) & ACRARBCFGDMA_PAD1_MASK) >> ACRARBCFGDMA_PAD1_SHIFT)
#define ACRARBCFGDMA_SET_PAD1(ACRARBCFGDMA, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRARBCFGDMA_PAD1_SIZE)-1))); \
	ACRARBCFGDMA = (((unsigned long)(ACRARBCFGDMA)) & ~ACRARBCFGDMA_PAD1_MASK) | (((unsigned long)(pad1)) << ACRARBCFGDMA_PAD1_SHIFT);\
}
#define ACRARBCFGDMA_TOTAL_SIZE	32
#define ACRARBCFGDMA(DELAYEN, DELAYCNT, PRI_EN, LP_COUNT, ARB_DIS_CY, ARB_DIS_BYTE) \
	((((unsigned long)(DELAYEN)) << ACRARBCFGDMA_DELAYEN_SHIFT) | \
	 (((unsigned long)(DELAYCNT)) << ACRARBCFGDMA_DELAYCNT_SHIFT) | \
	 (((unsigned long)(PRI_EN)) << ACRARBCFGDMA_PRI_EN_SHIFT) | \
	 (((unsigned long)(LP_COUNT)) << ACRARBCFGDMA_LP_COUNT_SHIFT) | \
	 (((unsigned long)(ARB_DIS_CY)) << ACRARBCFGDMA_ARB_DIS_CY_SHIFT) | \
	 (((unsigned long)(ARB_DIS_BYTE)) << ACRARBCFGDMA_ARB_DIS_BYTE_SHIFT))

/*
 *  ACRARBPCNTCFG struct
 */
#define ACRARBPCNTCFG_CNT_PSET_SIZE	8
#define ACRARBPCNTCFG_CNT_PSET_SHIFT	0
#define ACRARBPCNTCFG_CNT_PSET_MASK	0x000000ff
#define ACRARBPCNTCFG_GET_CNT_PSET(ACRARBPCNTCFG) \
	((((unsigned long)(ACRARBPCNTCFG)) & ACRARBPCNTCFG_CNT_PSET_MASK) >> ACRARBPCNTCFG_CNT_PSET_SHIFT)
#define ACRARBPCNTCFG_SET_CNT_PSET(ACRARBPCNTCFG, CNT_PSET) { \
	FDL_ASSERT(!((CNT_PSET) & ~((1 << ACRARBPCNTCFG_CNT_PSET_SIZE)-1))); \
	ACRARBPCNTCFG = (((unsigned long)(ACRARBPCNTCFG)) & ~ACRARBPCNTCFG_CNT_PSET_MASK) | (((unsigned long)(CNT_PSET)) << ACRARBPCNTCFG_CNT_PSET_SHIFT);\
}
#define ACRARBPCNTCFG_CNT_TYPE_SIZE	4
#define ACRARBPCNTCFG_CNT_TYPE_SHIFT	8
#define ACRARBPCNTCFG_CNT_TYPE_MASK	0x00000f00
#define ACRARBPCNTCFG_GET_CNT_TYPE(ACRARBPCNTCFG) \
	((((unsigned long)(ACRARBPCNTCFG)) & ACRARBPCNTCFG_CNT_TYPE_MASK) >> ACRARBPCNTCFG_CNT_TYPE_SHIFT)
#define ACRARBPCNTCFG_SET_CNT_TYPE(ACRARBPCNTCFG, CNT_TYPE) { \
	FDL_ASSERT(!((CNT_TYPE) & ~((1 << ACRARBPCNTCFG_CNT_TYPE_SIZE)-1))); \
	ACRARBPCNTCFG = (((unsigned long)(ACRARBPCNTCFG)) & ~ACRARBPCNTCFG_CNT_TYPE_MASK) | (((unsigned long)(CNT_TYPE)) << ACRARBPCNTCFG_CNT_TYPE_SHIFT);\
}
#define ACRARBPCNTCFG_MASTER_SIZE	4
#define ACRARBPCNTCFG_MASTER_SHIFT	12
#define ACRARBPCNTCFG_MASTER_MASK	0x0000f000
#define ACRARBPCNTCFG_GET_MASTER(ACRARBPCNTCFG) \
	((((unsigned long)(ACRARBPCNTCFG)) & ACRARBPCNTCFG_MASTER_MASK) >> ACRARBPCNTCFG_MASTER_SHIFT)
#define ACRARBPCNTCFG_SET_MASTER(ACRARBPCNTCFG, MASTER) { \
	FDL_ASSERT(!((MASTER) & ~((1 << ACRARBPCNTCFG_MASTER_SIZE)-1))); \
	ACRARBPCNTCFG = (((unsigned long)(ACRARBPCNTCFG)) & ~ACRARBPCNTCFG_MASTER_MASK) | (((unsigned long)(MASTER)) << ACRARBPCNTCFG_MASTER_SHIFT);\
}
#define ACRARBPCNTCFG_CUMUL_EN_SIZE	1
#define ACRARBPCNTCFG_CUMUL_EN_SHIFT	16
#define ACRARBPCNTCFG_CUMUL_EN_MASK	0x00010000
#define ACRARBPCNTCFG_GET_CUMUL_EN(ACRARBPCNTCFG) \
	((((unsigned long)(ACRARBPCNTCFG)) & ACRARBPCNTCFG_CUMUL_EN_MASK) >> ACRARBPCNTCFG_CUMUL_EN_SHIFT)
#define ACRARBPCNTCFG_SET_CUMUL_EN(ACRARBPCNTCFG, CUMUL_EN) { \
	FDL_ASSERT(!((CUMUL_EN) & ~((1 << ACRARBPCNTCFG_CUMUL_EN_SIZE)-1))); \
	ACRARBPCNTCFG = (((unsigned long)(ACRARBPCNTCFG)) & ~ACRARBPCNTCFG_CUMUL_EN_MASK) | (((unsigned long)(CUMUL_EN)) << ACRARBPCNTCFG_CUMUL_EN_SHIFT);\
}
#define ACRARBPCNTCFG_PAD0_SIZE	15
#define ACRARBPCNTCFG_PAD0_SHIFT	17
#define ACRARBPCNTCFG_PAD0_MASK	0xfffe0000
#define ACRARBPCNTCFG_GET_PAD0(ACRARBPCNTCFG) \
	((((unsigned long)(ACRARBPCNTCFG)) & ACRARBPCNTCFG_PAD0_MASK) >> ACRARBPCNTCFG_PAD0_SHIFT)
#define ACRARBPCNTCFG_SET_PAD0(ACRARBPCNTCFG, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRARBPCNTCFG_PAD0_SIZE)-1))); \
	ACRARBPCNTCFG = (((unsigned long)(ACRARBPCNTCFG)) & ~ACRARBPCNTCFG_PAD0_MASK) | (((unsigned long)(pad0)) << ACRARBPCNTCFG_PAD0_SHIFT);\
}
#define ACRARBPCNTCFG_TOTAL_SIZE	32
#define ACRARBPCNTCFG(CNT_PSET, CNT_TYPE, MASTER, CUMUL_EN) \
	((((unsigned long)(CNT_PSET)) << ACRARBPCNTCFG_CNT_PSET_SHIFT) | \
	 (((unsigned long)(CNT_TYPE)) << ACRARBPCNTCFG_CNT_TYPE_SHIFT) | \
	 (((unsigned long)(MASTER)) << ACRARBPCNTCFG_MASTER_SHIFT) | \
	 (((unsigned long)(CUMUL_EN)) << ACRARBPCNTCFG_CUMUL_EN_SHIFT))

/*
 *  ACRARBPCNTSTS struct
 */
#define ACRARBPCNTSTS_COUNT_SIZE	20
#define ACRARBPCNTSTS_COUNT_SHIFT	0
#define ACRARBPCNTSTS_COUNT_MASK	0x000fffff
#define ACRARBPCNTSTS_GET_COUNT(ACRARBPCNTSTS) \
	((((unsigned long)(ACRARBPCNTSTS)) & ACRARBPCNTSTS_COUNT_MASK) >> ACRARBPCNTSTS_COUNT_SHIFT)
#define ACRARBPCNTSTS_SET_COUNT(ACRARBPCNTSTS, COUNT) { \
	FDL_ASSERT(!((COUNT) & ~((1 << ACRARBPCNTSTS_COUNT_SIZE)-1))); \
	ACRARBPCNTSTS = (((unsigned long)(ACRARBPCNTSTS)) & ~ACRARBPCNTSTS_COUNT_MASK) | (((unsigned long)(COUNT)) << ACRARBPCNTSTS_COUNT_SHIFT);\
}
#define ACRARBPCNTSTS_PAD0_SIZE	10
#define ACRARBPCNTSTS_PAD0_SHIFT	20
#define ACRARBPCNTSTS_PAD0_MASK	0x3ff00000
#define ACRARBPCNTSTS_GET_PAD0(ACRARBPCNTSTS) \
	((((unsigned long)(ACRARBPCNTSTS)) & ACRARBPCNTSTS_PAD0_MASK) >> ACRARBPCNTSTS_PAD0_SHIFT)
#define ACRARBPCNTSTS_SET_PAD0(ACRARBPCNTSTS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRARBPCNTSTS_PAD0_SIZE)-1))); \
	ACRARBPCNTSTS = (((unsigned long)(ACRARBPCNTSTS)) & ~ACRARBPCNTSTS_PAD0_MASK) | (((unsigned long)(pad0)) << ACRARBPCNTSTS_PAD0_SHIFT);\
}
#define ACRARBPCNTSTS_COUNT_VALID_SIZE	1
#define ACRARBPCNTSTS_COUNT_VALID_SHIFT	30
#define ACRARBPCNTSTS_COUNT_VALID_MASK	0x40000000
#define ACRARBPCNTSTS_GET_COUNT_VALID(ACRARBPCNTSTS) \
	((((unsigned long)(ACRARBPCNTSTS)) & ACRARBPCNTSTS_COUNT_VALID_MASK) >> ACRARBPCNTSTS_COUNT_VALID_SHIFT)
#define ACRARBPCNTSTS_SET_COUNT_VALID(ACRARBPCNTSTS, COUNT_VALID) { \
	FDL_ASSERT(!((COUNT_VALID) & ~((1 << ACRARBPCNTSTS_COUNT_VALID_SIZE)-1))); \
	ACRARBPCNTSTS = (((unsigned long)(ACRARBPCNTSTS)) & ~ACRARBPCNTSTS_COUNT_VALID_MASK) | (((unsigned long)(COUNT_VALID)) << ACRARBPCNTSTS_COUNT_VALID_SHIFT);\
}
#define ACRARBPCNTSTS_OVERFLOW_SIZE	1
#define ACRARBPCNTSTS_OVERFLOW_SHIFT	31
#define ACRARBPCNTSTS_OVERFLOW_MASK	0x80000000
#define ACRARBPCNTSTS_GET_OVERFLOW(ACRARBPCNTSTS) \
	((((unsigned long)(ACRARBPCNTSTS)) & ACRARBPCNTSTS_OVERFLOW_MASK) >> ACRARBPCNTSTS_OVERFLOW_SHIFT)
#define ACRARBPCNTSTS_SET_OVERFLOW(ACRARBPCNTSTS, OVERFLOW) { \
	FDL_ASSERT(!((OVERFLOW) & ~((1 << ACRARBPCNTSTS_OVERFLOW_SIZE)-1))); \
	ACRARBPCNTSTS = (((unsigned long)(ACRARBPCNTSTS)) & ~ACRARBPCNTSTS_OVERFLOW_MASK) | (((unsigned long)(OVERFLOW)) << ACRARBPCNTSTS_OVERFLOW_SHIFT);\
}
#define ACRARBPCNTSTS_TOTAL_SIZE	32
#define ACRARBPCNTSTS(COUNT, COUNT_VALID, OVERFLOW) \
	((((unsigned long)(COUNT)) << ACRARBPCNTSTS_COUNT_SHIFT) | \
	 (((unsigned long)(COUNT_VALID)) << ACRARBPCNTSTS_COUNT_VALID_SHIFT) | \
	 (((unsigned long)(OVERFLOW)) << ACRARBPCNTSTS_OVERFLOW_SHIFT))

/*
 *  ACRSRNPROT struct
 */
#define ACRSRNPROT_AESEN_SIZE	1
#define ACRSRNPROT_AESEN_SHIFT	0
#define ACRSRNPROT_AESEN_MASK	0x00000001
#define ACRSRNPROT_GET_AESEN(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_AESEN_MASK) >> ACRSRNPROT_AESEN_SHIFT)
#define ACRSRNPROT_SET_AESEN(ACRSRNPROT, AESEN) { \
	FDL_ASSERT(!((AESEN) & ~((1 << ACRSRNPROT_AESEN_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_AESEN_MASK) | (((unsigned long)(AESEN)) << ACRSRNPROT_AESEN_SHIFT);\
}
#define ACRSRNPROT_SHAEN_SIZE	1
#define ACRSRNPROT_SHAEN_SHIFT	1
#define ACRSRNPROT_SHAEN_MASK	0x00000002
#define ACRSRNPROT_GET_SHAEN(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_SHAEN_MASK) >> ACRSRNPROT_SHAEN_SHIFT)
#define ACRSRNPROT_SET_SHAEN(ACRSRNPROT, SHAEN) { \
	FDL_ASSERT(!((SHAEN) & ~((1 << ACRSRNPROT_SHAEN_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_SHAEN_MASK) | (((unsigned long)(SHAEN)) << ACRSRNPROT_SHAEN_SHIFT);\
}
#define ACRSRNPROT_FLAEN_SIZE	1
#define ACRSRNPROT_FLAEN_SHIFT	2
#define ACRSRNPROT_FLAEN_MASK	0x00000004
#define ACRSRNPROT_GET_FLAEN(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_FLAEN_MASK) >> ACRSRNPROT_FLAEN_SHIFT)
#define ACRSRNPROT_SET_FLAEN(ACRSRNPROT, FLAEN) { \
	FDL_ASSERT(!((FLAEN) & ~((1 << ACRSRNPROT_FLAEN_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_FLAEN_MASK) | (((unsigned long)(FLAEN)) << ACRSRNPROT_FLAEN_SHIFT);\
}
#define ACRSRNPROT_AHPEN_SIZE	1
#define ACRSRNPROT_AHPEN_SHIFT	3
#define ACRSRNPROT_AHPEN_MASK	0x00000008
#define ACRSRNPROT_GET_AHPEN(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_AHPEN_MASK) >> ACRSRNPROT_AHPEN_SHIFT)
#define ACRSRNPROT_SET_AHPEN(ACRSRNPROT, AHPEN) { \
	FDL_ASSERT(!((AHPEN) & ~((1 << ACRSRNPROT_AHPEN_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_AHPEN_MASK) | (((unsigned long)(AHPEN)) << ACRSRNPROT_AHPEN_SHIFT);\
}
#define ACRSRNPROT_OH1EN_SIZE	1
#define ACRSRNPROT_OH1EN_SHIFT	4
#define ACRSRNPROT_OH1EN_MASK	0x00000010
#define ACRSRNPROT_GET_OH1EN(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_OH1EN_MASK) >> ACRSRNPROT_OH1EN_SHIFT)
#define ACRSRNPROT_SET_OH1EN(ACRSRNPROT, OH1EN) { \
	FDL_ASSERT(!((OH1EN) & ~((1 << ACRSRNPROT_OH1EN_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_OH1EN_MASK) | (((unsigned long)(OH1EN)) << ACRSRNPROT_OH1EN_SHIFT);\
}
#define ACRSRNPROT_IOUEN_SIZE	1
#define ACRSRNPROT_IOUEN_SHIFT	5
#define ACRSRNPROT_IOUEN_MASK	0x00000020
#define ACRSRNPROT_GET_IOUEN(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_IOUEN_MASK) >> ACRSRNPROT_IOUEN_SHIFT)
#define ACRSRNPROT_SET_IOUEN(ACRSRNPROT, IOUEN) { \
	FDL_ASSERT(!((IOUEN) & ~((1 << ACRSRNPROT_IOUEN_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_IOUEN_MASK) | (((unsigned long)(IOUEN)) << ACRSRNPROT_IOUEN_SHIFT);\
}
#define ACRSRNPROT_IOPDBGEN_SIZE	1
#define ACRSRNPROT_IOPDBGEN_SHIFT	6
#define ACRSRNPROT_IOPDBGEN_MASK	0x00000040
#define ACRSRNPROT_GET_IOPDBGEN(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_IOPDBGEN_MASK) >> ACRSRNPROT_IOPDBGEN_SHIFT)
#define ACRSRNPROT_SET_IOPDBGEN(ACRSRNPROT, IOPDBGEN) { \
	FDL_ASSERT(!((IOPDBGEN) & ~((1 << ACRSRNPROT_IOPDBGEN_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_IOPDBGEN_MASK) | (((unsigned long)(IOPDBGEN)) << ACRSRNPROT_IOPDBGEN_SHIFT);\
}
#define ACRSRNPROT_PAD0_SIZE	25
#define ACRSRNPROT_PAD0_SHIFT	7
#define ACRSRNPROT_PAD0_MASK	0xffffff80
#define ACRSRNPROT_GET_PAD0(ACRSRNPROT) \
	((((unsigned long)(ACRSRNPROT)) & ACRSRNPROT_PAD0_MASK) >> ACRSRNPROT_PAD0_SHIFT)
#define ACRSRNPROT_SET_PAD0(ACRSRNPROT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRSRNPROT_PAD0_SIZE)-1))); \
	ACRSRNPROT = (((unsigned long)(ACRSRNPROT)) & ~ACRSRNPROT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSRNPROT_PAD0_SHIFT);\
}
#define ACRSRNPROT_TOTAL_SIZE	32
#define ACRSRNPROT(AESEN, SHAEN, FLAEN, AHPEN, OH1EN, IOUEN, IOPDBGEN) \
	((((unsigned long)(AESEN)) << ACRSRNPROT_AESEN_SHIFT) | \
	 (((unsigned long)(SHAEN)) << ACRSRNPROT_SHAEN_SHIFT) | \
	 (((unsigned long)(FLAEN)) << ACRSRNPROT_FLAEN_SHIFT) | \
	 (((unsigned long)(AHPEN)) << ACRSRNPROT_AHPEN_SHIFT) | \
	 (((unsigned long)(OH1EN)) << ACRSRNPROT_OH1EN_SHIFT) | \
	 (((unsigned long)(IOUEN)) << ACRSRNPROT_IOUEN_SHIFT) | \
	 (((unsigned long)(IOPDBGEN)) << ACRSRNPROT_IOPDBGEN_SHIFT))

/*
 *  ACRBUSPROT struct
 */
#define ACRBUSPROT_PAD0_SIZE	1
#define ACRBUSPROT_PAD0_SHIFT	0
#define ACRBUSPROT_PAD0_MASK	0x00000001
#define ACRBUSPROT_GET_PAD0(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PAD0_MASK) >> ACRBUSPROT_PAD0_SHIFT)
#define ACRBUSPROT_SET_PAD0(ACRBUSPROT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRBUSPROT_PAD0_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRBUSPROT_PAD0_SHIFT);\
}
#define ACRBUSPROT_PPCFLAEN_SIZE	1
#define ACRBUSPROT_PPCFLAEN_SHIFT	1
#define ACRBUSPROT_PPCFLAEN_MASK	0x00000002
#define ACRBUSPROT_GET_PPCFLAEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCFLAEN_MASK) >> ACRBUSPROT_PPCFLAEN_SHIFT)
#define ACRBUSPROT_SET_PPCFLAEN(ACRBUSPROT, PPCFLAEN) { \
	FDL_ASSERT(!((PPCFLAEN) & ~((1 << ACRBUSPROT_PPCFLAEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCFLAEN_MASK) | (((unsigned long)(PPCFLAEN)) << ACRBUSPROT_PPCFLAEN_SHIFT);\
}
#define ACRBUSPROT_PPCAESEN_SIZE	1
#define ACRBUSPROT_PPCAESEN_SHIFT	2
#define ACRBUSPROT_PPCAESEN_MASK	0x00000004
#define ACRBUSPROT_GET_PPCAESEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCAESEN_MASK) >> ACRBUSPROT_PPCAESEN_SHIFT)
#define ACRBUSPROT_SET_PPCAESEN(ACRBUSPROT, PPCAESEN) { \
	FDL_ASSERT(!((PPCAESEN) & ~((1 << ACRBUSPROT_PPCAESEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCAESEN_MASK) | (((unsigned long)(PPCAESEN)) << ACRBUSPROT_PPCAESEN_SHIFT);\
}
#define ACRBUSPROT_PPCSHAEN_SIZE	1
#define ACRBUSPROT_PPCSHAEN_SHIFT	3
#define ACRBUSPROT_PPCSHAEN_MASK	0x00000008
#define ACRBUSPROT_GET_PPCSHAEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCSHAEN_MASK) >> ACRBUSPROT_PPCSHAEN_SHIFT)
#define ACRBUSPROT_SET_PPCSHAEN(ACRBUSPROT, PPCSHAEN) { \
	FDL_ASSERT(!((PPCSHAEN) & ~((1 << ACRBUSPROT_PPCSHAEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCSHAEN_MASK) | (((unsigned long)(PPCSHAEN)) << ACRBUSPROT_PPCSHAEN_SHIFT);\
}
#define ACRBUSPROT_PPCEHCEN_SIZE	1
#define ACRBUSPROT_PPCEHCEN_SHIFT	4
#define ACRBUSPROT_PPCEHCEN_MASK	0x00000010
#define ACRBUSPROT_GET_PPCEHCEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCEHCEN_MASK) >> ACRBUSPROT_PPCEHCEN_SHIFT)
#define ACRBUSPROT_SET_PPCEHCEN(ACRBUSPROT, PPCEHCEN) { \
	FDL_ASSERT(!((PPCEHCEN) & ~((1 << ACRBUSPROT_PPCEHCEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCEHCEN_MASK) | (((unsigned long)(PPCEHCEN)) << ACRBUSPROT_PPCEHCEN_SHIFT);\
}
#define ACRBUSPROT_PPCOH0EN_SIZE	1
#define ACRBUSPROT_PPCOH0EN_SHIFT	5
#define ACRBUSPROT_PPCOH0EN_MASK	0x00000020
#define ACRBUSPROT_GET_PPCOH0EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCOH0EN_MASK) >> ACRBUSPROT_PPCOH0EN_SHIFT)
#define ACRBUSPROT_SET_PPCOH0EN(ACRBUSPROT, PPCOH0EN) { \
	FDL_ASSERT(!((PPCOH0EN) & ~((1 << ACRBUSPROT_PPCOH0EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCOH0EN_MASK) | (((unsigned long)(PPCOH0EN)) << ACRBUSPROT_PPCOH0EN_SHIFT);\
}
#define ACRBUSPROT_PPCOH1EN_SIZE	1
#define ACRBUSPROT_PPCOH1EN_SHIFT	6
#define ACRBUSPROT_PPCOH1EN_MASK	0x00000040
#define ACRBUSPROT_GET_PPCOH1EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCOH1EN_MASK) >> ACRBUSPROT_PPCOH1EN_SHIFT)
#define ACRBUSPROT_SET_PPCOH1EN(ACRBUSPROT, PPCOH1EN) { \
	FDL_ASSERT(!((PPCOH1EN) & ~((1 << ACRBUSPROT_PPCOH1EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCOH1EN_MASK) | (((unsigned long)(PPCOH1EN)) << ACRBUSPROT_PPCOH1EN_SHIFT);\
}
#define ACRBUSPROT_PPCSD0EN_SIZE	1
#define ACRBUSPROT_PPCSD0EN_SHIFT	7
#define ACRBUSPROT_PPCSD0EN_MASK	0x00000080
#define ACRBUSPROT_GET_PPCSD0EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCSD0EN_MASK) >> ACRBUSPROT_PPCSD0EN_SHIFT)
#define ACRBUSPROT_SET_PPCSD0EN(ACRBUSPROT, PPCSD0EN) { \
	FDL_ASSERT(!((PPCSD0EN) & ~((1 << ACRBUSPROT_PPCSD0EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCSD0EN_MASK) | (((unsigned long)(PPCSD0EN)) << ACRBUSPROT_PPCSD0EN_SHIFT);\
}
#define ACRBUSPROT_PPCSD1EN_SIZE	1
#define ACRBUSPROT_PPCSD1EN_SHIFT	8
#define ACRBUSPROT_PPCSD1EN_MASK	0x00000100
#define ACRBUSPROT_GET_PPCSD1EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCSD1EN_MASK) >> ACRBUSPROT_PPCSD1EN_SHIFT)
#define ACRBUSPROT_SET_PPCSD1EN(ACRBUSPROT, PPCSD1EN) { \
	FDL_ASSERT(!((PPCSD1EN) & ~((1 << ACRBUSPROT_PPCSD1EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCSD1EN_MASK) | (((unsigned long)(PPCSD1EN)) << ACRBUSPROT_PPCSD1EN_SHIFT);\
}
#define ACRBUSPROT_PAD1_SIZE	7
#define ACRBUSPROT_PAD1_SHIFT	9
#define ACRBUSPROT_PAD1_MASK	0x0000fe00
#define ACRBUSPROT_GET_PAD1(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PAD1_MASK) >> ACRBUSPROT_PAD1_SHIFT)
#define ACRBUSPROT_SET_PAD1(ACRBUSPROT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << ACRBUSPROT_PAD1_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PAD1_MASK) | (((unsigned long)(pad1)) << ACRBUSPROT_PAD1_SHIFT);\
}
#define ACRBUSPROT_PAD2_SIZE	1
#define ACRBUSPROT_PAD2_SHIFT	16
#define ACRBUSPROT_PAD2_MASK	0x00010000
#define ACRBUSPROT_GET_PAD2(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PAD2_MASK) >> ACRBUSPROT_PAD2_SHIFT)
#define ACRBUSPROT_SET_PAD2(ACRBUSPROT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << ACRBUSPROT_PAD2_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PAD2_MASK) | (((unsigned long)(pad2)) << ACRBUSPROT_PAD2_SHIFT);\
}
#define ACRBUSPROT_IOPFLAEN_SIZE	1
#define ACRBUSPROT_IOPFLAEN_SHIFT	17
#define ACRBUSPROT_IOPFLAEN_MASK	0x00020000
#define ACRBUSPROT_GET_IOPFLAEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPFLAEN_MASK) >> ACRBUSPROT_IOPFLAEN_SHIFT)
#define ACRBUSPROT_SET_IOPFLAEN(ACRBUSPROT, IOPFLAEN) { \
	FDL_ASSERT(!((IOPFLAEN) & ~((1 << ACRBUSPROT_IOPFLAEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPFLAEN_MASK) | (((unsigned long)(IOPFLAEN)) << ACRBUSPROT_IOPFLAEN_SHIFT);\
}
#define ACRBUSPROT_IOPAESEN_SIZE	1
#define ACRBUSPROT_IOPAESEN_SHIFT	18
#define ACRBUSPROT_IOPAESEN_MASK	0x00040000
#define ACRBUSPROT_GET_IOPAESEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPAESEN_MASK) >> ACRBUSPROT_IOPAESEN_SHIFT)
#define ACRBUSPROT_SET_IOPAESEN(ACRBUSPROT, IOPAESEN) { \
	FDL_ASSERT(!((IOPAESEN) & ~((1 << ACRBUSPROT_IOPAESEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPAESEN_MASK) | (((unsigned long)(IOPAESEN)) << ACRBUSPROT_IOPAESEN_SHIFT);\
}
#define ACRBUSPROT_IOPSHAEN_SIZE	1
#define ACRBUSPROT_IOPSHAEN_SHIFT	19
#define ACRBUSPROT_IOPSHAEN_MASK	0x00080000
#define ACRBUSPROT_GET_IOPSHAEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPSHAEN_MASK) >> ACRBUSPROT_IOPSHAEN_SHIFT)
#define ACRBUSPROT_SET_IOPSHAEN(ACRBUSPROT, IOPSHAEN) { \
	FDL_ASSERT(!((IOPSHAEN) & ~((1 << ACRBUSPROT_IOPSHAEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPSHAEN_MASK) | (((unsigned long)(IOPSHAEN)) << ACRBUSPROT_IOPSHAEN_SHIFT);\
}
#define ACRBUSPROT_IOPEHCEN_SIZE	1
#define ACRBUSPROT_IOPEHCEN_SHIFT	20
#define ACRBUSPROT_IOPEHCEN_MASK	0x00100000
#define ACRBUSPROT_GET_IOPEHCEN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPEHCEN_MASK) >> ACRBUSPROT_IOPEHCEN_SHIFT)
#define ACRBUSPROT_SET_IOPEHCEN(ACRBUSPROT, IOPEHCEN) { \
	FDL_ASSERT(!((IOPEHCEN) & ~((1 << ACRBUSPROT_IOPEHCEN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPEHCEN_MASK) | (((unsigned long)(IOPEHCEN)) << ACRBUSPROT_IOPEHCEN_SHIFT);\
}
#define ACRBUSPROT_IOPOH0EN_SIZE	1
#define ACRBUSPROT_IOPOH0EN_SHIFT	21
#define ACRBUSPROT_IOPOH0EN_MASK	0x00200000
#define ACRBUSPROT_GET_IOPOH0EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPOH0EN_MASK) >> ACRBUSPROT_IOPOH0EN_SHIFT)
#define ACRBUSPROT_SET_IOPOH0EN(ACRBUSPROT, IOPOH0EN) { \
	FDL_ASSERT(!((IOPOH0EN) & ~((1 << ACRBUSPROT_IOPOH0EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPOH0EN_MASK) | (((unsigned long)(IOPOH0EN)) << ACRBUSPROT_IOPOH0EN_SHIFT);\
}
#define ACRBUSPROT_IOPOH1EN_SIZE	1
#define ACRBUSPROT_IOPOH1EN_SHIFT	22
#define ACRBUSPROT_IOPOH1EN_MASK	0x00400000
#define ACRBUSPROT_GET_IOPOH1EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPOH1EN_MASK) >> ACRBUSPROT_IOPOH1EN_SHIFT)
#define ACRBUSPROT_SET_IOPOH1EN(ACRBUSPROT, IOPOH1EN) { \
	FDL_ASSERT(!((IOPOH1EN) & ~((1 << ACRBUSPROT_IOPOH1EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPOH1EN_MASK) | (((unsigned long)(IOPOH1EN)) << ACRBUSPROT_IOPOH1EN_SHIFT);\
}
#define ACRBUSPROT_IOPSD0EN_SIZE	1
#define ACRBUSPROT_IOPSD0EN_SHIFT	23
#define ACRBUSPROT_IOPSD0EN_MASK	0x00800000
#define ACRBUSPROT_GET_IOPSD0EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPSD0EN_MASK) >> ACRBUSPROT_IOPSD0EN_SHIFT)
#define ACRBUSPROT_SET_IOPSD0EN(ACRBUSPROT, IOPSD0EN) { \
	FDL_ASSERT(!((IOPSD0EN) & ~((1 << ACRBUSPROT_IOPSD0EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPSD0EN_MASK) | (((unsigned long)(IOPSD0EN)) << ACRBUSPROT_IOPSD0EN_SHIFT);\
}
#define ACRBUSPROT_IOPSD1EN_SIZE	1
#define ACRBUSPROT_IOPSD1EN_SHIFT	24
#define ACRBUSPROT_IOPSD1EN_MASK	0x01000000
#define ACRBUSPROT_GET_IOPSD1EN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_IOPSD1EN_MASK) >> ACRBUSPROT_IOPSD1EN_SHIFT)
#define ACRBUSPROT_SET_IOPSD1EN(ACRBUSPROT, IOPSD1EN) { \
	FDL_ASSERT(!((IOPSD1EN) & ~((1 << ACRBUSPROT_IOPSD1EN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_IOPSD1EN_MASK) | (((unsigned long)(IOPSD1EN)) << ACRBUSPROT_IOPSD1EN_SHIFT);\
}
#define ACRBUSPROT_PAD3_SIZE	6
#define ACRBUSPROT_PAD3_SHIFT	25
#define ACRBUSPROT_PAD3_MASK	0x7e000000
#define ACRBUSPROT_GET_PAD3(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PAD3_MASK) >> ACRBUSPROT_PAD3_SHIFT)
#define ACRBUSPROT_SET_PAD3(ACRBUSPROT, pad3) { \
	FDL_ASSERT(!((pad3) & ~((1 << ACRBUSPROT_PAD3_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PAD3_MASK) | (((unsigned long)(pad3)) << ACRBUSPROT_PAD3_SHIFT);\
}
#define ACRBUSPROT_PPCKERN_SIZE	1
#define ACRBUSPROT_PPCKERN_SHIFT	31
#define ACRBUSPROT_PPCKERN_MASK	0x80000000
#define ACRBUSPROT_GET_PPCKERN(ACRBUSPROT) \
	((((unsigned long)(ACRBUSPROT)) & ACRBUSPROT_PPCKERN_MASK) >> ACRBUSPROT_PPCKERN_SHIFT)
#define ACRBUSPROT_SET_PPCKERN(ACRBUSPROT, PPCKERN) { \
	FDL_ASSERT(!((PPCKERN) & ~((1 << ACRBUSPROT_PPCKERN_SIZE)-1))); \
	ACRBUSPROT = (((unsigned long)(ACRBUSPROT)) & ~ACRBUSPROT_PPCKERN_MASK) | (((unsigned long)(PPCKERN)) << ACRBUSPROT_PPCKERN_SHIFT);\
}
#define ACRBUSPROT_TOTAL_SIZE	32
#define ACRBUSPROT(PPCFLAEN, PPCAESEN, PPCSHAEN, PPCEHCEN, PPCOH0EN, PPCOH1EN, PPCSD0EN, PPCSD1EN, IOPFLAEN, IOPAESEN, IOPSHAEN, IOPEHCEN, IOPOH0EN, IOPOH1EN, IOPSD0EN, IOPSD1EN, PPCKERN) \
	((((unsigned long)(PPCFLAEN)) << ACRBUSPROT_PPCFLAEN_SHIFT) | \
	 (((unsigned long)(PPCAESEN)) << ACRBUSPROT_PPCAESEN_SHIFT) | \
	 (((unsigned long)(PPCSHAEN)) << ACRBUSPROT_PPCSHAEN_SHIFT) | \
	 (((unsigned long)(PPCEHCEN)) << ACRBUSPROT_PPCEHCEN_SHIFT) | \
	 (((unsigned long)(PPCOH0EN)) << ACRBUSPROT_PPCOH0EN_SHIFT) | \
	 (((unsigned long)(PPCOH1EN)) << ACRBUSPROT_PPCOH1EN_SHIFT) | \
	 (((unsigned long)(PPCSD0EN)) << ACRBUSPROT_PPCSD0EN_SHIFT) | \
	 (((unsigned long)(PPCSD1EN)) << ACRBUSPROT_PPCSD1EN_SHIFT) | \
	 (((unsigned long)(IOPFLAEN)) << ACRBUSPROT_IOPFLAEN_SHIFT) | \
	 (((unsigned long)(IOPAESEN)) << ACRBUSPROT_IOPAESEN_SHIFT) | \
	 (((unsigned long)(IOPSHAEN)) << ACRBUSPROT_IOPSHAEN_SHIFT) | \
	 (((unsigned long)(IOPEHCEN)) << ACRBUSPROT_IOPEHCEN_SHIFT) | \
	 (((unsigned long)(IOPOH0EN)) << ACRBUSPROT_IOPOH0EN_SHIFT) | \
	 (((unsigned long)(IOPOH1EN)) << ACRBUSPROT_IOPOH1EN_SHIFT) | \
	 (((unsigned long)(IOPSD0EN)) << ACRBUSPROT_IOPSD0EN_SHIFT) | \
	 (((unsigned long)(IOPSD1EN)) << ACRBUSPROT_IOPSD1EN_SHIFT) | \
	 (((unsigned long)(PPCKERN)) << ACRBUSPROT_PPCKERN_SHIFT))

/*
 *  EHC_capreg_index value
 */
#define EHCCAPLENVER_OFFSET	0x000

/*
 *  EHC_opreg_index value
 */
#define EHCOPRUSBINTR_OFFSET	0x008
#define EHCOPRCONFIGFLAG_OFFSET	0x040
#define PORT_CTRL_OFFSET	0x044
#define EHC_MISC_CTRL0_OFFSET	0x080
#define EHC_PKTBUF_THRESHOLD_OFFSET	0x084
#define USB_PHY_STS0_OFFSET	0x088
#define USB_PHY_STS1_OFFSET	0x08c
#define USB_PHY_STS2_OFFSET	0x090
#define UTMI_CTRL_OFFSET	0x094
#define BIST_CTRL_OFFSET	0x098
#define EHC_MISC_CTRL1_OFFSET	0x09c
#define USB_PHYCMN_CAL_OFFSET	0x0a0
#define PHYADJ_CTRL_OFFSET	0x0a4
#define EHC_PKTBUF_DEPTH_OFFSET	0x0b4
#define EHC_BREAK_MEM_XFR_OFFSET	0x0b8
#define USB_CHICKENBITS_OFFSET	0x0bc

/*
 *  EHCCAPLENVER struct
 */
#define EHCCAPLENVER_CAPLENGTH_SIZE	8
#define EHCCAPLENVER_CAPLENGTH_SHIFT	0
#define EHCCAPLENVER_CAPLENGTH_MASK	0x000000ff
#define EHCCAPLENVER_GET_CAPLENGTH(EHCCAPLENVER) \
	((((unsigned long)(EHCCAPLENVER)) & EHCCAPLENVER_CAPLENGTH_MASK) >> EHCCAPLENVER_CAPLENGTH_SHIFT)
#define EHCCAPLENVER_SET_CAPLENGTH(EHCCAPLENVER, CAPLENGTH) { \
	FDL_ASSERT(!((CAPLENGTH) & ~((1 << EHCCAPLENVER_CAPLENGTH_SIZE)-1))); \
	EHCCAPLENVER = (((unsigned long)(EHCCAPLENVER)) & ~EHCCAPLENVER_CAPLENGTH_MASK) | (((unsigned long)(CAPLENGTH)) << EHCCAPLENVER_CAPLENGTH_SHIFT);\
}
#define EHCCAPLENVER_PAD0_SIZE	8
#define EHCCAPLENVER_PAD0_SHIFT	8
#define EHCCAPLENVER_PAD0_MASK	0x0000ff00
#define EHCCAPLENVER_GET_PAD0(EHCCAPLENVER) \
	((((unsigned long)(EHCCAPLENVER)) & EHCCAPLENVER_PAD0_MASK) >> EHCCAPLENVER_PAD0_SHIFT)
#define EHCCAPLENVER_SET_PAD0(EHCCAPLENVER, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << EHCCAPLENVER_PAD0_SIZE)-1))); \
	EHCCAPLENVER = (((unsigned long)(EHCCAPLENVER)) & ~EHCCAPLENVER_PAD0_MASK) | (((unsigned long)(pad0)) << EHCCAPLENVER_PAD0_SHIFT);\
}
#define EHCCAPLENVER_HCIVERSION_SIZE	16
#define EHCCAPLENVER_HCIVERSION_SHIFT	16
#define EHCCAPLENVER_HCIVERSION_MASK	0xffff0000
#define EHCCAPLENVER_GET_HCIVERSION(EHCCAPLENVER) \
	((((unsigned long)(EHCCAPLENVER)) & EHCCAPLENVER_HCIVERSION_MASK) >> EHCCAPLENVER_HCIVERSION_SHIFT)
#define EHCCAPLENVER_SET_HCIVERSION(EHCCAPLENVER, HCIVERSION) { \
	FDL_ASSERT(!((HCIVERSION) & ~((1 << EHCCAPLENVER_HCIVERSION_SIZE)-1))); \
	EHCCAPLENVER = (((unsigned long)(EHCCAPLENVER)) & ~EHCCAPLENVER_HCIVERSION_MASK) | (((unsigned long)(HCIVERSION)) << EHCCAPLENVER_HCIVERSION_SHIFT);\
}
#define EHCCAPLENVER_TOTAL_SIZE	32
#define EHCCAPLENVER(CAPLENGTH, HCIVERSION) \
	((((unsigned long)(CAPLENGTH)) << EHCCAPLENVER_CAPLENGTH_SHIFT) | \
	 (((unsigned long)(HCIVERSION)) << EHCCAPLENVER_HCIVERSION_SHIFT))

/*
 *  EHCOPRUSBINTR struct
 */
#define EHCOPRUSBINTR_USBINTEN_SIZE	1
#define EHCOPRUSBINTR_USBINTEN_SHIFT	0
#define EHCOPRUSBINTR_USBINTEN_MASK	0x00000001
#define EHCOPRUSBINTR_GET_USBINTEN(EHCOPRUSBINTR) \
	((((unsigned long)(EHCOPRUSBINTR)) & EHCOPRUSBINTR_USBINTEN_MASK) >> EHCOPRUSBINTR_USBINTEN_SHIFT)
#define EHCOPRUSBINTR_SET_USBINTEN(EHCOPRUSBINTR, USBINTEN) { \
	FDL_ASSERT(!((USBINTEN) & ~((1 << EHCOPRUSBINTR_USBINTEN_SIZE)-1))); \
	EHCOPRUSBINTR = (((unsigned long)(EHCOPRUSBINTR)) & ~EHCOPRUSBINTR_USBINTEN_MASK) | (((unsigned long)(USBINTEN)) << EHCOPRUSBINTR_USBINTEN_SHIFT);\
}
#define EHCOPRUSBINTR_USBERRINTEN_SIZE	1
#define EHCOPRUSBINTR_USBERRINTEN_SHIFT	1
#define EHCOPRUSBINTR_USBERRINTEN_MASK	0x00000002
#define EHCOPRUSBINTR_GET_USBERRINTEN(EHCOPRUSBINTR) \
	((((unsigned long)(EHCOPRUSBINTR)) & EHCOPRUSBINTR_USBERRINTEN_MASK) >> EHCOPRUSBINTR_USBERRINTEN_SHIFT)
#define EHCOPRUSBINTR_SET_USBERRINTEN(EHCOPRUSBINTR, USBERRINTEN) { \
	FDL_ASSERT(!((USBERRINTEN) & ~((1 << EHCOPRUSBINTR_USBERRINTEN_SIZE)-1))); \
	EHCOPRUSBINTR = (((unsigned long)(EHCOPRUSBINTR)) & ~EHCOPRUSBINTR_USBERRINTEN_MASK) | (((unsigned long)(USBERRINTEN)) << EHCOPRUSBINTR_USBERRINTEN_SHIFT);\
}
#define EHCOPRUSBINTR_PRTCHGDETINTEN_SIZE	1
#define EHCOPRUSBINTR_PRTCHGDETINTEN_SHIFT	2
#define EHCOPRUSBINTR_PRTCHGDETINTEN_MASK	0x00000004
#define EHCOPRUSBINTR_GET_PRTCHGDETINTEN(EHCOPRUSBINTR) \
	((((unsigned long)(EHCOPRUSBINTR)) & EHCOPRUSBINTR_PRTCHGDETINTEN_MASK) >> EHCOPRUSBINTR_PRTCHGDETINTEN_SHIFT)
#define EHCOPRUSBINTR_SET_PRTCHGDETINTEN(EHCOPRUSBINTR, PRTCHGDETINTEN) { \
	FDL_ASSERT(!((PRTCHGDETINTEN) & ~((1 << EHCOPRUSBINTR_PRTCHGDETINTEN_SIZE)-1))); \
	EHCOPRUSBINTR = (((unsigned long)(EHCOPRUSBINTR)) & ~EHCOPRUSBINTR_PRTCHGDETINTEN_MASK) | (((unsigned long)(PRTCHGDETINTEN)) << EHCOPRUSBINTR_PRTCHGDETINTEN_SHIFT);\
}
#define EHCOPRUSBINTR_FRMLSTROLINTEN_SIZE	1
#define EHCOPRUSBINTR_FRMLSTROLINTEN_SHIFT	3
#define EHCOPRUSBINTR_FRMLSTROLINTEN_MASK	0x00000008
#define EHCOPRUSBINTR_GET_FRMLSTROLINTEN(EHCOPRUSBINTR) \
	((((unsigned long)(EHCOPRUSBINTR)) & EHCOPRUSBINTR_FRMLSTROLINTEN_MASK) >> EHCOPRUSBINTR_FRMLSTROLINTEN_SHIFT)
#define EHCOPRUSBINTR_SET_FRMLSTROLINTEN(EHCOPRUSBINTR, FRMLSTROLINTEN) { \
	FDL_ASSERT(!((FRMLSTROLINTEN) & ~((1 << EHCOPRUSBINTR_FRMLSTROLINTEN_SIZE)-1))); \
	EHCOPRUSBINTR = (((unsigned long)(EHCOPRUSBINTR)) & ~EHCOPRUSBINTR_FRMLSTROLINTEN_MASK) | (((unsigned long)(FRMLSTROLINTEN)) << EHCOPRUSBINTR_FRMLSTROLINTEN_SHIFT);\
}
#define EHCOPRUSBINTR_HSTSYSERRINTEN_SIZE	1
#define EHCOPRUSBINTR_HSTSYSERRINTEN_SHIFT	4
#define EHCOPRUSBINTR_HSTSYSERRINTEN_MASK	0x00000010
#define EHCOPRUSBINTR_GET_HSTSYSERRINTEN(EHCOPRUSBINTR) \
	((((unsigned long)(EHCOPRUSBINTR)) & EHCOPRUSBINTR_HSTSYSERRINTEN_MASK) >> EHCOPRUSBINTR_HSTSYSERRINTEN_SHIFT)
#define EHCOPRUSBINTR_SET_HSTSYSERRINTEN(EHCOPRUSBINTR, HSTSYSERRINTEN) { \
	FDL_ASSERT(!((HSTSYSERRINTEN) & ~((1 << EHCOPRUSBINTR_HSTSYSERRINTEN_SIZE)-1))); \
	EHCOPRUSBINTR = (((unsigned long)(EHCOPRUSBINTR)) & ~EHCOPRUSBINTR_HSTSYSERRINTEN_MASK) | (((unsigned long)(HSTSYSERRINTEN)) << EHCOPRUSBINTR_HSTSYSERRINTEN_SHIFT);\
}
#define EHCOPRUSBINTR_ASYNCADVINTEN_SIZE	1
#define EHCOPRUSBINTR_ASYNCADVINTEN_SHIFT	5
#define EHCOPRUSBINTR_ASYNCADVINTEN_MASK	0x00000020
#define EHCOPRUSBINTR_GET_ASYNCADVINTEN(EHCOPRUSBINTR) \
	((((unsigned long)(EHCOPRUSBINTR)) & EHCOPRUSBINTR_ASYNCADVINTEN_MASK) >> EHCOPRUSBINTR_ASYNCADVINTEN_SHIFT)
#define EHCOPRUSBINTR_SET_ASYNCADVINTEN(EHCOPRUSBINTR, ASYNCADVINTEN) { \
	FDL_ASSERT(!((ASYNCADVINTEN) & ~((1 << EHCOPRUSBINTR_ASYNCADVINTEN_SIZE)-1))); \
	EHCOPRUSBINTR = (((unsigned long)(EHCOPRUSBINTR)) & ~EHCOPRUSBINTR_ASYNCADVINTEN_MASK) | (((unsigned long)(ASYNCADVINTEN)) << EHCOPRUSBINTR_ASYNCADVINTEN_SHIFT);\
}
#define EHCOPRUSBINTR_PAD0_SIZE	26
#define EHCOPRUSBINTR_PAD0_SHIFT	6
#define EHCOPRUSBINTR_PAD0_MASK	0xffffffc0
#define EHCOPRUSBINTR_GET_PAD0(EHCOPRUSBINTR) \
	((((unsigned long)(EHCOPRUSBINTR)) & EHCOPRUSBINTR_PAD0_MASK) >> EHCOPRUSBINTR_PAD0_SHIFT)
#define EHCOPRUSBINTR_SET_PAD0(EHCOPRUSBINTR, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << EHCOPRUSBINTR_PAD0_SIZE)-1))); \
	EHCOPRUSBINTR = (((unsigned long)(EHCOPRUSBINTR)) & ~EHCOPRUSBINTR_PAD0_MASK) | (((unsigned long)(pad0)) << EHCOPRUSBINTR_PAD0_SHIFT);\
}
#define EHCOPRUSBINTR_TOTAL_SIZE	32
#define EHCOPRUSBINTR(USBINTEN, USBERRINTEN, PRTCHGDETINTEN, FRMLSTROLINTEN, HSTSYSERRINTEN, ASYNCADVINTEN) \
	((((unsigned long)(USBINTEN)) << EHCOPRUSBINTR_USBINTEN_SHIFT) | \
	 (((unsigned long)(USBERRINTEN)) << EHCOPRUSBINTR_USBERRINTEN_SHIFT) | \
	 (((unsigned long)(PRTCHGDETINTEN)) << EHCOPRUSBINTR_PRTCHGDETINTEN_SHIFT) | \
	 (((unsigned long)(FRMLSTROLINTEN)) << EHCOPRUSBINTR_FRMLSTROLINTEN_SHIFT) | \
	 (((unsigned long)(HSTSYSERRINTEN)) << EHCOPRUSBINTR_HSTSYSERRINTEN_SHIFT) | \
	 (((unsigned long)(ASYNCADVINTEN)) << EHCOPRUSBINTR_ASYNCADVINTEN_SHIFT))

/*
 *  EHCOPRCONFIGFLAG struct
 */
#define EHCOPRCONFIGFLAG_CF_SIZE	1
#define EHCOPRCONFIGFLAG_CF_SHIFT	0
#define EHCOPRCONFIGFLAG_CF_MASK	0x00000001
#define EHCOPRCONFIGFLAG_GET_CF(EHCOPRCONFIGFLAG) \
	((((unsigned long)(EHCOPRCONFIGFLAG)) & EHCOPRCONFIGFLAG_CF_MASK) >> EHCOPRCONFIGFLAG_CF_SHIFT)
#define EHCOPRCONFIGFLAG_SET_CF(EHCOPRCONFIGFLAG, CF) { \
	FDL_ASSERT(!((CF) & ~((1 << EHCOPRCONFIGFLAG_CF_SIZE)-1))); \
	EHCOPRCONFIGFLAG = (((unsigned long)(EHCOPRCONFIGFLAG)) & ~EHCOPRCONFIGFLAG_CF_MASK) | (((unsigned long)(CF)) << EHCOPRCONFIGFLAG_CF_SHIFT);\
}
#define EHCOPRCONFIGFLAG_PAD0_SIZE	31
#define EHCOPRCONFIGFLAG_PAD0_SHIFT	1
#define EHCOPRCONFIGFLAG_PAD0_MASK	0xfffffffe
#define EHCOPRCONFIGFLAG_GET_PAD0(EHCOPRCONFIGFLAG) \
	((((unsigned long)(EHCOPRCONFIGFLAG)) & EHCOPRCONFIGFLAG_PAD0_MASK) >> EHCOPRCONFIGFLAG_PAD0_SHIFT)
#define EHCOPRCONFIGFLAG_SET_PAD0(EHCOPRCONFIGFLAG, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << EHCOPRCONFIGFLAG_PAD0_SIZE)-1))); \
	EHCOPRCONFIGFLAG = (((unsigned long)(EHCOPRCONFIGFLAG)) & ~EHCOPRCONFIGFLAG_PAD0_MASK) | (((unsigned long)(pad0)) << EHCOPRCONFIGFLAG_PAD0_SHIFT);\
}
#define EHCOPRCONFIGFLAG_TOTAL_SIZE	32
#define EHCOPRCONFIGFLAG(CF) \
	((((unsigned long)(CF)) << EHCOPRCONFIGFLAG_CF_SHIFT))

/*
 *  USB_CHICKENBITS struct
 */
#define USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_SIZE	1
#define USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_SHIFT	0
#define USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_MASK	0x00000001
#define USB_CHICKENBITS_GET_ENABLE_OHCI_OUT_TH48(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_MASK) >> USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_SHIFT)
#define USB_CHICKENBITS_SET_ENABLE_OHCI_OUT_TH48(USB_CHICKENBITS, ENABLE_OHCI_OUT_TH48) { \
	FDL_ASSERT(!((ENABLE_OHCI_OUT_TH48) & ~((1 << USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_MASK) | (((unsigned long)(ENABLE_OHCI_OUT_TH48)) << USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_SHIFT);\
}
#define USB_CHICKENBITS_ECO251_ENABLE_SIZE	1
#define USB_CHICKENBITS_ECO251_ENABLE_SHIFT	1
#define USB_CHICKENBITS_ECO251_ENABLE_MASK	0x00000002
#define USB_CHICKENBITS_GET_ECO251_ENABLE(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_ECO251_ENABLE_MASK) >> USB_CHICKENBITS_ECO251_ENABLE_SHIFT)
#define USB_CHICKENBITS_SET_ECO251_ENABLE(USB_CHICKENBITS, ECO251_ENABLE) { \
	FDL_ASSERT(!((ECO251_ENABLE) & ~((1 << USB_CHICKENBITS_ECO251_ENABLE_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_ECO251_ENABLE_MASK) | (((unsigned long)(ECO251_ENABLE)) << USB_CHICKENBITS_ECO251_ENABLE_SHIFT);\
}
#define USB_CHICKENBITS_NO_EHC_RETRYLIMIT_SIZE	1
#define USB_CHICKENBITS_NO_EHC_RETRYLIMIT_SHIFT	2
#define USB_CHICKENBITS_NO_EHC_RETRYLIMIT_MASK	0x00000004
#define USB_CHICKENBITS_GET_NO_EHC_RETRYLIMIT(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_NO_EHC_RETRYLIMIT_MASK) >> USB_CHICKENBITS_NO_EHC_RETRYLIMIT_SHIFT)
#define USB_CHICKENBITS_SET_NO_EHC_RETRYLIMIT(USB_CHICKENBITS, NO_EHC_RETRYLIMIT) { \
	FDL_ASSERT(!((NO_EHC_RETRYLIMIT) & ~((1 << USB_CHICKENBITS_NO_EHC_RETRYLIMIT_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_NO_EHC_RETRYLIMIT_MASK) | (((unsigned long)(NO_EHC_RETRYLIMIT)) << USB_CHICKENBITS_NO_EHC_RETRYLIMIT_SHIFT);\
}
#define USB_CHICKENBITS_EHC_INC_RETRYLIMIT_SIZE	1
#define USB_CHICKENBITS_EHC_INC_RETRYLIMIT_SHIFT	3
#define USB_CHICKENBITS_EHC_INC_RETRYLIMIT_MASK	0x00000008
#define USB_CHICKENBITS_GET_EHC_INC_RETRYLIMIT(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_EHC_INC_RETRYLIMIT_MASK) >> USB_CHICKENBITS_EHC_INC_RETRYLIMIT_SHIFT)
#define USB_CHICKENBITS_SET_EHC_INC_RETRYLIMIT(USB_CHICKENBITS, EHC_INC_RETRYLIMIT) { \
	FDL_ASSERT(!((EHC_INC_RETRYLIMIT) & ~((1 << USB_CHICKENBITS_EHC_INC_RETRYLIMIT_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_EHC_INC_RETRYLIMIT_MASK) | (((unsigned long)(EHC_INC_RETRYLIMIT)) << USB_CHICKENBITS_EHC_INC_RETRYLIMIT_SHIFT);\
}
#define USB_CHICKENBITS_EHC_BREAK_BC128_EN_SIZE	1
#define USB_CHICKENBITS_EHC_BREAK_BC128_EN_SHIFT	4
#define USB_CHICKENBITS_EHC_BREAK_BC128_EN_MASK	0x00000010
#define USB_CHICKENBITS_GET_EHC_BREAK_BC128_EN(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_EHC_BREAK_BC128_EN_MASK) >> USB_CHICKENBITS_EHC_BREAK_BC128_EN_SHIFT)
#define USB_CHICKENBITS_SET_EHC_BREAK_BC128_EN(USB_CHICKENBITS, EHC_BREAK_BC128_EN) { \
	FDL_ASSERT(!((EHC_BREAK_BC128_EN) & ~((1 << USB_CHICKENBITS_EHC_BREAK_BC128_EN_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_EHC_BREAK_BC128_EN_MASK) | (((unsigned long)(EHC_BREAK_BC128_EN)) << USB_CHICKENBITS_EHC_BREAK_BC128_EN_SHIFT);\
}
#define USB_CHICKENBITS_EHC_BREAK_BC128_SEL_SIZE	1
#define USB_CHICKENBITS_EHC_BREAK_BC128_SEL_SHIFT	5
#define USB_CHICKENBITS_EHC_BREAK_BC128_SEL_MASK	0x00000020
#define USB_CHICKENBITS_GET_EHC_BREAK_BC128_SEL(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_EHC_BREAK_BC128_SEL_MASK) >> USB_CHICKENBITS_EHC_BREAK_BC128_SEL_SHIFT)
#define USB_CHICKENBITS_SET_EHC_BREAK_BC128_SEL(USB_CHICKENBITS, EHC_BREAK_BC128_SEL) { \
	FDL_ASSERT(!((EHC_BREAK_BC128_SEL) & ~((1 << USB_CHICKENBITS_EHC_BREAK_BC128_SEL_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_EHC_BREAK_BC128_SEL_MASK) | (((unsigned long)(EHC_BREAK_BC128_SEL)) << USB_CHICKENBITS_EHC_BREAK_BC128_SEL_SHIFT);\
}
#define USB_CHICKENBITS_PCI_FRC_NO_BABBLE_SIZE	1
#define USB_CHICKENBITS_PCI_FRC_NO_BABBLE_SHIFT	6
#define USB_CHICKENBITS_PCI_FRC_NO_BABBLE_MASK	0x00000040
#define USB_CHICKENBITS_GET_PCI_FRC_NO_BABBLE(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_PCI_FRC_NO_BABBLE_MASK) >> USB_CHICKENBITS_PCI_FRC_NO_BABBLE_SHIFT)
#define USB_CHICKENBITS_SET_PCI_FRC_NO_BABBLE(USB_CHICKENBITS, PCI_FRC_NO_BABBLE) { \
	FDL_ASSERT(!((PCI_FRC_NO_BABBLE) & ~((1 << USB_CHICKENBITS_PCI_FRC_NO_BABBLE_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_PCI_FRC_NO_BABBLE_MASK) | (((unsigned long)(PCI_FRC_NO_BABBLE)) << USB_CHICKENBITS_PCI_FRC_NO_BABBLE_SHIFT);\
}
#define USB_CHICKENBITS_ENABLE_OHC_PREFETCH_SIZE	1
#define USB_CHICKENBITS_ENABLE_OHC_PREFETCH_SHIFT	7
#define USB_CHICKENBITS_ENABLE_OHC_PREFETCH_MASK	0x00000080
#define USB_CHICKENBITS_GET_ENABLE_OHC_PREFETCH(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_ENABLE_OHC_PREFETCH_MASK) >> USB_CHICKENBITS_ENABLE_OHC_PREFETCH_SHIFT)
#define USB_CHICKENBITS_SET_ENABLE_OHC_PREFETCH(USB_CHICKENBITS, ENABLE_OHC_PREFETCH) { \
	FDL_ASSERT(!((ENABLE_OHC_PREFETCH) & ~((1 << USB_CHICKENBITS_ENABLE_OHC_PREFETCH_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_ENABLE_OHC_PREFETCH_MASK) | (((unsigned long)(ENABLE_OHC_PREFETCH)) << USB_CHICKENBITS_ENABLE_OHC_PREFETCH_SHIFT);\
}
#define USB_CHICKENBITS_SELECT_OHC_PREFETCH_SIZE	1
#define USB_CHICKENBITS_SELECT_OHC_PREFETCH_SHIFT	8
#define USB_CHICKENBITS_SELECT_OHC_PREFETCH_MASK	0x00000100
#define USB_CHICKENBITS_GET_SELECT_OHC_PREFETCH(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_SELECT_OHC_PREFETCH_MASK) >> USB_CHICKENBITS_SELECT_OHC_PREFETCH_SHIFT)
#define USB_CHICKENBITS_SET_SELECT_OHC_PREFETCH(USB_CHICKENBITS, SELECT_OHC_PREFETCH) { \
	FDL_ASSERT(!((SELECT_OHC_PREFETCH) & ~((1 << USB_CHICKENBITS_SELECT_OHC_PREFETCH_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_SELECT_OHC_PREFETCH_MASK) | (((unsigned long)(SELECT_OHC_PREFETCH)) << USB_CHICKENBITS_SELECT_OHC_PREFETCH_SHIFT);\
}
#define USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_SIZE	1
#define USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_SHIFT	9
#define USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_MASK	0x00000200
#define USB_CHICKENBITS_GET_ENABLE_OHC_TD_PREFETCH(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_MASK) >> USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_SHIFT)
#define USB_CHICKENBITS_SET_ENABLE_OHC_TD_PREFETCH(USB_CHICKENBITS, ENABLE_OHC_TD_PREFETCH) { \
	FDL_ASSERT(!((ENABLE_OHC_TD_PREFETCH) & ~((1 << USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_MASK) | (((unsigned long)(ENABLE_OHC_TD_PREFETCH)) << USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_SHIFT);\
}
#define USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_SIZE	1
#define USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_SHIFT	10
#define USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_MASK	0x00000400
#define USB_CHICKENBITS_GET_SET_RECLAMATION_FIX_EN(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_MASK) >> USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_SHIFT)
#define USB_CHICKENBITS_SET_SET_RECLAMATION_FIX_EN(USB_CHICKENBITS, SET_RECLAMATION_FIX_EN) { \
	FDL_ASSERT(!((SET_RECLAMATION_FIX_EN) & ~((1 << USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_MASK) | (((unsigned long)(SET_RECLAMATION_FIX_EN)) << USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_SHIFT);\
}
#define USB_CHICKENBITS_EN_OHC0_IRQ_SIZE	1
#define USB_CHICKENBITS_EN_OHC0_IRQ_SHIFT	11
#define USB_CHICKENBITS_EN_OHC0_IRQ_MASK	0x00000800
#define USB_CHICKENBITS_GET_EN_OHC0_IRQ(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_EN_OHC0_IRQ_MASK) >> USB_CHICKENBITS_EN_OHC0_IRQ_SHIFT)
#define USB_CHICKENBITS_SET_EN_OHC0_IRQ(USB_CHICKENBITS, EN_OHC0_IRQ) { \
	FDL_ASSERT(!((EN_OHC0_IRQ) & ~((1 << USB_CHICKENBITS_EN_OHC0_IRQ_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_EN_OHC0_IRQ_MASK) | (((unsigned long)(EN_OHC0_IRQ)) << USB_CHICKENBITS_EN_OHC0_IRQ_SHIFT);\
}
#define USB_CHICKENBITS_EN_OHC1_IRQ_SIZE	1
#define USB_CHICKENBITS_EN_OHC1_IRQ_SHIFT	12
#define USB_CHICKENBITS_EN_OHC1_IRQ_MASK	0x00001000
#define USB_CHICKENBITS_GET_EN_OHC1_IRQ(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_EN_OHC1_IRQ_MASK) >> USB_CHICKENBITS_EN_OHC1_IRQ_SHIFT)
#define USB_CHICKENBITS_SET_EN_OHC1_IRQ(USB_CHICKENBITS, EN_OHC1_IRQ) { \
	FDL_ASSERT(!((EN_OHC1_IRQ) & ~((1 << USB_CHICKENBITS_EN_OHC1_IRQ_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_EN_OHC1_IRQ_MASK) | (((unsigned long)(EN_OHC1_IRQ)) << USB_CHICKENBITS_EN_OHC1_IRQ_SHIFT);\
}
#define USB_CHICKENBITS_EN_OHC0_SMI_SIZE	1
#define USB_CHICKENBITS_EN_OHC0_SMI_SHIFT	13
#define USB_CHICKENBITS_EN_OHC0_SMI_MASK	0x00002000
#define USB_CHICKENBITS_GET_EN_OHC0_SMI(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_EN_OHC0_SMI_MASK) >> USB_CHICKENBITS_EN_OHC0_SMI_SHIFT)
#define USB_CHICKENBITS_SET_EN_OHC0_SMI(USB_CHICKENBITS, EN_OHC0_SMI) { \
	FDL_ASSERT(!((EN_OHC0_SMI) & ~((1 << USB_CHICKENBITS_EN_OHC0_SMI_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_EN_OHC0_SMI_MASK) | (((unsigned long)(EN_OHC0_SMI)) << USB_CHICKENBITS_EN_OHC0_SMI_SHIFT);\
}
#define USB_CHICKENBITS_EN_OHC1_SMI_SIZE	1
#define USB_CHICKENBITS_EN_OHC1_SMI_SHIFT	14
#define USB_CHICKENBITS_EN_OHC1_SMI_MASK	0x00004000
#define USB_CHICKENBITS_GET_EN_OHC1_SMI(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_EN_OHC1_SMI_MASK) >> USB_CHICKENBITS_EN_OHC1_SMI_SHIFT)
#define USB_CHICKENBITS_SET_EN_OHC1_SMI(USB_CHICKENBITS, EN_OHC1_SMI) { \
	FDL_ASSERT(!((EN_OHC1_SMI) & ~((1 << USB_CHICKENBITS_EN_OHC1_SMI_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_EN_OHC1_SMI_MASK) | (((unsigned long)(EN_OHC1_SMI)) << USB_CHICKENBITS_EN_OHC1_SMI_SHIFT);\
}
#define USB_CHICKENBITS_PAD0_SIZE	17
#define USB_CHICKENBITS_PAD0_SHIFT	15
#define USB_CHICKENBITS_PAD0_MASK	0xffff8000
#define USB_CHICKENBITS_GET_PAD0(USB_CHICKENBITS) \
	((((unsigned long)(USB_CHICKENBITS)) & USB_CHICKENBITS_PAD0_MASK) >> USB_CHICKENBITS_PAD0_SHIFT)
#define USB_CHICKENBITS_SET_PAD0(USB_CHICKENBITS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << USB_CHICKENBITS_PAD0_SIZE)-1))); \
	USB_CHICKENBITS = (((unsigned long)(USB_CHICKENBITS)) & ~USB_CHICKENBITS_PAD0_MASK) | (((unsigned long)(pad0)) << USB_CHICKENBITS_PAD0_SHIFT);\
}
#define USB_CHICKENBITS_TOTAL_SIZE	32
#define USB_CHICKENBITS(ENABLE_OHCI_OUT_TH48, ECO251_ENABLE, NO_EHC_RETRYLIMIT, EHC_INC_RETRYLIMIT, EHC_BREAK_BC128_EN, EHC_BREAK_BC128_SEL, PCI_FRC_NO_BABBLE, ENABLE_OHC_PREFETCH, SELECT_OHC_PREFETCH, ENABLE_OHC_TD_PREFETCH, SET_RECLAMATION_FIX_EN, EN_OHC0_IRQ, EN_OHC1_IRQ, EN_OHC0_SMI, EN_OHC1_SMI) \
	((((unsigned long)(ENABLE_OHCI_OUT_TH48)) << USB_CHICKENBITS_ENABLE_OHCI_OUT_TH48_SHIFT) | \
	 (((unsigned long)(ECO251_ENABLE)) << USB_CHICKENBITS_ECO251_ENABLE_SHIFT) | \
	 (((unsigned long)(NO_EHC_RETRYLIMIT)) << USB_CHICKENBITS_NO_EHC_RETRYLIMIT_SHIFT) | \
	 (((unsigned long)(EHC_INC_RETRYLIMIT)) << USB_CHICKENBITS_EHC_INC_RETRYLIMIT_SHIFT) | \
	 (((unsigned long)(EHC_BREAK_BC128_EN)) << USB_CHICKENBITS_EHC_BREAK_BC128_EN_SHIFT) | \
	 (((unsigned long)(EHC_BREAK_BC128_SEL)) << USB_CHICKENBITS_EHC_BREAK_BC128_SEL_SHIFT) | \
	 (((unsigned long)(PCI_FRC_NO_BABBLE)) << USB_CHICKENBITS_PCI_FRC_NO_BABBLE_SHIFT) | \
	 (((unsigned long)(ENABLE_OHC_PREFETCH)) << USB_CHICKENBITS_ENABLE_OHC_PREFETCH_SHIFT) | \
	 (((unsigned long)(SELECT_OHC_PREFETCH)) << USB_CHICKENBITS_SELECT_OHC_PREFETCH_SHIFT) | \
	 (((unsigned long)(ENABLE_OHC_TD_PREFETCH)) << USB_CHICKENBITS_ENABLE_OHC_TD_PREFETCH_SHIFT) | \
	 (((unsigned long)(SET_RECLAMATION_FIX_EN)) << USB_CHICKENBITS_SET_RECLAMATION_FIX_EN_SHIFT) | \
	 (((unsigned long)(EN_OHC0_IRQ)) << USB_CHICKENBITS_EN_OHC0_IRQ_SHIFT) | \
	 (((unsigned long)(EN_OHC1_IRQ)) << USB_CHICKENBITS_EN_OHC1_IRQ_SHIFT) | \
	 (((unsigned long)(EN_OHC0_SMI)) << USB_CHICKENBITS_EN_OHC0_SMI_SHIFT) | \
	 (((unsigned long)(EN_OHC1_SMI)) << USB_CHICKENBITS_EN_OHC1_SMI_SHIFT))

/*
 *  SDI_reg_index value
 */
#define SDISYSADDR_OFFSET	0x000
#define SDIBLKSZCNT_OFFSET	0x004
#define SDIARG_OFFSET	0x008
#define SDITMDCMD_OFFSET	0x00c
#define SDIRSPN01_OFFSET	0x010
#define SDIRSPN23_OFFSET	0x014
#define SDIRSPN45_OFFSET	0x018
#define SDIRSPN67_OFFSET	0x01c
#define SDIBDPORT_OFFSET	0x020
#define SDIPSTATE_OFFSET	0x024
#define SDICTRL_OFFSET	0x028
#define SDICLKRST_OFFSET	0x02c
#define SDIINTSTAT_OFFSET	0x030
#define SDIINTSTATEN_OFFSET	0x034
#define SDIINTSIGEN_OFFSET	0x038
#define SDIACMD12ERRSTAT_OFFSET	0x03c
#define SDICAP01_OFFSET	0x040
#define SDICAP23_OFFSET	0x044
#define SDIMAXCURCAP01_OFFSET	0x048
#define SDIMAXCURCAP23_OFFSET	0x04c
#define SDISISVER_OFFSET	0x0fc

/*
 *  SDISYSADDR struct
 */
#define SDISYSADDR_SYSADDR_SIZE	32
#define SDISYSADDR_SYSADDR_SHIFT	0
#define SDISYSADDR_SYSADDR_MASK	0xffffffff
#define SDISYSADDR_GET_SYSADDR(SDISYSADDR) \
	((((unsigned long)(SDISYSADDR)) & SDISYSADDR_SYSADDR_MASK) >> SDISYSADDR_SYSADDR_SHIFT)
#define SDISYSADDR_SET_SYSADDR(SDISYSADDR, SYSADDR) { \
	FDL_ASSERT(!((SYSADDR) & ~((1 << SDISYSADDR_SYSADDR_SIZE)-1))); \
	SDISYSADDR = (((unsigned long)(SDISYSADDR)) & ~SDISYSADDR_SYSADDR_MASK) | (((unsigned long)(SYSADDR)) << SDISYSADDR_SYSADDR_SHIFT);\
}
#define SDISYSADDR_TOTAL_SIZE	32
#define SDISYSADDR(SYSADDR) \
	((((unsigned long)(SYSADDR)) << SDISYSADDR_SYSADDR_SHIFT))

/*
 *  SDIBLKSZCNT struct
 */
#define SDIBLKSZCNT_XFRBLKSIZ_SIZE	12
#define SDIBLKSZCNT_XFRBLKSIZ_SHIFT	0
#define SDIBLKSZCNT_XFRBLKSIZ_MASK	0x00000fff
#define SDIBLKSZCNT_GET_XFRBLKSIZ(SDIBLKSZCNT) \
	((((unsigned long)(SDIBLKSZCNT)) & SDIBLKSZCNT_XFRBLKSIZ_MASK) >> SDIBLKSZCNT_XFRBLKSIZ_SHIFT)
#define SDIBLKSZCNT_SET_XFRBLKSIZ(SDIBLKSZCNT, XFRBLKSIZ) { \
	FDL_ASSERT(!((XFRBLKSIZ) & ~((1 << SDIBLKSZCNT_XFRBLKSIZ_SIZE)-1))); \
	SDIBLKSZCNT = (((unsigned long)(SDIBLKSZCNT)) & ~SDIBLKSZCNT_XFRBLKSIZ_MASK) | (((unsigned long)(XFRBLKSIZ)) << SDIBLKSZCNT_XFRBLKSIZ_SHIFT);\
}
#define SDIBLKSZCNT_HSTBUFSIZ_SIZE	3
#define SDIBLKSZCNT_HSTBUFSIZ_SHIFT	12
#define SDIBLKSZCNT_HSTBUFSIZ_MASK	0x00007000
#define SDIBLKSZCNT_GET_HSTBUFSIZ(SDIBLKSZCNT) \
	((((unsigned long)(SDIBLKSZCNT)) & SDIBLKSZCNT_HSTBUFSIZ_MASK) >> SDIBLKSZCNT_HSTBUFSIZ_SHIFT)
#define SDIBLKSZCNT_SET_HSTBUFSIZ(SDIBLKSZCNT, HSTBUFSIZ) { \
	FDL_ASSERT(!((HSTBUFSIZ) & ~((1 << SDIBLKSZCNT_HSTBUFSIZ_SIZE)-1))); \
	SDIBLKSZCNT = (((unsigned long)(SDIBLKSZCNT)) & ~SDIBLKSZCNT_HSTBUFSIZ_MASK) | (((unsigned long)(HSTBUFSIZ)) << SDIBLKSZCNT_HSTBUFSIZ_SHIFT);\
}
#define SDIBLKSZCNT_PAD0_SIZE	1
#define SDIBLKSZCNT_PAD0_SHIFT	15
#define SDIBLKSZCNT_PAD0_MASK	0x00008000
#define SDIBLKSZCNT_GET_PAD0(SDIBLKSZCNT) \
	((((unsigned long)(SDIBLKSZCNT)) & SDIBLKSZCNT_PAD0_MASK) >> SDIBLKSZCNT_PAD0_SHIFT)
#define SDIBLKSZCNT_SET_PAD0(SDIBLKSZCNT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIBLKSZCNT_PAD0_SIZE)-1))); \
	SDIBLKSZCNT = (((unsigned long)(SDIBLKSZCNT)) & ~SDIBLKSZCNT_PAD0_MASK) | (((unsigned long)(pad0)) << SDIBLKSZCNT_PAD0_SHIFT);\
}
#define SDIBLKSZCNT_CURBLKCNT_SIZE	16
#define SDIBLKSZCNT_CURBLKCNT_SHIFT	16
#define SDIBLKSZCNT_CURBLKCNT_MASK	0xffff0000
#define SDIBLKSZCNT_GET_CURBLKCNT(SDIBLKSZCNT) \
	((((unsigned long)(SDIBLKSZCNT)) & SDIBLKSZCNT_CURBLKCNT_MASK) >> SDIBLKSZCNT_CURBLKCNT_SHIFT)
#define SDIBLKSZCNT_SET_CURBLKCNT(SDIBLKSZCNT, CURBLKCNT) { \
	FDL_ASSERT(!((CURBLKCNT) & ~((1 << SDIBLKSZCNT_CURBLKCNT_SIZE)-1))); \
	SDIBLKSZCNT = (((unsigned long)(SDIBLKSZCNT)) & ~SDIBLKSZCNT_CURBLKCNT_MASK) | (((unsigned long)(CURBLKCNT)) << SDIBLKSZCNT_CURBLKCNT_SHIFT);\
}
#define SDIBLKSZCNT_TOTAL_SIZE	32
#define SDIBLKSZCNT(XFRBLKSIZ, HSTBUFSIZ, CURBLKCNT) \
	((((unsigned long)(XFRBLKSIZ)) << SDIBLKSZCNT_XFRBLKSIZ_SHIFT) | \
	 (((unsigned long)(HSTBUFSIZ)) << SDIBLKSZCNT_HSTBUFSIZ_SHIFT) | \
	 (((unsigned long)(CURBLKCNT)) << SDIBLKSZCNT_CURBLKCNT_SHIFT))

/*
 *  SDIARG struct
 */
#define SDIARG_ARG_SIZE	32
#define SDIARG_ARG_SHIFT	0
#define SDIARG_ARG_MASK	0xffffffff
#define SDIARG_GET_ARG(SDIARG) \
	((((unsigned long)(SDIARG)) & SDIARG_ARG_MASK) >> SDIARG_ARG_SHIFT)
#define SDIARG_SET_ARG(SDIARG, ARG) { \
	FDL_ASSERT(!((ARG) & ~((1 << SDIARG_ARG_SIZE)-1))); \
	SDIARG = (((unsigned long)(SDIARG)) & ~SDIARG_ARG_MASK) | (((unsigned long)(ARG)) << SDIARG_ARG_SHIFT);\
}
#define SDIARG_TOTAL_SIZE	32
#define SDIARG(ARG) \
	((((unsigned long)(ARG)) << SDIARG_ARG_SHIFT))

/*
 *  SDITMDCMD struct
 */
#define SDITMDCMD_DMA_EN_SIZE	1
#define SDITMDCMD_DMA_EN_SHIFT	0
#define SDITMDCMD_DMA_EN_MASK	0x00000001
#define SDITMDCMD_GET_DMA_EN(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_DMA_EN_MASK) >> SDITMDCMD_DMA_EN_SHIFT)
#define SDITMDCMD_SET_DMA_EN(SDITMDCMD, DMA_EN) { \
	FDL_ASSERT(!((DMA_EN) & ~((1 << SDITMDCMD_DMA_EN_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_DMA_EN_MASK) | (((unsigned long)(DMA_EN)) << SDITMDCMD_DMA_EN_SHIFT);\
}
#define SDITMDCMD_BCNT_EN_SIZE	1
#define SDITMDCMD_BCNT_EN_SHIFT	1
#define SDITMDCMD_BCNT_EN_MASK	0x00000002
#define SDITMDCMD_GET_BCNT_EN(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_BCNT_EN_MASK) >> SDITMDCMD_BCNT_EN_SHIFT)
#define SDITMDCMD_SET_BCNT_EN(SDITMDCMD, BCNT_EN) { \
	FDL_ASSERT(!((BCNT_EN) & ~((1 << SDITMDCMD_BCNT_EN_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_BCNT_EN_MASK) | (((unsigned long)(BCNT_EN)) << SDITMDCMD_BCNT_EN_SHIFT);\
}
#define SDITMDCMD_ACMD12_EN_SIZE	1
#define SDITMDCMD_ACMD12_EN_SHIFT	2
#define SDITMDCMD_ACMD12_EN_MASK	0x00000004
#define SDITMDCMD_GET_ACMD12_EN(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_ACMD12_EN_MASK) >> SDITMDCMD_ACMD12_EN_SHIFT)
#define SDITMDCMD_SET_ACMD12_EN(SDITMDCMD, ACMD12_EN) { \
	FDL_ASSERT(!((ACMD12_EN) & ~((1 << SDITMDCMD_ACMD12_EN_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_ACMD12_EN_MASK) | (((unsigned long)(ACMD12_EN)) << SDITMDCMD_ACMD12_EN_SHIFT);\
}
#define SDITMDCMD_PAD0_SIZE	1
#define SDITMDCMD_PAD0_SHIFT	3
#define SDITMDCMD_PAD0_MASK	0x00000008
#define SDITMDCMD_GET_PAD0(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_PAD0_MASK) >> SDITMDCMD_PAD0_SHIFT)
#define SDITMDCMD_SET_PAD0(SDITMDCMD, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDITMDCMD_PAD0_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_PAD0_MASK) | (((unsigned long)(pad0)) << SDITMDCMD_PAD0_SHIFT);\
}
#define SDITMDCMD_DAT_TRAN_DIR_SIZE	1
#define SDITMDCMD_DAT_TRAN_DIR_SHIFT	4
#define SDITMDCMD_DAT_TRAN_DIR_MASK	0x00000010
#define SDITMDCMD_GET_DAT_TRAN_DIR(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_DAT_TRAN_DIR_MASK) >> SDITMDCMD_DAT_TRAN_DIR_SHIFT)
#define SDITMDCMD_SET_DAT_TRAN_DIR(SDITMDCMD, DAT_TRAN_DIR) { \
	FDL_ASSERT(!((DAT_TRAN_DIR) & ~((1 << SDITMDCMD_DAT_TRAN_DIR_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_DAT_TRAN_DIR_MASK) | (((unsigned long)(DAT_TRAN_DIR)) << SDITMDCMD_DAT_TRAN_DIR_SHIFT);\
}
#define SDITMDCMD_MBLK_SIZE	1
#define SDITMDCMD_MBLK_SHIFT	5
#define SDITMDCMD_MBLK_MASK	0x00000020
#define SDITMDCMD_GET_MBLK(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_MBLK_MASK) >> SDITMDCMD_MBLK_SHIFT)
#define SDITMDCMD_SET_MBLK(SDITMDCMD, MBLK) { \
	FDL_ASSERT(!((MBLK) & ~((1 << SDITMDCMD_MBLK_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_MBLK_MASK) | (((unsigned long)(MBLK)) << SDITMDCMD_MBLK_SHIFT);\
}
#define SDITMDCMD_PAD1_SIZE	10
#define SDITMDCMD_PAD1_SHIFT	6
#define SDITMDCMD_PAD1_MASK	0x0000ffc0
#define SDITMDCMD_GET_PAD1(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_PAD1_MASK) >> SDITMDCMD_PAD1_SHIFT)
#define SDITMDCMD_SET_PAD1(SDITMDCMD, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDITMDCMD_PAD1_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_PAD1_MASK) | (((unsigned long)(pad1)) << SDITMDCMD_PAD1_SHIFT);\
}
#define SDITMDCMD_RSPN_TYPE_SIZE	2
#define SDITMDCMD_RSPN_TYPE_SHIFT	16
#define SDITMDCMD_RSPN_TYPE_MASK	0x00030000
#define SDITMDCMD_GET_RSPN_TYPE(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_RSPN_TYPE_MASK) >> SDITMDCMD_RSPN_TYPE_SHIFT)
#define SDITMDCMD_SET_RSPN_TYPE(SDITMDCMD, RSPN_TYPE) { \
	FDL_ASSERT(!((RSPN_TYPE) & ~((1 << SDITMDCMD_RSPN_TYPE_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_RSPN_TYPE_MASK) | (((unsigned long)(RSPN_TYPE)) << SDITMDCMD_RSPN_TYPE_SHIFT);\
}
#define SDITMDCMD_PAD2_SIZE	1
#define SDITMDCMD_PAD2_SHIFT	18
#define SDITMDCMD_PAD2_MASK	0x00040000
#define SDITMDCMD_GET_PAD2(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_PAD2_MASK) >> SDITMDCMD_PAD2_SHIFT)
#define SDITMDCMD_SET_PAD2(SDITMDCMD, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << SDITMDCMD_PAD2_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_PAD2_MASK) | (((unsigned long)(pad2)) << SDITMDCMD_PAD2_SHIFT);\
}
#define SDITMDCMD_CMD_CRC_CK_EN_SIZE	1
#define SDITMDCMD_CMD_CRC_CK_EN_SHIFT	19
#define SDITMDCMD_CMD_CRC_CK_EN_MASK	0x00080000
#define SDITMDCMD_GET_CMD_CRC_CK_EN(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_CMD_CRC_CK_EN_MASK) >> SDITMDCMD_CMD_CRC_CK_EN_SHIFT)
#define SDITMDCMD_SET_CMD_CRC_CK_EN(SDITMDCMD, CMD_CRC_CK_EN) { \
	FDL_ASSERT(!((CMD_CRC_CK_EN) & ~((1 << SDITMDCMD_CMD_CRC_CK_EN_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_CMD_CRC_CK_EN_MASK) | (((unsigned long)(CMD_CRC_CK_EN)) << SDITMDCMD_CMD_CRC_CK_EN_SHIFT);\
}
#define SDITMDCMD_CMD_IDX_CK_EN_SIZE	1
#define SDITMDCMD_CMD_IDX_CK_EN_SHIFT	20
#define SDITMDCMD_CMD_IDX_CK_EN_MASK	0x00100000
#define SDITMDCMD_GET_CMD_IDX_CK_EN(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_CMD_IDX_CK_EN_MASK) >> SDITMDCMD_CMD_IDX_CK_EN_SHIFT)
#define SDITMDCMD_SET_CMD_IDX_CK_EN(SDITMDCMD, CMD_IDX_CK_EN) { \
	FDL_ASSERT(!((CMD_IDX_CK_EN) & ~((1 << SDITMDCMD_CMD_IDX_CK_EN_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_CMD_IDX_CK_EN_MASK) | (((unsigned long)(CMD_IDX_CK_EN)) << SDITMDCMD_CMD_IDX_CK_EN_SHIFT);\
}
#define SDITMDCMD_DP_SEL_SIZE	1
#define SDITMDCMD_DP_SEL_SHIFT	21
#define SDITMDCMD_DP_SEL_MASK	0x00200000
#define SDITMDCMD_GET_DP_SEL(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_DP_SEL_MASK) >> SDITMDCMD_DP_SEL_SHIFT)
#define SDITMDCMD_SET_DP_SEL(SDITMDCMD, DP_SEL) { \
	FDL_ASSERT(!((DP_SEL) & ~((1 << SDITMDCMD_DP_SEL_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_DP_SEL_MASK) | (((unsigned long)(DP_SEL)) << SDITMDCMD_DP_SEL_SHIFT);\
}
#define SDITMDCMD_CMD_TYPE_SIZE	2
#define SDITMDCMD_CMD_TYPE_SHIFT	22
#define SDITMDCMD_CMD_TYPE_MASK	0x00c00000
#define SDITMDCMD_GET_CMD_TYPE(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_CMD_TYPE_MASK) >> SDITMDCMD_CMD_TYPE_SHIFT)
#define SDITMDCMD_SET_CMD_TYPE(SDITMDCMD, CMD_TYPE) { \
	FDL_ASSERT(!((CMD_TYPE) & ~((1 << SDITMDCMD_CMD_TYPE_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_CMD_TYPE_MASK) | (((unsigned long)(CMD_TYPE)) << SDITMDCMD_CMD_TYPE_SHIFT);\
}
#define SDITMDCMD_CMD_IDX_SIZE	6
#define SDITMDCMD_CMD_IDX_SHIFT	24
#define SDITMDCMD_CMD_IDX_MASK	0x3f000000
#define SDITMDCMD_GET_CMD_IDX(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_CMD_IDX_MASK) >> SDITMDCMD_CMD_IDX_SHIFT)
#define SDITMDCMD_SET_CMD_IDX(SDITMDCMD, CMD_IDX) { \
	FDL_ASSERT(!((CMD_IDX) & ~((1 << SDITMDCMD_CMD_IDX_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_CMD_IDX_MASK) | (((unsigned long)(CMD_IDX)) << SDITMDCMD_CMD_IDX_SHIFT);\
}
#define SDITMDCMD_PAD3_SIZE	2
#define SDITMDCMD_PAD3_SHIFT	30
#define SDITMDCMD_PAD3_MASK	0xc0000000
#define SDITMDCMD_GET_PAD3(SDITMDCMD) \
	((((unsigned long)(SDITMDCMD)) & SDITMDCMD_PAD3_MASK) >> SDITMDCMD_PAD3_SHIFT)
#define SDITMDCMD_SET_PAD3(SDITMDCMD, pad3) { \
	FDL_ASSERT(!((pad3) & ~((1 << SDITMDCMD_PAD3_SIZE)-1))); \
	SDITMDCMD = (((unsigned long)(SDITMDCMD)) & ~SDITMDCMD_PAD3_MASK) | (((unsigned long)(pad3)) << SDITMDCMD_PAD3_SHIFT);\
}
#define SDITMDCMD_TOTAL_SIZE	32
#define SDITMDCMD(DMA_EN, BCNT_EN, ACMD12_EN, DAT_TRAN_DIR, MBLK, RSPN_TYPE, CMD_CRC_CK_EN, CMD_IDX_CK_EN, DP_SEL, CMD_TYPE, CMD_IDX) \
	((((unsigned long)(DMA_EN)) << SDITMDCMD_DMA_EN_SHIFT) | \
	 (((unsigned long)(BCNT_EN)) << SDITMDCMD_BCNT_EN_SHIFT) | \
	 (((unsigned long)(ACMD12_EN)) << SDITMDCMD_ACMD12_EN_SHIFT) | \
	 (((unsigned long)(DAT_TRAN_DIR)) << SDITMDCMD_DAT_TRAN_DIR_SHIFT) | \
	 (((unsigned long)(MBLK)) << SDITMDCMD_MBLK_SHIFT) | \
	 (((unsigned long)(RSPN_TYPE)) << SDITMDCMD_RSPN_TYPE_SHIFT) | \
	 (((unsigned long)(CMD_CRC_CK_EN)) << SDITMDCMD_CMD_CRC_CK_EN_SHIFT) | \
	 (((unsigned long)(CMD_IDX_CK_EN)) << SDITMDCMD_CMD_IDX_CK_EN_SHIFT) | \
	 (((unsigned long)(DP_SEL)) << SDITMDCMD_DP_SEL_SHIFT) | \
	 (((unsigned long)(CMD_TYPE)) << SDITMDCMD_CMD_TYPE_SHIFT) | \
	 (((unsigned long)(CMD_IDX)) << SDITMDCMD_CMD_IDX_SHIFT))

/*
 *  SDIRSPN01 struct
 */
#define SDIRSPN01_RSPN01_SIZE	32
#define SDIRSPN01_RSPN01_SHIFT	0
#define SDIRSPN01_RSPN01_MASK	0xffffffff
#define SDIRSPN01_GET_RSPN01(SDIRSPN01) \
	((((unsigned long)(SDIRSPN01)) & SDIRSPN01_RSPN01_MASK) >> SDIRSPN01_RSPN01_SHIFT)
#define SDIRSPN01_SET_RSPN01(SDIRSPN01, RSPN01) { \
	FDL_ASSERT(!((RSPN01) & ~((1 << SDIRSPN01_RSPN01_SIZE)-1))); \
	SDIRSPN01 = (((unsigned long)(SDIRSPN01)) & ~SDIRSPN01_RSPN01_MASK) | (((unsigned long)(RSPN01)) << SDIRSPN01_RSPN01_SHIFT);\
}
#define SDIRSPN01_TOTAL_SIZE	32
#define SDIRSPN01(RSPN01) \
	((((unsigned long)(RSPN01)) << SDIRSPN01_RSPN01_SHIFT))

/*
 *  SDIRSPN23 struct
 */
#define SDIRSPN23_RSPN23_SIZE	32
#define SDIRSPN23_RSPN23_SHIFT	0
#define SDIRSPN23_RSPN23_MASK	0xffffffff
#define SDIRSPN23_GET_RSPN23(SDIRSPN23) \
	((((unsigned long)(SDIRSPN23)) & SDIRSPN23_RSPN23_MASK) >> SDIRSPN23_RSPN23_SHIFT)
#define SDIRSPN23_SET_RSPN23(SDIRSPN23, RSPN23) { \
	FDL_ASSERT(!((RSPN23) & ~((1 << SDIRSPN23_RSPN23_SIZE)-1))); \
	SDIRSPN23 = (((unsigned long)(SDIRSPN23)) & ~SDIRSPN23_RSPN23_MASK) | (((unsigned long)(RSPN23)) << SDIRSPN23_RSPN23_SHIFT);\
}
#define SDIRSPN23_TOTAL_SIZE	32
#define SDIRSPN23(RSPN23) \
	((((unsigned long)(RSPN23)) << SDIRSPN23_RSPN23_SHIFT))

/*
 *  SDIRSPN45 struct
 */
#define SDIRSPN45_RSPN45_SIZE	32
#define SDIRSPN45_RSPN45_SHIFT	0
#define SDIRSPN45_RSPN45_MASK	0xffffffff
#define SDIRSPN45_GET_RSPN45(SDIRSPN45) \
	((((unsigned long)(SDIRSPN45)) & SDIRSPN45_RSPN45_MASK) >> SDIRSPN45_RSPN45_SHIFT)
#define SDIRSPN45_SET_RSPN45(SDIRSPN45, RSPN45) { \
	FDL_ASSERT(!((RSPN45) & ~((1 << SDIRSPN45_RSPN45_SIZE)-1))); \
	SDIRSPN45 = (((unsigned long)(SDIRSPN45)) & ~SDIRSPN45_RSPN45_MASK) | (((unsigned long)(RSPN45)) << SDIRSPN45_RSPN45_SHIFT);\
}
#define SDIRSPN45_TOTAL_SIZE	32
#define SDIRSPN45(RSPN45) \
	((((unsigned long)(RSPN45)) << SDIRSPN45_RSPN45_SHIFT))

/*
 *  SDIRSPN67 struct
 */
#define SDIRSPN67_RSPN67_SIZE	32
#define SDIRSPN67_RSPN67_SHIFT	0
#define SDIRSPN67_RSPN67_MASK	0xffffffff
#define SDIRSPN67_GET_RSPN67(SDIRSPN67) \
	((((unsigned long)(SDIRSPN67)) & SDIRSPN67_RSPN67_MASK) >> SDIRSPN67_RSPN67_SHIFT)
#define SDIRSPN67_SET_RSPN67(SDIRSPN67, RSPN67) { \
	FDL_ASSERT(!((RSPN67) & ~((1 << SDIRSPN67_RSPN67_SIZE)-1))); \
	SDIRSPN67 = (((unsigned long)(SDIRSPN67)) & ~SDIRSPN67_RSPN67_MASK) | (((unsigned long)(RSPN67)) << SDIRSPN67_RSPN67_SHIFT);\
}
#define SDIRSPN67_TOTAL_SIZE	32
#define SDIRSPN67(RSPN67) \
	((((unsigned long)(RSPN67)) << SDIRSPN67_RSPN67_SHIFT))

/*
 *  SDIBDPORT struct
 */
#define SDIBDPORT_BDATA_SIZE	32
#define SDIBDPORT_BDATA_SHIFT	0
#define SDIBDPORT_BDATA_MASK	0xffffffff
#define SDIBDPORT_GET_BDATA(SDIBDPORT) \
	((((unsigned long)(SDIBDPORT)) & SDIBDPORT_BDATA_MASK) >> SDIBDPORT_BDATA_SHIFT)
#define SDIBDPORT_SET_BDATA(SDIBDPORT, BDATA) { \
	FDL_ASSERT(!((BDATA) & ~((1 << SDIBDPORT_BDATA_SIZE)-1))); \
	SDIBDPORT = (((unsigned long)(SDIBDPORT)) & ~SDIBDPORT_BDATA_MASK) | (((unsigned long)(BDATA)) << SDIBDPORT_BDATA_SHIFT);\
}
#define SDIBDPORT_TOTAL_SIZE	32
#define SDIBDPORT(BDATA) \
	((((unsigned long)(BDATA)) << SDIBDPORT_BDATA_SHIFT))

/*
 *  SDIPSTATE struct
 */
#define SDIPSTATE_CMD_INHB_CMD_SIZE	1
#define SDIPSTATE_CMD_INHB_CMD_SHIFT	0
#define SDIPSTATE_CMD_INHB_CMD_MASK	0x00000001
#define SDIPSTATE_GET_CMD_INHB_CMD(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_CMD_INHB_CMD_MASK) >> SDIPSTATE_CMD_INHB_CMD_SHIFT)
#define SDIPSTATE_SET_CMD_INHB_CMD(SDIPSTATE, CMD_INHB_CMD) { \
	FDL_ASSERT(!((CMD_INHB_CMD) & ~((1 << SDIPSTATE_CMD_INHB_CMD_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_CMD_INHB_CMD_MASK) | (((unsigned long)(CMD_INHB_CMD)) << SDIPSTATE_CMD_INHB_CMD_SHIFT);\
}
#define SDIPSTATE_CMD_INHB_DAT_SIZE	1
#define SDIPSTATE_CMD_INHB_DAT_SHIFT	1
#define SDIPSTATE_CMD_INHB_DAT_MASK	0x00000002
#define SDIPSTATE_GET_CMD_INHB_DAT(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_CMD_INHB_DAT_MASK) >> SDIPSTATE_CMD_INHB_DAT_SHIFT)
#define SDIPSTATE_SET_CMD_INHB_DAT(SDIPSTATE, CMD_INHB_DAT) { \
	FDL_ASSERT(!((CMD_INHB_DAT) & ~((1 << SDIPSTATE_CMD_INHB_DAT_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_CMD_INHB_DAT_MASK) | (((unsigned long)(CMD_INHB_DAT)) << SDIPSTATE_CMD_INHB_DAT_SHIFT);\
}
#define SDIPSTATE_DAT_LN_ACT_SIZE	1
#define SDIPSTATE_DAT_LN_ACT_SHIFT	2
#define SDIPSTATE_DAT_LN_ACT_MASK	0x00000004
#define SDIPSTATE_GET_DAT_LN_ACT(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_DAT_LN_ACT_MASK) >> SDIPSTATE_DAT_LN_ACT_SHIFT)
#define SDIPSTATE_SET_DAT_LN_ACT(SDIPSTATE, DAT_LN_ACT) { \
	FDL_ASSERT(!((DAT_LN_ACT) & ~((1 << SDIPSTATE_DAT_LN_ACT_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_DAT_LN_ACT_MASK) | (((unsigned long)(DAT_LN_ACT)) << SDIPSTATE_DAT_LN_ACT_SHIFT);\
}
#define SDIPSTATE_PAD0_SIZE	5
#define SDIPSTATE_PAD0_SHIFT	3
#define SDIPSTATE_PAD0_MASK	0x000000f8
#define SDIPSTATE_GET_PAD0(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_PAD0_MASK) >> SDIPSTATE_PAD0_SHIFT)
#define SDIPSTATE_SET_PAD0(SDIPSTATE, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIPSTATE_PAD0_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_PAD0_MASK) | (((unsigned long)(pad0)) << SDIPSTATE_PAD0_SHIFT);\
}
#define SDIPSTATE_WTRAN_ACT_SIZE	1
#define SDIPSTATE_WTRAN_ACT_SHIFT	8
#define SDIPSTATE_WTRAN_ACT_MASK	0x00000100
#define SDIPSTATE_GET_WTRAN_ACT(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_WTRAN_ACT_MASK) >> SDIPSTATE_WTRAN_ACT_SHIFT)
#define SDIPSTATE_SET_WTRAN_ACT(SDIPSTATE, WTRAN_ACT) { \
	FDL_ASSERT(!((WTRAN_ACT) & ~((1 << SDIPSTATE_WTRAN_ACT_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_WTRAN_ACT_MASK) | (((unsigned long)(WTRAN_ACT)) << SDIPSTATE_WTRAN_ACT_SHIFT);\
}
#define SDIPSTATE_RTRAN_ACT_SIZE	1
#define SDIPSTATE_RTRAN_ACT_SHIFT	9
#define SDIPSTATE_RTRAN_ACT_MASK	0x00000200
#define SDIPSTATE_GET_RTRAN_ACT(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_RTRAN_ACT_MASK) >> SDIPSTATE_RTRAN_ACT_SHIFT)
#define SDIPSTATE_SET_RTRAN_ACT(SDIPSTATE, RTRAN_ACT) { \
	FDL_ASSERT(!((RTRAN_ACT) & ~((1 << SDIPSTATE_RTRAN_ACT_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_RTRAN_ACT_MASK) | (((unsigned long)(RTRAN_ACT)) << SDIPSTATE_RTRAN_ACT_SHIFT);\
}
#define SDIPSTATE_BUFW_EN_SIZE	1
#define SDIPSTATE_BUFW_EN_SHIFT	10
#define SDIPSTATE_BUFW_EN_MASK	0x00000400
#define SDIPSTATE_GET_BUFW_EN(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_BUFW_EN_MASK) >> SDIPSTATE_BUFW_EN_SHIFT)
#define SDIPSTATE_SET_BUFW_EN(SDIPSTATE, BUFW_EN) { \
	FDL_ASSERT(!((BUFW_EN) & ~((1 << SDIPSTATE_BUFW_EN_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_BUFW_EN_MASK) | (((unsigned long)(BUFW_EN)) << SDIPSTATE_BUFW_EN_SHIFT);\
}
#define SDIPSTATE_BUFR_EN_SIZE	1
#define SDIPSTATE_BUFR_EN_SHIFT	11
#define SDIPSTATE_BUFR_EN_MASK	0x00000800
#define SDIPSTATE_GET_BUFR_EN(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_BUFR_EN_MASK) >> SDIPSTATE_BUFR_EN_SHIFT)
#define SDIPSTATE_SET_BUFR_EN(SDIPSTATE, BUFR_EN) { \
	FDL_ASSERT(!((BUFR_EN) & ~((1 << SDIPSTATE_BUFR_EN_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_BUFR_EN_MASK) | (((unsigned long)(BUFR_EN)) << SDIPSTATE_BUFR_EN_SHIFT);\
}
#define SDIPSTATE_PAD1_SIZE	4
#define SDIPSTATE_PAD1_SHIFT	12
#define SDIPSTATE_PAD1_MASK	0x0000f000
#define SDIPSTATE_GET_PAD1(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_PAD1_MASK) >> SDIPSTATE_PAD1_SHIFT)
#define SDIPSTATE_SET_PAD1(SDIPSTATE, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDIPSTATE_PAD1_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_PAD1_MASK) | (((unsigned long)(pad1)) << SDIPSTATE_PAD1_SHIFT);\
}
#define SDIPSTATE_CARD_INS_SIZE	1
#define SDIPSTATE_CARD_INS_SHIFT	16
#define SDIPSTATE_CARD_INS_MASK	0x00010000
#define SDIPSTATE_GET_CARD_INS(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_CARD_INS_MASK) >> SDIPSTATE_CARD_INS_SHIFT)
#define SDIPSTATE_SET_CARD_INS(SDIPSTATE, CARD_INS) { \
	FDL_ASSERT(!((CARD_INS) & ~((1 << SDIPSTATE_CARD_INS_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_CARD_INS_MASK) | (((unsigned long)(CARD_INS)) << SDIPSTATE_CARD_INS_SHIFT);\
}
#define SDIPSTATE_CARD_STBL_SIZE	1
#define SDIPSTATE_CARD_STBL_SHIFT	17
#define SDIPSTATE_CARD_STBL_MASK	0x00020000
#define SDIPSTATE_GET_CARD_STBL(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_CARD_STBL_MASK) >> SDIPSTATE_CARD_STBL_SHIFT)
#define SDIPSTATE_SET_CARD_STBL(SDIPSTATE, CARD_STBL) { \
	FDL_ASSERT(!((CARD_STBL) & ~((1 << SDIPSTATE_CARD_STBL_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_CARD_STBL_MASK) | (((unsigned long)(CARD_STBL)) << SDIPSTATE_CARD_STBL_SHIFT);\
}
#define SDIPSTATE_CARD_DET_PIN_LVL_SIZE	1
#define SDIPSTATE_CARD_DET_PIN_LVL_SHIFT	18
#define SDIPSTATE_CARD_DET_PIN_LVL_MASK	0x00040000
#define SDIPSTATE_GET_CARD_DET_PIN_LVL(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_CARD_DET_PIN_LVL_MASK) >> SDIPSTATE_CARD_DET_PIN_LVL_SHIFT)
#define SDIPSTATE_SET_CARD_DET_PIN_LVL(SDIPSTATE, CARD_DET_PIN_LVL) { \
	FDL_ASSERT(!((CARD_DET_PIN_LVL) & ~((1 << SDIPSTATE_CARD_DET_PIN_LVL_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_CARD_DET_PIN_LVL_MASK) | (((unsigned long)(CARD_DET_PIN_LVL)) << SDIPSTATE_CARD_DET_PIN_LVL_SHIFT);\
}
#define SDIPSTATE_WPROT_SWT_PIN_LVL_SIZE	1
#define SDIPSTATE_WPROT_SWT_PIN_LVL_SHIFT	19
#define SDIPSTATE_WPROT_SWT_PIN_LVL_MASK	0x00080000
#define SDIPSTATE_GET_WPROT_SWT_PIN_LVL(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_WPROT_SWT_PIN_LVL_MASK) >> SDIPSTATE_WPROT_SWT_PIN_LVL_SHIFT)
#define SDIPSTATE_SET_WPROT_SWT_PIN_LVL(SDIPSTATE, WPROT_SWT_PIN_LVL) { \
	FDL_ASSERT(!((WPROT_SWT_PIN_LVL) & ~((1 << SDIPSTATE_WPROT_SWT_PIN_LVL_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_WPROT_SWT_PIN_LVL_MASK) | (((unsigned long)(WPROT_SWT_PIN_LVL)) << SDIPSTATE_WPROT_SWT_PIN_LVL_SHIFT);\
}
#define SDIPSTATE_DAT_LN_SIG_LVL_SIZE	4
#define SDIPSTATE_DAT_LN_SIG_LVL_SHIFT	20
#define SDIPSTATE_DAT_LN_SIG_LVL_MASK	0x00f00000
#define SDIPSTATE_GET_DAT_LN_SIG_LVL(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_DAT_LN_SIG_LVL_MASK) >> SDIPSTATE_DAT_LN_SIG_LVL_SHIFT)
#define SDIPSTATE_SET_DAT_LN_SIG_LVL(SDIPSTATE, DAT_LN_SIG_LVL) { \
	FDL_ASSERT(!((DAT_LN_SIG_LVL) & ~((1 << SDIPSTATE_DAT_LN_SIG_LVL_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_DAT_LN_SIG_LVL_MASK) | (((unsigned long)(DAT_LN_SIG_LVL)) << SDIPSTATE_DAT_LN_SIG_LVL_SHIFT);\
}
#define SDIPSTATE_CMD_LN_SIG_LVL_SIZE	1
#define SDIPSTATE_CMD_LN_SIG_LVL_SHIFT	24
#define SDIPSTATE_CMD_LN_SIG_LVL_MASK	0x01000000
#define SDIPSTATE_GET_CMD_LN_SIG_LVL(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_CMD_LN_SIG_LVL_MASK) >> SDIPSTATE_CMD_LN_SIG_LVL_SHIFT)
#define SDIPSTATE_SET_CMD_LN_SIG_LVL(SDIPSTATE, CMD_LN_SIG_LVL) { \
	FDL_ASSERT(!((CMD_LN_SIG_LVL) & ~((1 << SDIPSTATE_CMD_LN_SIG_LVL_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_CMD_LN_SIG_LVL_MASK) | (((unsigned long)(CMD_LN_SIG_LVL)) << SDIPSTATE_CMD_LN_SIG_LVL_SHIFT);\
}
#define SDIPSTATE_PAD2_SIZE	7
#define SDIPSTATE_PAD2_SHIFT	25
#define SDIPSTATE_PAD2_MASK	0xfe000000
#define SDIPSTATE_GET_PAD2(SDIPSTATE) \
	((((unsigned long)(SDIPSTATE)) & SDIPSTATE_PAD2_MASK) >> SDIPSTATE_PAD2_SHIFT)
#define SDIPSTATE_SET_PAD2(SDIPSTATE, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << SDIPSTATE_PAD2_SIZE)-1))); \
	SDIPSTATE = (((unsigned long)(SDIPSTATE)) & ~SDIPSTATE_PAD2_MASK) | (((unsigned long)(pad2)) << SDIPSTATE_PAD2_SHIFT);\
}
#define SDIPSTATE_TOTAL_SIZE	32
#define SDIPSTATE(CMD_INHB_CMD, CMD_INHB_DAT, DAT_LN_ACT, WTRAN_ACT, RTRAN_ACT, BUFW_EN, BUFR_EN, CARD_INS, CARD_STBL, CARD_DET_PIN_LVL, WPROT_SWT_PIN_LVL, DAT_LN_SIG_LVL, CMD_LN_SIG_LVL) \
	((((unsigned long)(CMD_INHB_CMD)) << SDIPSTATE_CMD_INHB_CMD_SHIFT) | \
	 (((unsigned long)(CMD_INHB_DAT)) << SDIPSTATE_CMD_INHB_DAT_SHIFT) | \
	 (((unsigned long)(DAT_LN_ACT)) << SDIPSTATE_DAT_LN_ACT_SHIFT) | \
	 (((unsigned long)(WTRAN_ACT)) << SDIPSTATE_WTRAN_ACT_SHIFT) | \
	 (((unsigned long)(RTRAN_ACT)) << SDIPSTATE_RTRAN_ACT_SHIFT) | \
	 (((unsigned long)(BUFW_EN)) << SDIPSTATE_BUFW_EN_SHIFT) | \
	 (((unsigned long)(BUFR_EN)) << SDIPSTATE_BUFR_EN_SHIFT) | \
	 (((unsigned long)(CARD_INS)) << SDIPSTATE_CARD_INS_SHIFT) | \
	 (((unsigned long)(CARD_STBL)) << SDIPSTATE_CARD_STBL_SHIFT) | \
	 (((unsigned long)(CARD_DET_PIN_LVL)) << SDIPSTATE_CARD_DET_PIN_LVL_SHIFT) | \
	 (((unsigned long)(WPROT_SWT_PIN_LVL)) << SDIPSTATE_WPROT_SWT_PIN_LVL_SHIFT) | \
	 (((unsigned long)(DAT_LN_SIG_LVL)) << SDIPSTATE_DAT_LN_SIG_LVL_SHIFT) | \
	 (((unsigned long)(CMD_LN_SIG_LVL)) << SDIPSTATE_CMD_LN_SIG_LVL_SHIFT))

/*
 *  SDICTRL struct
 */
#define SDICTRL_LED_CTRL_SIZE	1
#define SDICTRL_LED_CTRL_SHIFT	0
#define SDICTRL_LED_CTRL_MASK	0x00000001
#define SDICTRL_GET_LED_CTRL(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_LED_CTRL_MASK) >> SDICTRL_LED_CTRL_SHIFT)
#define SDICTRL_SET_LED_CTRL(SDICTRL, LED_CTRL) { \
	FDL_ASSERT(!((LED_CTRL) & ~((1 << SDICTRL_LED_CTRL_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_LED_CTRL_MASK) | (((unsigned long)(LED_CTRL)) << SDICTRL_LED_CTRL_SHIFT);\
}
#define SDICTRL_DAT_TRAN_WIDTH_SIZE	1
#define SDICTRL_DAT_TRAN_WIDTH_SHIFT	1
#define SDICTRL_DAT_TRAN_WIDTH_MASK	0x00000002
#define SDICTRL_GET_DAT_TRAN_WIDTH(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_DAT_TRAN_WIDTH_MASK) >> SDICTRL_DAT_TRAN_WIDTH_SHIFT)
#define SDICTRL_SET_DAT_TRAN_WIDTH(SDICTRL, DAT_TRAN_WIDTH) { \
	FDL_ASSERT(!((DAT_TRAN_WIDTH) & ~((1 << SDICTRL_DAT_TRAN_WIDTH_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_DAT_TRAN_WIDTH_MASK) | (((unsigned long)(DAT_TRAN_WIDTH)) << SDICTRL_DAT_TRAN_WIDTH_SHIFT);\
}
#define SDICTRL_HIGH_SPEED_EN_SIZE	1
#define SDICTRL_HIGH_SPEED_EN_SHIFT	2
#define SDICTRL_HIGH_SPEED_EN_MASK	0x00000004
#define SDICTRL_GET_HIGH_SPEED_EN(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_HIGH_SPEED_EN_MASK) >> SDICTRL_HIGH_SPEED_EN_SHIFT)
#define SDICTRL_SET_HIGH_SPEED_EN(SDICTRL, HIGH_SPEED_EN) { \
	FDL_ASSERT(!((HIGH_SPEED_EN) & ~((1 << SDICTRL_HIGH_SPEED_EN_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_HIGH_SPEED_EN_MASK) | (((unsigned long)(HIGH_SPEED_EN)) << SDICTRL_HIGH_SPEED_EN_SHIFT);\
}
#define SDICTRL_PAD0_SIZE	5
#define SDICTRL_PAD0_SHIFT	3
#define SDICTRL_PAD0_MASK	0x000000f8
#define SDICTRL_GET_PAD0(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_PAD0_MASK) >> SDICTRL_PAD0_SHIFT)
#define SDICTRL_SET_PAD0(SDICTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDICTRL_PAD0_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_PAD0_MASK) | (((unsigned long)(pad0)) << SDICTRL_PAD0_SHIFT);\
}
#define SDICTRL_SD_BUS_PWR_SIZE	1
#define SDICTRL_SD_BUS_PWR_SHIFT	8
#define SDICTRL_SD_BUS_PWR_MASK	0x00000100
#define SDICTRL_GET_SD_BUS_PWR(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_SD_BUS_PWR_MASK) >> SDICTRL_SD_BUS_PWR_SHIFT)
#define SDICTRL_SET_SD_BUS_PWR(SDICTRL, SD_BUS_PWR) { \
	FDL_ASSERT(!((SD_BUS_PWR) & ~((1 << SDICTRL_SD_BUS_PWR_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_SD_BUS_PWR_MASK) | (((unsigned long)(SD_BUS_PWR)) << SDICTRL_SD_BUS_PWR_SHIFT);\
}
#define SDICTRL_SD_BUS_VSEL_SIZE	3
#define SDICTRL_SD_BUS_VSEL_SHIFT	9
#define SDICTRL_SD_BUS_VSEL_MASK	0x00000e00
#define SDICTRL_GET_SD_BUS_VSEL(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_SD_BUS_VSEL_MASK) >> SDICTRL_SD_BUS_VSEL_SHIFT)
#define SDICTRL_SET_SD_BUS_VSEL(SDICTRL, SD_BUS_VSEL) { \
	FDL_ASSERT(!((SD_BUS_VSEL) & ~((1 << SDICTRL_SD_BUS_VSEL_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_SD_BUS_VSEL_MASK) | (((unsigned long)(SD_BUS_VSEL)) << SDICTRL_SD_BUS_VSEL_SHIFT);\
}
#define SDICTRL_PAD1_SIZE	4
#define SDICTRL_PAD1_SHIFT	12
#define SDICTRL_PAD1_MASK	0x0000f000
#define SDICTRL_GET_PAD1(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_PAD1_MASK) >> SDICTRL_PAD1_SHIFT)
#define SDICTRL_SET_PAD1(SDICTRL, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDICTRL_PAD1_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_PAD1_MASK) | (((unsigned long)(pad1)) << SDICTRL_PAD1_SHIFT);\
}
#define SDICTRL_BGAP_STOP_REQ_SIZE	1
#define SDICTRL_BGAP_STOP_REQ_SHIFT	16
#define SDICTRL_BGAP_STOP_REQ_MASK	0x00010000
#define SDICTRL_GET_BGAP_STOP_REQ(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_BGAP_STOP_REQ_MASK) >> SDICTRL_BGAP_STOP_REQ_SHIFT)
#define SDICTRL_SET_BGAP_STOP_REQ(SDICTRL, BGAP_STOP_REQ) { \
	FDL_ASSERT(!((BGAP_STOP_REQ) & ~((1 << SDICTRL_BGAP_STOP_REQ_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_BGAP_STOP_REQ_MASK) | (((unsigned long)(BGAP_STOP_REQ)) << SDICTRL_BGAP_STOP_REQ_SHIFT);\
}
#define SDICTRL_CONT_REQ_SIZE	1
#define SDICTRL_CONT_REQ_SHIFT	17
#define SDICTRL_CONT_REQ_MASK	0x00020000
#define SDICTRL_GET_CONT_REQ(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_CONT_REQ_MASK) >> SDICTRL_CONT_REQ_SHIFT)
#define SDICTRL_SET_CONT_REQ(SDICTRL, CONT_REQ) { \
	FDL_ASSERT(!((CONT_REQ) & ~((1 << SDICTRL_CONT_REQ_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_CONT_REQ_MASK) | (((unsigned long)(CONT_REQ)) << SDICTRL_CONT_REQ_SHIFT);\
}
#define SDICTRL_RW_CTRL_SIZE	1
#define SDICTRL_RW_CTRL_SHIFT	18
#define SDICTRL_RW_CTRL_MASK	0x00040000
#define SDICTRL_GET_RW_CTRL(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_RW_CTRL_MASK) >> SDICTRL_RW_CTRL_SHIFT)
#define SDICTRL_SET_RW_CTRL(SDICTRL, RW_CTRL) { \
	FDL_ASSERT(!((RW_CTRL) & ~((1 << SDICTRL_RW_CTRL_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_RW_CTRL_MASK) | (((unsigned long)(RW_CTRL)) << SDICTRL_RW_CTRL_SHIFT);\
}
#define SDICTRL_BGAP_INT_REQ_SIZE	1
#define SDICTRL_BGAP_INT_REQ_SHIFT	19
#define SDICTRL_BGAP_INT_REQ_MASK	0x00080000
#define SDICTRL_GET_BGAP_INT_REQ(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_BGAP_INT_REQ_MASK) >> SDICTRL_BGAP_INT_REQ_SHIFT)
#define SDICTRL_SET_BGAP_INT_REQ(SDICTRL, BGAP_INT_REQ) { \
	FDL_ASSERT(!((BGAP_INT_REQ) & ~((1 << SDICTRL_BGAP_INT_REQ_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_BGAP_INT_REQ_MASK) | (((unsigned long)(BGAP_INT_REQ)) << SDICTRL_BGAP_INT_REQ_SHIFT);\
}
#define SDICTRL_PAD2_SIZE	4
#define SDICTRL_PAD2_SHIFT	20
#define SDICTRL_PAD2_MASK	0x00f00000
#define SDICTRL_GET_PAD2(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_PAD2_MASK) >> SDICTRL_PAD2_SHIFT)
#define SDICTRL_SET_PAD2(SDICTRL, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << SDICTRL_PAD2_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_PAD2_MASK) | (((unsigned long)(pad2)) << SDICTRL_PAD2_SHIFT);\
}
#define SDICTRL_WAKE_CARD_INT_EN_SIZE	1
#define SDICTRL_WAKE_CARD_INT_EN_SHIFT	24
#define SDICTRL_WAKE_CARD_INT_EN_MASK	0x01000000
#define SDICTRL_GET_WAKE_CARD_INT_EN(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_WAKE_CARD_INT_EN_MASK) >> SDICTRL_WAKE_CARD_INT_EN_SHIFT)
#define SDICTRL_SET_WAKE_CARD_INT_EN(SDICTRL, WAKE_CARD_INT_EN) { \
	FDL_ASSERT(!((WAKE_CARD_INT_EN) & ~((1 << SDICTRL_WAKE_CARD_INT_EN_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_WAKE_CARD_INT_EN_MASK) | (((unsigned long)(WAKE_CARD_INT_EN)) << SDICTRL_WAKE_CARD_INT_EN_SHIFT);\
}
#define SDICTRL_WAKE_CARD_INS_EN_SIZE	1
#define SDICTRL_WAKE_CARD_INS_EN_SHIFT	25
#define SDICTRL_WAKE_CARD_INS_EN_MASK	0x02000000
#define SDICTRL_GET_WAKE_CARD_INS_EN(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_WAKE_CARD_INS_EN_MASK) >> SDICTRL_WAKE_CARD_INS_EN_SHIFT)
#define SDICTRL_SET_WAKE_CARD_INS_EN(SDICTRL, WAKE_CARD_INS_EN) { \
	FDL_ASSERT(!((WAKE_CARD_INS_EN) & ~((1 << SDICTRL_WAKE_CARD_INS_EN_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_WAKE_CARD_INS_EN_MASK) | (((unsigned long)(WAKE_CARD_INS_EN)) << SDICTRL_WAKE_CARD_INS_EN_SHIFT);\
}
#define SDICTRL_WAKE_CARD_REM_EN_SIZE	1
#define SDICTRL_WAKE_CARD_REM_EN_SHIFT	26
#define SDICTRL_WAKE_CARD_REM_EN_MASK	0x04000000
#define SDICTRL_GET_WAKE_CARD_REM_EN(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_WAKE_CARD_REM_EN_MASK) >> SDICTRL_WAKE_CARD_REM_EN_SHIFT)
#define SDICTRL_SET_WAKE_CARD_REM_EN(SDICTRL, WAKE_CARD_REM_EN) { \
	FDL_ASSERT(!((WAKE_CARD_REM_EN) & ~((1 << SDICTRL_WAKE_CARD_REM_EN_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_WAKE_CARD_REM_EN_MASK) | (((unsigned long)(WAKE_CARD_REM_EN)) << SDICTRL_WAKE_CARD_REM_EN_SHIFT);\
}
#define SDICTRL_PAD3_SIZE	5
#define SDICTRL_PAD3_SHIFT	27
#define SDICTRL_PAD3_MASK	0xf8000000
#define SDICTRL_GET_PAD3(SDICTRL) \
	((((unsigned long)(SDICTRL)) & SDICTRL_PAD3_MASK) >> SDICTRL_PAD3_SHIFT)
#define SDICTRL_SET_PAD3(SDICTRL, pad3) { \
	FDL_ASSERT(!((pad3) & ~((1 << SDICTRL_PAD3_SIZE)-1))); \
	SDICTRL = (((unsigned long)(SDICTRL)) & ~SDICTRL_PAD3_MASK) | (((unsigned long)(pad3)) << SDICTRL_PAD3_SHIFT);\
}
#define SDICTRL_TOTAL_SIZE	32
#define SDICTRL(LED_CTRL, DAT_TRAN_WIDTH, HIGH_SPEED_EN, SD_BUS_PWR, SD_BUS_VSEL, BGAP_STOP_REQ, CONT_REQ, RW_CTRL, BGAP_INT_REQ, WAKE_CARD_INT_EN, WAKE_CARD_INS_EN, WAKE_CARD_REM_EN) \
	((((unsigned long)(LED_CTRL)) << SDICTRL_LED_CTRL_SHIFT) | \
	 (((unsigned long)(DAT_TRAN_WIDTH)) << SDICTRL_DAT_TRAN_WIDTH_SHIFT) | \
	 (((unsigned long)(HIGH_SPEED_EN)) << SDICTRL_HIGH_SPEED_EN_SHIFT) | \
	 (((unsigned long)(SD_BUS_PWR)) << SDICTRL_SD_BUS_PWR_SHIFT) | \
	 (((unsigned long)(SD_BUS_VSEL)) << SDICTRL_SD_BUS_VSEL_SHIFT) | \
	 (((unsigned long)(BGAP_STOP_REQ)) << SDICTRL_BGAP_STOP_REQ_SHIFT) | \
	 (((unsigned long)(CONT_REQ)) << SDICTRL_CONT_REQ_SHIFT) | \
	 (((unsigned long)(RW_CTRL)) << SDICTRL_RW_CTRL_SHIFT) | \
	 (((unsigned long)(BGAP_INT_REQ)) << SDICTRL_BGAP_INT_REQ_SHIFT) | \
	 (((unsigned long)(WAKE_CARD_INT_EN)) << SDICTRL_WAKE_CARD_INT_EN_SHIFT) | \
	 (((unsigned long)(WAKE_CARD_INS_EN)) << SDICTRL_WAKE_CARD_INS_EN_SHIFT) | \
	 (((unsigned long)(WAKE_CARD_REM_EN)) << SDICTRL_WAKE_CARD_REM_EN_SHIFT))

/*
 *  SDICLKRST struct
 */
#define SDICLKRST_ICLK_EN_SIZE	1
#define SDICLKRST_ICLK_EN_SHIFT	0
#define SDICLKRST_ICLK_EN_MASK	0x00000001
#define SDICLKRST_GET_ICLK_EN(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_ICLK_EN_MASK) >> SDICLKRST_ICLK_EN_SHIFT)
#define SDICLKRST_SET_ICLK_EN(SDICLKRST, ICLK_EN) { \
	FDL_ASSERT(!((ICLK_EN) & ~((1 << SDICLKRST_ICLK_EN_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_ICLK_EN_MASK) | (((unsigned long)(ICLK_EN)) << SDICLKRST_ICLK_EN_SHIFT);\
}
#define SDICLKRST_ICLK_STBL_SIZE	1
#define SDICLKRST_ICLK_STBL_SHIFT	1
#define SDICLKRST_ICLK_STBL_MASK	0x00000002
#define SDICLKRST_GET_ICLK_STBL(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_ICLK_STBL_MASK) >> SDICLKRST_ICLK_STBL_SHIFT)
#define SDICLKRST_SET_ICLK_STBL(SDICLKRST, ICLK_STBL) { \
	FDL_ASSERT(!((ICLK_STBL) & ~((1 << SDICLKRST_ICLK_STBL_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_ICLK_STBL_MASK) | (((unsigned long)(ICLK_STBL)) << SDICLKRST_ICLK_STBL_SHIFT);\
}
#define SDICLKRST_SDCLK_EN_SIZE	1
#define SDICLKRST_SDCLK_EN_SHIFT	2
#define SDICLKRST_SDCLK_EN_MASK	0x00000004
#define SDICLKRST_GET_SDCLK_EN(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_SDCLK_EN_MASK) >> SDICLKRST_SDCLK_EN_SHIFT)
#define SDICLKRST_SET_SDCLK_EN(SDICLKRST, SDCLK_EN) { \
	FDL_ASSERT(!((SDCLK_EN) & ~((1 << SDICLKRST_SDCLK_EN_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_SDCLK_EN_MASK) | (((unsigned long)(SDCLK_EN)) << SDICLKRST_SDCLK_EN_SHIFT);\
}
#define SDICLKRST_PAD0_SIZE	5
#define SDICLKRST_PAD0_SHIFT	3
#define SDICLKRST_PAD0_MASK	0x000000f8
#define SDICLKRST_GET_PAD0(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_PAD0_MASK) >> SDICLKRST_PAD0_SHIFT)
#define SDICLKRST_SET_PAD0(SDICLKRST, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDICLKRST_PAD0_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_PAD0_MASK) | (((unsigned long)(pad0)) << SDICLKRST_PAD0_SHIFT);\
}
#define SDICLKRST_SDCLK_FREQ_SEL_SIZE	8
#define SDICLKRST_SDCLK_FREQ_SEL_SHIFT	8
#define SDICLKRST_SDCLK_FREQ_SEL_MASK	0x0000ff00
#define SDICLKRST_GET_SDCLK_FREQ_SEL(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_SDCLK_FREQ_SEL_MASK) >> SDICLKRST_SDCLK_FREQ_SEL_SHIFT)
#define SDICLKRST_SET_SDCLK_FREQ_SEL(SDICLKRST, SDCLK_FREQ_SEL) { \
	FDL_ASSERT(!((SDCLK_FREQ_SEL) & ~((1 << SDICLKRST_SDCLK_FREQ_SEL_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_SDCLK_FREQ_SEL_MASK) | (((unsigned long)(SDCLK_FREQ_SEL)) << SDICLKRST_SDCLK_FREQ_SEL_SHIFT);\
}
#define SDICLKRST_DTIMEOUT_CNT_VAL_SIZE	4
#define SDICLKRST_DTIMEOUT_CNT_VAL_SHIFT	16
#define SDICLKRST_DTIMEOUT_CNT_VAL_MASK	0x000f0000
#define SDICLKRST_GET_DTIMEOUT_CNT_VAL(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_DTIMEOUT_CNT_VAL_MASK) >> SDICLKRST_DTIMEOUT_CNT_VAL_SHIFT)
#define SDICLKRST_SET_DTIMEOUT_CNT_VAL(SDICLKRST, DTIMEOUT_CNT_VAL) { \
	FDL_ASSERT(!((DTIMEOUT_CNT_VAL) & ~((1 << SDICLKRST_DTIMEOUT_CNT_VAL_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_DTIMEOUT_CNT_VAL_MASK) | (((unsigned long)(DTIMEOUT_CNT_VAL)) << SDICLKRST_DTIMEOUT_CNT_VAL_SHIFT);\
}
#define SDICLKRST_PAD1_SIZE	4
#define SDICLKRST_PAD1_SHIFT	20
#define SDICLKRST_PAD1_MASK	0x00f00000
#define SDICLKRST_GET_PAD1(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_PAD1_MASK) >> SDICLKRST_PAD1_SHIFT)
#define SDICLKRST_SET_PAD1(SDICLKRST, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDICLKRST_PAD1_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_PAD1_MASK) | (((unsigned long)(pad1)) << SDICLKRST_PAD1_SHIFT);\
}
#define SDICLKRST_RST_ALL_SIZE	1
#define SDICLKRST_RST_ALL_SHIFT	24
#define SDICLKRST_RST_ALL_MASK	0x01000000
#define SDICLKRST_GET_RST_ALL(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_RST_ALL_MASK) >> SDICLKRST_RST_ALL_SHIFT)
#define SDICLKRST_SET_RST_ALL(SDICLKRST, RST_ALL) { \
	FDL_ASSERT(!((RST_ALL) & ~((1 << SDICLKRST_RST_ALL_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_RST_ALL_MASK) | (((unsigned long)(RST_ALL)) << SDICLKRST_RST_ALL_SHIFT);\
}
#define SDICLKRST_RST_CMD_LN_SIZE	1
#define SDICLKRST_RST_CMD_LN_SHIFT	25
#define SDICLKRST_RST_CMD_LN_MASK	0x02000000
#define SDICLKRST_GET_RST_CMD_LN(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_RST_CMD_LN_MASK) >> SDICLKRST_RST_CMD_LN_SHIFT)
#define SDICLKRST_SET_RST_CMD_LN(SDICLKRST, RST_CMD_LN) { \
	FDL_ASSERT(!((RST_CMD_LN) & ~((1 << SDICLKRST_RST_CMD_LN_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_RST_CMD_LN_MASK) | (((unsigned long)(RST_CMD_LN)) << SDICLKRST_RST_CMD_LN_SHIFT);\
}
#define SDICLKRST_RST_DAT_LN_SIZE	1
#define SDICLKRST_RST_DAT_LN_SHIFT	26
#define SDICLKRST_RST_DAT_LN_MASK	0x04000000
#define SDICLKRST_GET_RST_DAT_LN(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_RST_DAT_LN_MASK) >> SDICLKRST_RST_DAT_LN_SHIFT)
#define SDICLKRST_SET_RST_DAT_LN(SDICLKRST, RST_DAT_LN) { \
	FDL_ASSERT(!((RST_DAT_LN) & ~((1 << SDICLKRST_RST_DAT_LN_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_RST_DAT_LN_MASK) | (((unsigned long)(RST_DAT_LN)) << SDICLKRST_RST_DAT_LN_SHIFT);\
}
#define SDICLKRST_PAD2_SIZE	5
#define SDICLKRST_PAD2_SHIFT	27
#define SDICLKRST_PAD2_MASK	0xf8000000
#define SDICLKRST_GET_PAD2(SDICLKRST) \
	((((unsigned long)(SDICLKRST)) & SDICLKRST_PAD2_MASK) >> SDICLKRST_PAD2_SHIFT)
#define SDICLKRST_SET_PAD2(SDICLKRST, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << SDICLKRST_PAD2_SIZE)-1))); \
	SDICLKRST = (((unsigned long)(SDICLKRST)) & ~SDICLKRST_PAD2_MASK) | (((unsigned long)(pad2)) << SDICLKRST_PAD2_SHIFT);\
}
#define SDICLKRST_TOTAL_SIZE	32
#define SDICLKRST(ICLK_EN, ICLK_STBL, SDCLK_EN, SDCLK_FREQ_SEL, DTIMEOUT_CNT_VAL, RST_ALL, RST_CMD_LN, RST_DAT_LN) \
	((((unsigned long)(ICLK_EN)) << SDICLKRST_ICLK_EN_SHIFT) | \
	 (((unsigned long)(ICLK_STBL)) << SDICLKRST_ICLK_STBL_SHIFT) | \
	 (((unsigned long)(SDCLK_EN)) << SDICLKRST_SDCLK_EN_SHIFT) | \
	 (((unsigned long)(SDCLK_FREQ_SEL)) << SDICLKRST_SDCLK_FREQ_SEL_SHIFT) | \
	 (((unsigned long)(DTIMEOUT_CNT_VAL)) << SDICLKRST_DTIMEOUT_CNT_VAL_SHIFT) | \
	 (((unsigned long)(RST_ALL)) << SDICLKRST_RST_ALL_SHIFT) | \
	 (((unsigned long)(RST_CMD_LN)) << SDICLKRST_RST_CMD_LN_SHIFT) | \
	 (((unsigned long)(RST_DAT_LN)) << SDICLKRST_RST_DAT_LN_SHIFT))

/*
 *  SDIINTSTAT struct
 */
#define SDIINTSTAT_CMD_CMPLT_SIZE	1
#define SDIINTSTAT_CMD_CMPLT_SHIFT	0
#define SDIINTSTAT_CMD_CMPLT_MASK	0x00000001
#define SDIINTSTAT_GET_CMD_CMPLT(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CMD_CMPLT_MASK) >> SDIINTSTAT_CMD_CMPLT_SHIFT)
#define SDIINTSTAT_SET_CMD_CMPLT(SDIINTSTAT, CMD_CMPLT) { \
	FDL_ASSERT(!((CMD_CMPLT) & ~((1 << SDIINTSTAT_CMD_CMPLT_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CMD_CMPLT_MASK) | (((unsigned long)(CMD_CMPLT)) << SDIINTSTAT_CMD_CMPLT_SHIFT);\
}
#define SDIINTSTAT_TRAN_CMPLT_SIZE	1
#define SDIINTSTAT_TRAN_CMPLT_SHIFT	1
#define SDIINTSTAT_TRAN_CMPLT_MASK	0x00000002
#define SDIINTSTAT_GET_TRAN_CMPLT(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_TRAN_CMPLT_MASK) >> SDIINTSTAT_TRAN_CMPLT_SHIFT)
#define SDIINTSTAT_SET_TRAN_CMPLT(SDIINTSTAT, TRAN_CMPLT) { \
	FDL_ASSERT(!((TRAN_CMPLT) & ~((1 << SDIINTSTAT_TRAN_CMPLT_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_TRAN_CMPLT_MASK) | (((unsigned long)(TRAN_CMPLT)) << SDIINTSTAT_TRAN_CMPLT_SHIFT);\
}
#define SDIINTSTAT_BGAP_EVT_SIZE	1
#define SDIINTSTAT_BGAP_EVT_SHIFT	2
#define SDIINTSTAT_BGAP_EVT_MASK	0x00000004
#define SDIINTSTAT_GET_BGAP_EVT(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_BGAP_EVT_MASK) >> SDIINTSTAT_BGAP_EVT_SHIFT)
#define SDIINTSTAT_SET_BGAP_EVT(SDIINTSTAT, BGAP_EVT) { \
	FDL_ASSERT(!((BGAP_EVT) & ~((1 << SDIINTSTAT_BGAP_EVT_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_BGAP_EVT_MASK) | (((unsigned long)(BGAP_EVT)) << SDIINTSTAT_BGAP_EVT_SHIFT);\
}
#define SDIINTSTAT_DMA_INT_SIZE	1
#define SDIINTSTAT_DMA_INT_SHIFT	3
#define SDIINTSTAT_DMA_INT_MASK	0x00000008
#define SDIINTSTAT_GET_DMA_INT(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_DMA_INT_MASK) >> SDIINTSTAT_DMA_INT_SHIFT)
#define SDIINTSTAT_SET_DMA_INT(SDIINTSTAT, DMA_INT) { \
	FDL_ASSERT(!((DMA_INT) & ~((1 << SDIINTSTAT_DMA_INT_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_DMA_INT_MASK) | (((unsigned long)(DMA_INT)) << SDIINTSTAT_DMA_INT_SHIFT);\
}
#define SDIINTSTAT_BUFW_RDY_SIZE	1
#define SDIINTSTAT_BUFW_RDY_SHIFT	4
#define SDIINTSTAT_BUFW_RDY_MASK	0x00000010
#define SDIINTSTAT_GET_BUFW_RDY(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_BUFW_RDY_MASK) >> SDIINTSTAT_BUFW_RDY_SHIFT)
#define SDIINTSTAT_SET_BUFW_RDY(SDIINTSTAT, BUFW_RDY) { \
	FDL_ASSERT(!((BUFW_RDY) & ~((1 << SDIINTSTAT_BUFW_RDY_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_BUFW_RDY_MASK) | (((unsigned long)(BUFW_RDY)) << SDIINTSTAT_BUFW_RDY_SHIFT);\
}
#define SDIINTSTAT_BUFR_RDY_SIZE	1
#define SDIINTSTAT_BUFR_RDY_SHIFT	5
#define SDIINTSTAT_BUFR_RDY_MASK	0x00000020
#define SDIINTSTAT_GET_BUFR_RDY(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_BUFR_RDY_MASK) >> SDIINTSTAT_BUFR_RDY_SHIFT)
#define SDIINTSTAT_SET_BUFR_RDY(SDIINTSTAT, BUFR_RDY) { \
	FDL_ASSERT(!((BUFR_RDY) & ~((1 << SDIINTSTAT_BUFR_RDY_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_BUFR_RDY_MASK) | (((unsigned long)(BUFR_RDY)) << SDIINTSTAT_BUFR_RDY_SHIFT);\
}
#define SDIINTSTAT_CARD_INS_SIZE	1
#define SDIINTSTAT_CARD_INS_SHIFT	6
#define SDIINTSTAT_CARD_INS_MASK	0x00000040
#define SDIINTSTAT_GET_CARD_INS(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CARD_INS_MASK) >> SDIINTSTAT_CARD_INS_SHIFT)
#define SDIINTSTAT_SET_CARD_INS(SDIINTSTAT, CARD_INS) { \
	FDL_ASSERT(!((CARD_INS) & ~((1 << SDIINTSTAT_CARD_INS_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CARD_INS_MASK) | (((unsigned long)(CARD_INS)) << SDIINTSTAT_CARD_INS_SHIFT);\
}
#define SDIINTSTAT_CARD_REM_SIZE	1
#define SDIINTSTAT_CARD_REM_SHIFT	7
#define SDIINTSTAT_CARD_REM_MASK	0x00000080
#define SDIINTSTAT_GET_CARD_REM(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CARD_REM_MASK) >> SDIINTSTAT_CARD_REM_SHIFT)
#define SDIINTSTAT_SET_CARD_REM(SDIINTSTAT, CARD_REM) { \
	FDL_ASSERT(!((CARD_REM) & ~((1 << SDIINTSTAT_CARD_REM_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CARD_REM_MASK) | (((unsigned long)(CARD_REM)) << SDIINTSTAT_CARD_REM_SHIFT);\
}
#define SDIINTSTAT_CARD_INT_SIZE	1
#define SDIINTSTAT_CARD_INT_SHIFT	8
#define SDIINTSTAT_CARD_INT_MASK	0x00000100
#define SDIINTSTAT_GET_CARD_INT(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CARD_INT_MASK) >> SDIINTSTAT_CARD_INT_SHIFT)
#define SDIINTSTAT_SET_CARD_INT(SDIINTSTAT, CARD_INT) { \
	FDL_ASSERT(!((CARD_INT) & ~((1 << SDIINTSTAT_CARD_INT_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CARD_INT_MASK) | (((unsigned long)(CARD_INT)) << SDIINTSTAT_CARD_INT_SHIFT);\
}
#define SDIINTSTAT_PAD0_SIZE	6
#define SDIINTSTAT_PAD0_SHIFT	9
#define SDIINTSTAT_PAD0_MASK	0x00007e00
#define SDIINTSTAT_GET_PAD0(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_PAD0_MASK) >> SDIINTSTAT_PAD0_SHIFT)
#define SDIINTSTAT_SET_PAD0(SDIINTSTAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIINTSTAT_PAD0_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_PAD0_MASK) | (((unsigned long)(pad0)) << SDIINTSTAT_PAD0_SHIFT);\
}
#define SDIINTSTAT_ERR_INT_SIZE	1
#define SDIINTSTAT_ERR_INT_SHIFT	15
#define SDIINTSTAT_ERR_INT_MASK	0x00008000
#define SDIINTSTAT_GET_ERR_INT(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_ERR_INT_MASK) >> SDIINTSTAT_ERR_INT_SHIFT)
#define SDIINTSTAT_SET_ERR_INT(SDIINTSTAT, ERR_INT) { \
	FDL_ASSERT(!((ERR_INT) & ~((1 << SDIINTSTAT_ERR_INT_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_ERR_INT_MASK) | (((unsigned long)(ERR_INT)) << SDIINTSTAT_ERR_INT_SHIFT);\
}
#define SDIINTSTAT_CMD_TIMEOUT_ERR_SIZE	1
#define SDIINTSTAT_CMD_TIMEOUT_ERR_SHIFT	16
#define SDIINTSTAT_CMD_TIMEOUT_ERR_MASK	0x00010000
#define SDIINTSTAT_GET_CMD_TIMEOUT_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CMD_TIMEOUT_ERR_MASK) >> SDIINTSTAT_CMD_TIMEOUT_ERR_SHIFT)
#define SDIINTSTAT_SET_CMD_TIMEOUT_ERR(SDIINTSTAT, CMD_TIMEOUT_ERR) { \
	FDL_ASSERT(!((CMD_TIMEOUT_ERR) & ~((1 << SDIINTSTAT_CMD_TIMEOUT_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CMD_TIMEOUT_ERR_MASK) | (((unsigned long)(CMD_TIMEOUT_ERR)) << SDIINTSTAT_CMD_TIMEOUT_ERR_SHIFT);\
}
#define SDIINTSTAT_CMD_CRC_ERR_SIZE	1
#define SDIINTSTAT_CMD_CRC_ERR_SHIFT	17
#define SDIINTSTAT_CMD_CRC_ERR_MASK	0x00020000
#define SDIINTSTAT_GET_CMD_CRC_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CMD_CRC_ERR_MASK) >> SDIINTSTAT_CMD_CRC_ERR_SHIFT)
#define SDIINTSTAT_SET_CMD_CRC_ERR(SDIINTSTAT, CMD_CRC_ERR) { \
	FDL_ASSERT(!((CMD_CRC_ERR) & ~((1 << SDIINTSTAT_CMD_CRC_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CMD_CRC_ERR_MASK) | (((unsigned long)(CMD_CRC_ERR)) << SDIINTSTAT_CMD_CRC_ERR_SHIFT);\
}
#define SDIINTSTAT_CMD_EBIT_ERR_SIZE	1
#define SDIINTSTAT_CMD_EBIT_ERR_SHIFT	18
#define SDIINTSTAT_CMD_EBIT_ERR_MASK	0x00040000
#define SDIINTSTAT_GET_CMD_EBIT_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CMD_EBIT_ERR_MASK) >> SDIINTSTAT_CMD_EBIT_ERR_SHIFT)
#define SDIINTSTAT_SET_CMD_EBIT_ERR(SDIINTSTAT, CMD_EBIT_ERR) { \
	FDL_ASSERT(!((CMD_EBIT_ERR) & ~((1 << SDIINTSTAT_CMD_EBIT_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CMD_EBIT_ERR_MASK) | (((unsigned long)(CMD_EBIT_ERR)) << SDIINTSTAT_CMD_EBIT_ERR_SHIFT);\
}
#define SDIINTSTAT_CMD_IDX_ERR_SIZE	1
#define SDIINTSTAT_CMD_IDX_ERR_SHIFT	19
#define SDIINTSTAT_CMD_IDX_ERR_MASK	0x00080000
#define SDIINTSTAT_GET_CMD_IDX_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CMD_IDX_ERR_MASK) >> SDIINTSTAT_CMD_IDX_ERR_SHIFT)
#define SDIINTSTAT_SET_CMD_IDX_ERR(SDIINTSTAT, CMD_IDX_ERR) { \
	FDL_ASSERT(!((CMD_IDX_ERR) & ~((1 << SDIINTSTAT_CMD_IDX_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CMD_IDX_ERR_MASK) | (((unsigned long)(CMD_IDX_ERR)) << SDIINTSTAT_CMD_IDX_ERR_SHIFT);\
}
#define SDIINTSTAT_DAT_TIMEOUT_ERR_SIZE	1
#define SDIINTSTAT_DAT_TIMEOUT_ERR_SHIFT	20
#define SDIINTSTAT_DAT_TIMEOUT_ERR_MASK	0x00100000
#define SDIINTSTAT_GET_DAT_TIMEOUT_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_DAT_TIMEOUT_ERR_MASK) >> SDIINTSTAT_DAT_TIMEOUT_ERR_SHIFT)
#define SDIINTSTAT_SET_DAT_TIMEOUT_ERR(SDIINTSTAT, DAT_TIMEOUT_ERR) { \
	FDL_ASSERT(!((DAT_TIMEOUT_ERR) & ~((1 << SDIINTSTAT_DAT_TIMEOUT_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_DAT_TIMEOUT_ERR_MASK) | (((unsigned long)(DAT_TIMEOUT_ERR)) << SDIINTSTAT_DAT_TIMEOUT_ERR_SHIFT);\
}
#define SDIINTSTAT_DAT_CRC_ERR_SIZE	1
#define SDIINTSTAT_DAT_CRC_ERR_SHIFT	21
#define SDIINTSTAT_DAT_CRC_ERR_MASK	0x00200000
#define SDIINTSTAT_GET_DAT_CRC_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_DAT_CRC_ERR_MASK) >> SDIINTSTAT_DAT_CRC_ERR_SHIFT)
#define SDIINTSTAT_SET_DAT_CRC_ERR(SDIINTSTAT, DAT_CRC_ERR) { \
	FDL_ASSERT(!((DAT_CRC_ERR) & ~((1 << SDIINTSTAT_DAT_CRC_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_DAT_CRC_ERR_MASK) | (((unsigned long)(DAT_CRC_ERR)) << SDIINTSTAT_DAT_CRC_ERR_SHIFT);\
}
#define SDIINTSTAT_DAT_EBIT_ERR_SIZE	1
#define SDIINTSTAT_DAT_EBIT_ERR_SHIFT	22
#define SDIINTSTAT_DAT_EBIT_ERR_MASK	0x00400000
#define SDIINTSTAT_GET_DAT_EBIT_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_DAT_EBIT_ERR_MASK) >> SDIINTSTAT_DAT_EBIT_ERR_SHIFT)
#define SDIINTSTAT_SET_DAT_EBIT_ERR(SDIINTSTAT, DAT_EBIT_ERR) { \
	FDL_ASSERT(!((DAT_EBIT_ERR) & ~((1 << SDIINTSTAT_DAT_EBIT_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_DAT_EBIT_ERR_MASK) | (((unsigned long)(DAT_EBIT_ERR)) << SDIINTSTAT_DAT_EBIT_ERR_SHIFT);\
}
#define SDIINTSTAT_CUR_LIM_ERR_SIZE	1
#define SDIINTSTAT_CUR_LIM_ERR_SHIFT	23
#define SDIINTSTAT_CUR_LIM_ERR_MASK	0x00800000
#define SDIINTSTAT_GET_CUR_LIM_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_CUR_LIM_ERR_MASK) >> SDIINTSTAT_CUR_LIM_ERR_SHIFT)
#define SDIINTSTAT_SET_CUR_LIM_ERR(SDIINTSTAT, CUR_LIM_ERR) { \
	FDL_ASSERT(!((CUR_LIM_ERR) & ~((1 << SDIINTSTAT_CUR_LIM_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_CUR_LIM_ERR_MASK) | (((unsigned long)(CUR_LIM_ERR)) << SDIINTSTAT_CUR_LIM_ERR_SHIFT);\
}
#define SDIINTSTAT_ACMD12_ERR_SIZE	1
#define SDIINTSTAT_ACMD12_ERR_SHIFT	24
#define SDIINTSTAT_ACMD12_ERR_MASK	0x01000000
#define SDIINTSTAT_GET_ACMD12_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_ACMD12_ERR_MASK) >> SDIINTSTAT_ACMD12_ERR_SHIFT)
#define SDIINTSTAT_SET_ACMD12_ERR(SDIINTSTAT, ACMD12_ERR) { \
	FDL_ASSERT(!((ACMD12_ERR) & ~((1 << SDIINTSTAT_ACMD12_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_ACMD12_ERR_MASK) | (((unsigned long)(ACMD12_ERR)) << SDIINTSTAT_ACMD12_ERR_SHIFT);\
}
#define SDIINTSTAT_PAD1_SIZE	3
#define SDIINTSTAT_PAD1_SHIFT	25
#define SDIINTSTAT_PAD1_MASK	0x0e000000
#define SDIINTSTAT_GET_PAD1(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_PAD1_MASK) >> SDIINTSTAT_PAD1_SHIFT)
#define SDIINTSTAT_SET_PAD1(SDIINTSTAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDIINTSTAT_PAD1_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_PAD1_MASK) | (((unsigned long)(pad1)) << SDIINTSTAT_PAD1_SHIFT);\
}
#define SDIINTSTAT_VEND_SPEC_ERR_SIZE	4
#define SDIINTSTAT_VEND_SPEC_ERR_SHIFT	28
#define SDIINTSTAT_VEND_SPEC_ERR_MASK	0xf0000000
#define SDIINTSTAT_GET_VEND_SPEC_ERR(SDIINTSTAT) \
	((((unsigned long)(SDIINTSTAT)) & SDIINTSTAT_VEND_SPEC_ERR_MASK) >> SDIINTSTAT_VEND_SPEC_ERR_SHIFT)
#define SDIINTSTAT_SET_VEND_SPEC_ERR(SDIINTSTAT, VEND_SPEC_ERR) { \
	FDL_ASSERT(!((VEND_SPEC_ERR) & ~((1 << SDIINTSTAT_VEND_SPEC_ERR_SIZE)-1))); \
	SDIINTSTAT = (((unsigned long)(SDIINTSTAT)) & ~SDIINTSTAT_VEND_SPEC_ERR_MASK) | (((unsigned long)(VEND_SPEC_ERR)) << SDIINTSTAT_VEND_SPEC_ERR_SHIFT);\
}
#define SDIINTSTAT_TOTAL_SIZE	32
#define SDIINTSTAT(CMD_CMPLT, TRAN_CMPLT, BGAP_EVT, DMA_INT, BUFW_RDY, BUFR_RDY, CARD_INS, CARD_REM, CARD_INT, ERR_INT, CMD_TIMEOUT_ERR, CMD_CRC_ERR, CMD_EBIT_ERR, CMD_IDX_ERR, DAT_TIMEOUT_ERR, DAT_CRC_ERR, DAT_EBIT_ERR, CUR_LIM_ERR, ACMD12_ERR, VEND_SPEC_ERR) \
	((((unsigned long)(CMD_CMPLT)) << SDIINTSTAT_CMD_CMPLT_SHIFT) | \
	 (((unsigned long)(TRAN_CMPLT)) << SDIINTSTAT_TRAN_CMPLT_SHIFT) | \
	 (((unsigned long)(BGAP_EVT)) << SDIINTSTAT_BGAP_EVT_SHIFT) | \
	 (((unsigned long)(DMA_INT)) << SDIINTSTAT_DMA_INT_SHIFT) | \
	 (((unsigned long)(BUFW_RDY)) << SDIINTSTAT_BUFW_RDY_SHIFT) | \
	 (((unsigned long)(BUFR_RDY)) << SDIINTSTAT_BUFR_RDY_SHIFT) | \
	 (((unsigned long)(CARD_INS)) << SDIINTSTAT_CARD_INS_SHIFT) | \
	 (((unsigned long)(CARD_REM)) << SDIINTSTAT_CARD_REM_SHIFT) | \
	 (((unsigned long)(CARD_INT)) << SDIINTSTAT_CARD_INT_SHIFT) | \
	 (((unsigned long)(ERR_INT)) << SDIINTSTAT_ERR_INT_SHIFT) | \
	 (((unsigned long)(CMD_TIMEOUT_ERR)) << SDIINTSTAT_CMD_TIMEOUT_ERR_SHIFT) | \
	 (((unsigned long)(CMD_CRC_ERR)) << SDIINTSTAT_CMD_CRC_ERR_SHIFT) | \
	 (((unsigned long)(CMD_EBIT_ERR)) << SDIINTSTAT_CMD_EBIT_ERR_SHIFT) | \
	 (((unsigned long)(CMD_IDX_ERR)) << SDIINTSTAT_CMD_IDX_ERR_SHIFT) | \
	 (((unsigned long)(DAT_TIMEOUT_ERR)) << SDIINTSTAT_DAT_TIMEOUT_ERR_SHIFT) | \
	 (((unsigned long)(DAT_CRC_ERR)) << SDIINTSTAT_DAT_CRC_ERR_SHIFT) | \
	 (((unsigned long)(DAT_EBIT_ERR)) << SDIINTSTAT_DAT_EBIT_ERR_SHIFT) | \
	 (((unsigned long)(CUR_LIM_ERR)) << SDIINTSTAT_CUR_LIM_ERR_SHIFT) | \
	 (((unsigned long)(ACMD12_ERR)) << SDIINTSTAT_ACMD12_ERR_SHIFT) | \
	 (((unsigned long)(VEND_SPEC_ERR)) << SDIINTSTAT_VEND_SPEC_ERR_SHIFT))

/*
 *  SDIINTSTATEN struct
 */
#define SDIINTSTATEN_CMD_CMPLT_EN_SIZE	1
#define SDIINTSTATEN_CMD_CMPLT_EN_SHIFT	0
#define SDIINTSTATEN_CMD_CMPLT_EN_MASK	0x00000001
#define SDIINTSTATEN_GET_CMD_CMPLT_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CMD_CMPLT_EN_MASK) >> SDIINTSTATEN_CMD_CMPLT_EN_SHIFT)
#define SDIINTSTATEN_SET_CMD_CMPLT_EN(SDIINTSTATEN, CMD_CMPLT_EN) { \
	FDL_ASSERT(!((CMD_CMPLT_EN) & ~((1 << SDIINTSTATEN_CMD_CMPLT_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CMD_CMPLT_EN_MASK) | (((unsigned long)(CMD_CMPLT_EN)) << SDIINTSTATEN_CMD_CMPLT_EN_SHIFT);\
}
#define SDIINTSTATEN_TRAN_CMPLT_EN_SIZE	1
#define SDIINTSTATEN_TRAN_CMPLT_EN_SHIFT	1
#define SDIINTSTATEN_TRAN_CMPLT_EN_MASK	0x00000002
#define SDIINTSTATEN_GET_TRAN_CMPLT_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_TRAN_CMPLT_EN_MASK) >> SDIINTSTATEN_TRAN_CMPLT_EN_SHIFT)
#define SDIINTSTATEN_SET_TRAN_CMPLT_EN(SDIINTSTATEN, TRAN_CMPLT_EN) { \
	FDL_ASSERT(!((TRAN_CMPLT_EN) & ~((1 << SDIINTSTATEN_TRAN_CMPLT_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_TRAN_CMPLT_EN_MASK) | (((unsigned long)(TRAN_CMPLT_EN)) << SDIINTSTATEN_TRAN_CMPLT_EN_SHIFT);\
}
#define SDIINTSTATEN_BGAP_EVT_EN_SIZE	1
#define SDIINTSTATEN_BGAP_EVT_EN_SHIFT	2
#define SDIINTSTATEN_BGAP_EVT_EN_MASK	0x00000004
#define SDIINTSTATEN_GET_BGAP_EVT_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_BGAP_EVT_EN_MASK) >> SDIINTSTATEN_BGAP_EVT_EN_SHIFT)
#define SDIINTSTATEN_SET_BGAP_EVT_EN(SDIINTSTATEN, BGAP_EVT_EN) { \
	FDL_ASSERT(!((BGAP_EVT_EN) & ~((1 << SDIINTSTATEN_BGAP_EVT_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_BGAP_EVT_EN_MASK) | (((unsigned long)(BGAP_EVT_EN)) << SDIINTSTATEN_BGAP_EVT_EN_SHIFT);\
}
#define SDIINTSTATEN_DMA_INT_EN_SIZE	1
#define SDIINTSTATEN_DMA_INT_EN_SHIFT	3
#define SDIINTSTATEN_DMA_INT_EN_MASK	0x00000008
#define SDIINTSTATEN_GET_DMA_INT_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_DMA_INT_EN_MASK) >> SDIINTSTATEN_DMA_INT_EN_SHIFT)
#define SDIINTSTATEN_SET_DMA_INT_EN(SDIINTSTATEN, DMA_INT_EN) { \
	FDL_ASSERT(!((DMA_INT_EN) & ~((1 << SDIINTSTATEN_DMA_INT_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_DMA_INT_EN_MASK) | (((unsigned long)(DMA_INT_EN)) << SDIINTSTATEN_DMA_INT_EN_SHIFT);\
}
#define SDIINTSTATEN_BUFW_RDY_EN_SIZE	1
#define SDIINTSTATEN_BUFW_RDY_EN_SHIFT	4
#define SDIINTSTATEN_BUFW_RDY_EN_MASK	0x00000010
#define SDIINTSTATEN_GET_BUFW_RDY_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_BUFW_RDY_EN_MASK) >> SDIINTSTATEN_BUFW_RDY_EN_SHIFT)
#define SDIINTSTATEN_SET_BUFW_RDY_EN(SDIINTSTATEN, BUFW_RDY_EN) { \
	FDL_ASSERT(!((BUFW_RDY_EN) & ~((1 << SDIINTSTATEN_BUFW_RDY_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_BUFW_RDY_EN_MASK) | (((unsigned long)(BUFW_RDY_EN)) << SDIINTSTATEN_BUFW_RDY_EN_SHIFT);\
}
#define SDIINTSTATEN_BUFR_RDY_EN_SIZE	1
#define SDIINTSTATEN_BUFR_RDY_EN_SHIFT	5
#define SDIINTSTATEN_BUFR_RDY_EN_MASK	0x00000020
#define SDIINTSTATEN_GET_BUFR_RDY_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_BUFR_RDY_EN_MASK) >> SDIINTSTATEN_BUFR_RDY_EN_SHIFT)
#define SDIINTSTATEN_SET_BUFR_RDY_EN(SDIINTSTATEN, BUFR_RDY_EN) { \
	FDL_ASSERT(!((BUFR_RDY_EN) & ~((1 << SDIINTSTATEN_BUFR_RDY_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_BUFR_RDY_EN_MASK) | (((unsigned long)(BUFR_RDY_EN)) << SDIINTSTATEN_BUFR_RDY_EN_SHIFT);\
}
#define SDIINTSTATEN_CARD_INS_EN_SIZE	1
#define SDIINTSTATEN_CARD_INS_EN_SHIFT	6
#define SDIINTSTATEN_CARD_INS_EN_MASK	0x00000040
#define SDIINTSTATEN_GET_CARD_INS_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CARD_INS_EN_MASK) >> SDIINTSTATEN_CARD_INS_EN_SHIFT)
#define SDIINTSTATEN_SET_CARD_INS_EN(SDIINTSTATEN, CARD_INS_EN) { \
	FDL_ASSERT(!((CARD_INS_EN) & ~((1 << SDIINTSTATEN_CARD_INS_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CARD_INS_EN_MASK) | (((unsigned long)(CARD_INS_EN)) << SDIINTSTATEN_CARD_INS_EN_SHIFT);\
}
#define SDIINTSTATEN_CARD_REM_EN_SIZE	1
#define SDIINTSTATEN_CARD_REM_EN_SHIFT	7
#define SDIINTSTATEN_CARD_REM_EN_MASK	0x00000080
#define SDIINTSTATEN_GET_CARD_REM_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CARD_REM_EN_MASK) >> SDIINTSTATEN_CARD_REM_EN_SHIFT)
#define SDIINTSTATEN_SET_CARD_REM_EN(SDIINTSTATEN, CARD_REM_EN) { \
	FDL_ASSERT(!((CARD_REM_EN) & ~((1 << SDIINTSTATEN_CARD_REM_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CARD_REM_EN_MASK) | (((unsigned long)(CARD_REM_EN)) << SDIINTSTATEN_CARD_REM_EN_SHIFT);\
}
#define SDIINTSTATEN_CARD_INT_EN_SIZE	1
#define SDIINTSTATEN_CARD_INT_EN_SHIFT	8
#define SDIINTSTATEN_CARD_INT_EN_MASK	0x00000100
#define SDIINTSTATEN_GET_CARD_INT_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CARD_INT_EN_MASK) >> SDIINTSTATEN_CARD_INT_EN_SHIFT)
#define SDIINTSTATEN_SET_CARD_INT_EN(SDIINTSTATEN, CARD_INT_EN) { \
	FDL_ASSERT(!((CARD_INT_EN) & ~((1 << SDIINTSTATEN_CARD_INT_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CARD_INT_EN_MASK) | (((unsigned long)(CARD_INT_EN)) << SDIINTSTATEN_CARD_INT_EN_SHIFT);\
}
#define SDIINTSTATEN_PAD0_SIZE	7
#define SDIINTSTATEN_PAD0_SHIFT	9
#define SDIINTSTATEN_PAD0_MASK	0x0000fe00
#define SDIINTSTATEN_GET_PAD0(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_PAD0_MASK) >> SDIINTSTATEN_PAD0_SHIFT)
#define SDIINTSTATEN_SET_PAD0(SDIINTSTATEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIINTSTATEN_PAD0_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_PAD0_MASK) | (((unsigned long)(pad0)) << SDIINTSTATEN_PAD0_SHIFT);\
}
#define SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_SIZE	1
#define SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_SHIFT	16
#define SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_MASK	0x00010000
#define SDIINTSTATEN_GET_CMD_TIMEOUT_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_MASK) >> SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_CMD_TIMEOUT_ERR_EN(SDIINTSTATEN, CMD_TIMEOUT_ERR_EN) { \
	FDL_ASSERT(!((CMD_TIMEOUT_ERR_EN) & ~((1 << SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_MASK) | (((unsigned long)(CMD_TIMEOUT_ERR_EN)) << SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_CMD_CRC_ERR_EN_SIZE	1
#define SDIINTSTATEN_CMD_CRC_ERR_EN_SHIFT	17
#define SDIINTSTATEN_CMD_CRC_ERR_EN_MASK	0x00020000
#define SDIINTSTATEN_GET_CMD_CRC_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CMD_CRC_ERR_EN_MASK) >> SDIINTSTATEN_CMD_CRC_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_CMD_CRC_ERR_EN(SDIINTSTATEN, CMD_CRC_ERR_EN) { \
	FDL_ASSERT(!((CMD_CRC_ERR_EN) & ~((1 << SDIINTSTATEN_CMD_CRC_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CMD_CRC_ERR_EN_MASK) | (((unsigned long)(CMD_CRC_ERR_EN)) << SDIINTSTATEN_CMD_CRC_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_CMD_EBIT_ERR_EN_SIZE	1
#define SDIINTSTATEN_CMD_EBIT_ERR_EN_SHIFT	18
#define SDIINTSTATEN_CMD_EBIT_ERR_EN_MASK	0x00040000
#define SDIINTSTATEN_GET_CMD_EBIT_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CMD_EBIT_ERR_EN_MASK) >> SDIINTSTATEN_CMD_EBIT_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_CMD_EBIT_ERR_EN(SDIINTSTATEN, CMD_EBIT_ERR_EN) { \
	FDL_ASSERT(!((CMD_EBIT_ERR_EN) & ~((1 << SDIINTSTATEN_CMD_EBIT_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CMD_EBIT_ERR_EN_MASK) | (((unsigned long)(CMD_EBIT_ERR_EN)) << SDIINTSTATEN_CMD_EBIT_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_CMD_IDX_ERR_EN_SIZE	1
#define SDIINTSTATEN_CMD_IDX_ERR_EN_SHIFT	19
#define SDIINTSTATEN_CMD_IDX_ERR_EN_MASK	0x00080000
#define SDIINTSTATEN_GET_CMD_IDX_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CMD_IDX_ERR_EN_MASK) >> SDIINTSTATEN_CMD_IDX_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_CMD_IDX_ERR_EN(SDIINTSTATEN, CMD_IDX_ERR_EN) { \
	FDL_ASSERT(!((CMD_IDX_ERR_EN) & ~((1 << SDIINTSTATEN_CMD_IDX_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CMD_IDX_ERR_EN_MASK) | (((unsigned long)(CMD_IDX_ERR_EN)) << SDIINTSTATEN_CMD_IDX_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_SIZE	1
#define SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_SHIFT	20
#define SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_MASK	0x00100000
#define SDIINTSTATEN_GET_DAT_TIMEOUT_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_MASK) >> SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_DAT_TIMEOUT_ERR_EN(SDIINTSTATEN, DAT_TIMEOUT_ERR_EN) { \
	FDL_ASSERT(!((DAT_TIMEOUT_ERR_EN) & ~((1 << SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_MASK) | (((unsigned long)(DAT_TIMEOUT_ERR_EN)) << SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_DAT_CRC_ERR_EN_SIZE	1
#define SDIINTSTATEN_DAT_CRC_ERR_EN_SHIFT	21
#define SDIINTSTATEN_DAT_CRC_ERR_EN_MASK	0x00200000
#define SDIINTSTATEN_GET_DAT_CRC_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_DAT_CRC_ERR_EN_MASK) >> SDIINTSTATEN_DAT_CRC_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_DAT_CRC_ERR_EN(SDIINTSTATEN, DAT_CRC_ERR_EN) { \
	FDL_ASSERT(!((DAT_CRC_ERR_EN) & ~((1 << SDIINTSTATEN_DAT_CRC_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_DAT_CRC_ERR_EN_MASK) | (((unsigned long)(DAT_CRC_ERR_EN)) << SDIINTSTATEN_DAT_CRC_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_DAT_EBIT_ERR_EN_SIZE	1
#define SDIINTSTATEN_DAT_EBIT_ERR_EN_SHIFT	22
#define SDIINTSTATEN_DAT_EBIT_ERR_EN_MASK	0x00400000
#define SDIINTSTATEN_GET_DAT_EBIT_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_DAT_EBIT_ERR_EN_MASK) >> SDIINTSTATEN_DAT_EBIT_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_DAT_EBIT_ERR_EN(SDIINTSTATEN, DAT_EBIT_ERR_EN) { \
	FDL_ASSERT(!((DAT_EBIT_ERR_EN) & ~((1 << SDIINTSTATEN_DAT_EBIT_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_DAT_EBIT_ERR_EN_MASK) | (((unsigned long)(DAT_EBIT_ERR_EN)) << SDIINTSTATEN_DAT_EBIT_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_CUR_LIM_ERR_EN_SIZE	1
#define SDIINTSTATEN_CUR_LIM_ERR_EN_SHIFT	23
#define SDIINTSTATEN_CUR_LIM_ERR_EN_MASK	0x00800000
#define SDIINTSTATEN_GET_CUR_LIM_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_CUR_LIM_ERR_EN_MASK) >> SDIINTSTATEN_CUR_LIM_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_CUR_LIM_ERR_EN(SDIINTSTATEN, CUR_LIM_ERR_EN) { \
	FDL_ASSERT(!((CUR_LIM_ERR_EN) & ~((1 << SDIINTSTATEN_CUR_LIM_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_CUR_LIM_ERR_EN_MASK) | (((unsigned long)(CUR_LIM_ERR_EN)) << SDIINTSTATEN_CUR_LIM_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_ACMD12_ERR_EN_SIZE	1
#define SDIINTSTATEN_ACMD12_ERR_EN_SHIFT	24
#define SDIINTSTATEN_ACMD12_ERR_EN_MASK	0x01000000
#define SDIINTSTATEN_GET_ACMD12_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_ACMD12_ERR_EN_MASK) >> SDIINTSTATEN_ACMD12_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_ACMD12_ERR_EN(SDIINTSTATEN, ACMD12_ERR_EN) { \
	FDL_ASSERT(!((ACMD12_ERR_EN) & ~((1 << SDIINTSTATEN_ACMD12_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_ACMD12_ERR_EN_MASK) | (((unsigned long)(ACMD12_ERR_EN)) << SDIINTSTATEN_ACMD12_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_PAD1_SIZE	3
#define SDIINTSTATEN_PAD1_SHIFT	25
#define SDIINTSTATEN_PAD1_MASK	0x0e000000
#define SDIINTSTATEN_GET_PAD1(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_PAD1_MASK) >> SDIINTSTATEN_PAD1_SHIFT)
#define SDIINTSTATEN_SET_PAD1(SDIINTSTATEN, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDIINTSTATEN_PAD1_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_PAD1_MASK) | (((unsigned long)(pad1)) << SDIINTSTATEN_PAD1_SHIFT);\
}
#define SDIINTSTATEN_VEND_SPEC_ERR_EN_SIZE	4
#define SDIINTSTATEN_VEND_SPEC_ERR_EN_SHIFT	28
#define SDIINTSTATEN_VEND_SPEC_ERR_EN_MASK	0xf0000000
#define SDIINTSTATEN_GET_VEND_SPEC_ERR_EN(SDIINTSTATEN) \
	((((unsigned long)(SDIINTSTATEN)) & SDIINTSTATEN_VEND_SPEC_ERR_EN_MASK) >> SDIINTSTATEN_VEND_SPEC_ERR_EN_SHIFT)
#define SDIINTSTATEN_SET_VEND_SPEC_ERR_EN(SDIINTSTATEN, VEND_SPEC_ERR_EN) { \
	FDL_ASSERT(!((VEND_SPEC_ERR_EN) & ~((1 << SDIINTSTATEN_VEND_SPEC_ERR_EN_SIZE)-1))); \
	SDIINTSTATEN = (((unsigned long)(SDIINTSTATEN)) & ~SDIINTSTATEN_VEND_SPEC_ERR_EN_MASK) | (((unsigned long)(VEND_SPEC_ERR_EN)) << SDIINTSTATEN_VEND_SPEC_ERR_EN_SHIFT);\
}
#define SDIINTSTATEN_TOTAL_SIZE	32
#define SDIINTSTATEN(CMD_CMPLT_EN, TRAN_CMPLT_EN, BGAP_EVT_EN, DMA_INT_EN, BUFW_RDY_EN, BUFR_RDY_EN, CARD_INS_EN, CARD_REM_EN, CARD_INT_EN, CMD_TIMEOUT_ERR_EN, CMD_CRC_ERR_EN, CMD_EBIT_ERR_EN, CMD_IDX_ERR_EN, DAT_TIMEOUT_ERR_EN, DAT_CRC_ERR_EN, DAT_EBIT_ERR_EN, CUR_LIM_ERR_EN, ACMD12_ERR_EN, VEND_SPEC_ERR_EN) \
	((((unsigned long)(CMD_CMPLT_EN)) << SDIINTSTATEN_CMD_CMPLT_EN_SHIFT) | \
	 (((unsigned long)(TRAN_CMPLT_EN)) << SDIINTSTATEN_TRAN_CMPLT_EN_SHIFT) | \
	 (((unsigned long)(BGAP_EVT_EN)) << SDIINTSTATEN_BGAP_EVT_EN_SHIFT) | \
	 (((unsigned long)(DMA_INT_EN)) << SDIINTSTATEN_DMA_INT_EN_SHIFT) | \
	 (((unsigned long)(BUFW_RDY_EN)) << SDIINTSTATEN_BUFW_RDY_EN_SHIFT) | \
	 (((unsigned long)(BUFR_RDY_EN)) << SDIINTSTATEN_BUFR_RDY_EN_SHIFT) | \
	 (((unsigned long)(CARD_INS_EN)) << SDIINTSTATEN_CARD_INS_EN_SHIFT) | \
	 (((unsigned long)(CARD_REM_EN)) << SDIINTSTATEN_CARD_REM_EN_SHIFT) | \
	 (((unsigned long)(CARD_INT_EN)) << SDIINTSTATEN_CARD_INT_EN_SHIFT) | \
	 (((unsigned long)(CMD_TIMEOUT_ERR_EN)) << SDIINTSTATEN_CMD_TIMEOUT_ERR_EN_SHIFT) | \
	 (((unsigned long)(CMD_CRC_ERR_EN)) << SDIINTSTATEN_CMD_CRC_ERR_EN_SHIFT) | \
	 (((unsigned long)(CMD_EBIT_ERR_EN)) << SDIINTSTATEN_CMD_EBIT_ERR_EN_SHIFT) | \
	 (((unsigned long)(CMD_IDX_ERR_EN)) << SDIINTSTATEN_CMD_IDX_ERR_EN_SHIFT) | \
	 (((unsigned long)(DAT_TIMEOUT_ERR_EN)) << SDIINTSTATEN_DAT_TIMEOUT_ERR_EN_SHIFT) | \
	 (((unsigned long)(DAT_CRC_ERR_EN)) << SDIINTSTATEN_DAT_CRC_ERR_EN_SHIFT) | \
	 (((unsigned long)(DAT_EBIT_ERR_EN)) << SDIINTSTATEN_DAT_EBIT_ERR_EN_SHIFT) | \
	 (((unsigned long)(CUR_LIM_ERR_EN)) << SDIINTSTATEN_CUR_LIM_ERR_EN_SHIFT) | \
	 (((unsigned long)(ACMD12_ERR_EN)) << SDIINTSTATEN_ACMD12_ERR_EN_SHIFT) | \
	 (((unsigned long)(VEND_SPEC_ERR_EN)) << SDIINTSTATEN_VEND_SPEC_ERR_EN_SHIFT))

/*
 *  SDIINTSIGEN struct
 */
#define SDIINTSIGEN_CMD_CMPLT_SIG_EN_SIZE	1
#define SDIINTSIGEN_CMD_CMPLT_SIG_EN_SHIFT	0
#define SDIINTSIGEN_CMD_CMPLT_SIG_EN_MASK	0x00000001
#define SDIINTSIGEN_GET_CMD_CMPLT_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CMD_CMPLT_SIG_EN_MASK) >> SDIINTSIGEN_CMD_CMPLT_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CMD_CMPLT_SIG_EN(SDIINTSIGEN, CMD_CMPLT_SIG_EN) { \
	FDL_ASSERT(!((CMD_CMPLT_SIG_EN) & ~((1 << SDIINTSIGEN_CMD_CMPLT_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CMD_CMPLT_SIG_EN_MASK) | (((unsigned long)(CMD_CMPLT_SIG_EN)) << SDIINTSIGEN_CMD_CMPLT_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_TRAN_CMPLT_SIG_EN_SIZE	1
#define SDIINTSIGEN_TRAN_CMPLT_SIG_EN_SHIFT	1
#define SDIINTSIGEN_TRAN_CMPLT_SIG_EN_MASK	0x00000002
#define SDIINTSIGEN_GET_TRAN_CMPLT_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_TRAN_CMPLT_SIG_EN_MASK) >> SDIINTSIGEN_TRAN_CMPLT_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_TRAN_CMPLT_SIG_EN(SDIINTSIGEN, TRAN_CMPLT_SIG_EN) { \
	FDL_ASSERT(!((TRAN_CMPLT_SIG_EN) & ~((1 << SDIINTSIGEN_TRAN_CMPLT_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_TRAN_CMPLT_SIG_EN_MASK) | (((unsigned long)(TRAN_CMPLT_SIG_EN)) << SDIINTSIGEN_TRAN_CMPLT_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_BGAP_EVT_SIG_EN_SIZE	1
#define SDIINTSIGEN_BGAP_EVT_SIG_EN_SHIFT	2
#define SDIINTSIGEN_BGAP_EVT_SIG_EN_MASK	0x00000004
#define SDIINTSIGEN_GET_BGAP_EVT_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_BGAP_EVT_SIG_EN_MASK) >> SDIINTSIGEN_BGAP_EVT_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_BGAP_EVT_SIG_EN(SDIINTSIGEN, BGAP_EVT_SIG_EN) { \
	FDL_ASSERT(!((BGAP_EVT_SIG_EN) & ~((1 << SDIINTSIGEN_BGAP_EVT_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_BGAP_EVT_SIG_EN_MASK) | (((unsigned long)(BGAP_EVT_SIG_EN)) << SDIINTSIGEN_BGAP_EVT_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_DMA_INT_SIG_EN_SIZE	1
#define SDIINTSIGEN_DMA_INT_SIG_EN_SHIFT	3
#define SDIINTSIGEN_DMA_INT_SIG_EN_MASK	0x00000008
#define SDIINTSIGEN_GET_DMA_INT_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_DMA_INT_SIG_EN_MASK) >> SDIINTSIGEN_DMA_INT_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_DMA_INT_SIG_EN(SDIINTSIGEN, DMA_INT_SIG_EN) { \
	FDL_ASSERT(!((DMA_INT_SIG_EN) & ~((1 << SDIINTSIGEN_DMA_INT_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_DMA_INT_SIG_EN_MASK) | (((unsigned long)(DMA_INT_SIG_EN)) << SDIINTSIGEN_DMA_INT_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_BUFW_RDY_SIG_EN_SIZE	1
#define SDIINTSIGEN_BUFW_RDY_SIG_EN_SHIFT	4
#define SDIINTSIGEN_BUFW_RDY_SIG_EN_MASK	0x00000010
#define SDIINTSIGEN_GET_BUFW_RDY_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_BUFW_RDY_SIG_EN_MASK) >> SDIINTSIGEN_BUFW_RDY_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_BUFW_RDY_SIG_EN(SDIINTSIGEN, BUFW_RDY_SIG_EN) { \
	FDL_ASSERT(!((BUFW_RDY_SIG_EN) & ~((1 << SDIINTSIGEN_BUFW_RDY_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_BUFW_RDY_SIG_EN_MASK) | (((unsigned long)(BUFW_RDY_SIG_EN)) << SDIINTSIGEN_BUFW_RDY_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_BUFR_RDY_SIG_EN_SIZE	1
#define SDIINTSIGEN_BUFR_RDY_SIG_EN_SHIFT	5
#define SDIINTSIGEN_BUFR_RDY_SIG_EN_MASK	0x00000020
#define SDIINTSIGEN_GET_BUFR_RDY_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_BUFR_RDY_SIG_EN_MASK) >> SDIINTSIGEN_BUFR_RDY_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_BUFR_RDY_SIG_EN(SDIINTSIGEN, BUFR_RDY_SIG_EN) { \
	FDL_ASSERT(!((BUFR_RDY_SIG_EN) & ~((1 << SDIINTSIGEN_BUFR_RDY_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_BUFR_RDY_SIG_EN_MASK) | (((unsigned long)(BUFR_RDY_SIG_EN)) << SDIINTSIGEN_BUFR_RDY_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_CARD_INS_SIG_EN_SIZE	1
#define SDIINTSIGEN_CARD_INS_SIG_EN_SHIFT	6
#define SDIINTSIGEN_CARD_INS_SIG_EN_MASK	0x00000040
#define SDIINTSIGEN_GET_CARD_INS_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CARD_INS_SIG_EN_MASK) >> SDIINTSIGEN_CARD_INS_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CARD_INS_SIG_EN(SDIINTSIGEN, CARD_INS_SIG_EN) { \
	FDL_ASSERT(!((CARD_INS_SIG_EN) & ~((1 << SDIINTSIGEN_CARD_INS_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CARD_INS_SIG_EN_MASK) | (((unsigned long)(CARD_INS_SIG_EN)) << SDIINTSIGEN_CARD_INS_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_CARD_REM_SIG_EN_SIZE	1
#define SDIINTSIGEN_CARD_REM_SIG_EN_SHIFT	7
#define SDIINTSIGEN_CARD_REM_SIG_EN_MASK	0x00000080
#define SDIINTSIGEN_GET_CARD_REM_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CARD_REM_SIG_EN_MASK) >> SDIINTSIGEN_CARD_REM_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CARD_REM_SIG_EN(SDIINTSIGEN, CARD_REM_SIG_EN) { \
	FDL_ASSERT(!((CARD_REM_SIG_EN) & ~((1 << SDIINTSIGEN_CARD_REM_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CARD_REM_SIG_EN_MASK) | (((unsigned long)(CARD_REM_SIG_EN)) << SDIINTSIGEN_CARD_REM_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_CARD_INT_SIG_EN_SIZE	1
#define SDIINTSIGEN_CARD_INT_SIG_EN_SHIFT	8
#define SDIINTSIGEN_CARD_INT_SIG_EN_MASK	0x00000100
#define SDIINTSIGEN_GET_CARD_INT_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CARD_INT_SIG_EN_MASK) >> SDIINTSIGEN_CARD_INT_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CARD_INT_SIG_EN(SDIINTSIGEN, CARD_INT_SIG_EN) { \
	FDL_ASSERT(!((CARD_INT_SIG_EN) & ~((1 << SDIINTSIGEN_CARD_INT_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CARD_INT_SIG_EN_MASK) | (((unsigned long)(CARD_INT_SIG_EN)) << SDIINTSIGEN_CARD_INT_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_PAD0_SIZE	7
#define SDIINTSIGEN_PAD0_SHIFT	9
#define SDIINTSIGEN_PAD0_MASK	0x0000fe00
#define SDIINTSIGEN_GET_PAD0(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_PAD0_MASK) >> SDIINTSIGEN_PAD0_SHIFT)
#define SDIINTSIGEN_SET_PAD0(SDIINTSIGEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIINTSIGEN_PAD0_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_PAD0_MASK) | (((unsigned long)(pad0)) << SDIINTSIGEN_PAD0_SHIFT);\
}
#define SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_SHIFT	16
#define SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_MASK	0x00010000
#define SDIINTSIGEN_GET_CMD_TIMEOUT_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_MASK) >> SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CMD_TIMEOUT_ERR_SIG_EN(SDIINTSIGEN, CMD_TIMEOUT_ERR_SIG_EN) { \
	FDL_ASSERT(!((CMD_TIMEOUT_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_MASK) | (((unsigned long)(CMD_TIMEOUT_ERR_SIG_EN)) << SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_SHIFT	17
#define SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_MASK	0x00020000
#define SDIINTSIGEN_GET_CMD_CRC_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_MASK) >> SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CMD_CRC_ERR_SIG_EN(SDIINTSIGEN, CMD_CRC_ERR_SIG_EN) { \
	FDL_ASSERT(!((CMD_CRC_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_MASK) | (((unsigned long)(CMD_CRC_ERR_SIG_EN)) << SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_SHIFT	18
#define SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_MASK	0x00040000
#define SDIINTSIGEN_GET_CMD_EBIT_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_MASK) >> SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CMD_EBIT_ERR_SIG_EN(SDIINTSIGEN, CMD_EBIT_ERR_SIG_EN) { \
	FDL_ASSERT(!((CMD_EBIT_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_MASK) | (((unsigned long)(CMD_EBIT_ERR_SIG_EN)) << SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_SHIFT	19
#define SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_MASK	0x00080000
#define SDIINTSIGEN_GET_CMD_IDX_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_MASK) >> SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CMD_IDX_ERR_SIG_EN(SDIINTSIGEN, CMD_IDX_ERR_SIG_EN) { \
	FDL_ASSERT(!((CMD_IDX_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_MASK) | (((unsigned long)(CMD_IDX_ERR_SIG_EN)) << SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_SHIFT	20
#define SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_MASK	0x00100000
#define SDIINTSIGEN_GET_DAT_TIMEOUT_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_MASK) >> SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_DAT_TIMEOUT_ERR_SIG_EN(SDIINTSIGEN, DAT_TIMEOUT_ERR_SIG_EN) { \
	FDL_ASSERT(!((DAT_TIMEOUT_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_MASK) | (((unsigned long)(DAT_TIMEOUT_ERR_SIG_EN)) << SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_SHIFT	21
#define SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_MASK	0x00200000
#define SDIINTSIGEN_GET_DAT_CRC_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_MASK) >> SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_DAT_CRC_ERR_SIG_EN(SDIINTSIGEN, DAT_CRC_ERR_SIG_EN) { \
	FDL_ASSERT(!((DAT_CRC_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_MASK) | (((unsigned long)(DAT_CRC_ERR_SIG_EN)) << SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_SHIFT	22
#define SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_MASK	0x00400000
#define SDIINTSIGEN_GET_DAT_EBIT_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_MASK) >> SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_DAT_EBIT_ERR_SIG_EN(SDIINTSIGEN, DAT_EBIT_ERR_SIG_EN) { \
	FDL_ASSERT(!((DAT_EBIT_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_MASK) | (((unsigned long)(DAT_EBIT_ERR_SIG_EN)) << SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_SHIFT	23
#define SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_MASK	0x00800000
#define SDIINTSIGEN_GET_CUR_LIM_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_MASK) >> SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_CUR_LIM_ERR_SIG_EN(SDIINTSIGEN, CUR_LIM_ERR_SIG_EN) { \
	FDL_ASSERT(!((CUR_LIM_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_MASK) | (((unsigned long)(CUR_LIM_ERR_SIG_EN)) << SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_ACMD12_ERR_SIG_EN_SIZE	1
#define SDIINTSIGEN_ACMD12_ERR_SIG_EN_SHIFT	24
#define SDIINTSIGEN_ACMD12_ERR_SIG_EN_MASK	0x01000000
#define SDIINTSIGEN_GET_ACMD12_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_ACMD12_ERR_SIG_EN_MASK) >> SDIINTSIGEN_ACMD12_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_ACMD12_ERR_SIG_EN(SDIINTSIGEN, ACMD12_ERR_SIG_EN) { \
	FDL_ASSERT(!((ACMD12_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_ACMD12_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_ACMD12_ERR_SIG_EN_MASK) | (((unsigned long)(ACMD12_ERR_SIG_EN)) << SDIINTSIGEN_ACMD12_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_PAD1_SIZE	3
#define SDIINTSIGEN_PAD1_SHIFT	25
#define SDIINTSIGEN_PAD1_MASK	0x0e000000
#define SDIINTSIGEN_GET_PAD1(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_PAD1_MASK) >> SDIINTSIGEN_PAD1_SHIFT)
#define SDIINTSIGEN_SET_PAD1(SDIINTSIGEN, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDIINTSIGEN_PAD1_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_PAD1_MASK) | (((unsigned long)(pad1)) << SDIINTSIGEN_PAD1_SHIFT);\
}
#define SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_SIZE	4
#define SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_SHIFT	28
#define SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_MASK	0xf0000000
#define SDIINTSIGEN_GET_VEND_SPEC_ERR_SIG_EN(SDIINTSIGEN) \
	((((unsigned long)(SDIINTSIGEN)) & SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_MASK) >> SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_SHIFT)
#define SDIINTSIGEN_SET_VEND_SPEC_ERR_SIG_EN(SDIINTSIGEN, VEND_SPEC_ERR_SIG_EN) { \
	FDL_ASSERT(!((VEND_SPEC_ERR_SIG_EN) & ~((1 << SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_SIZE)-1))); \
	SDIINTSIGEN = (((unsigned long)(SDIINTSIGEN)) & ~SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_MASK) | (((unsigned long)(VEND_SPEC_ERR_SIG_EN)) << SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_SHIFT);\
}
#define SDIINTSIGEN_TOTAL_SIZE	32
#define SDIINTSIGEN(CMD_CMPLT_SIG_EN, TRAN_CMPLT_SIG_EN, BGAP_EVT_SIG_EN, DMA_INT_SIG_EN, BUFW_RDY_SIG_EN, BUFR_RDY_SIG_EN, CARD_INS_SIG_EN, CARD_REM_SIG_EN, CARD_INT_SIG_EN, CMD_TIMEOUT_ERR_SIG_EN, CMD_CRC_ERR_SIG_EN, CMD_EBIT_ERR_SIG_EN, CMD_IDX_ERR_SIG_EN, DAT_TIMEOUT_ERR_SIG_EN, DAT_CRC_ERR_SIG_EN, DAT_EBIT_ERR_SIG_EN, CUR_LIM_ERR_SIG_EN, ACMD12_ERR_SIG_EN, VEND_SPEC_ERR_SIG_EN) \
	((((unsigned long)(CMD_CMPLT_SIG_EN)) << SDIINTSIGEN_CMD_CMPLT_SIG_EN_SHIFT) | \
	 (((unsigned long)(TRAN_CMPLT_SIG_EN)) << SDIINTSIGEN_TRAN_CMPLT_SIG_EN_SHIFT) | \
	 (((unsigned long)(BGAP_EVT_SIG_EN)) << SDIINTSIGEN_BGAP_EVT_SIG_EN_SHIFT) | \
	 (((unsigned long)(DMA_INT_SIG_EN)) << SDIINTSIGEN_DMA_INT_SIG_EN_SHIFT) | \
	 (((unsigned long)(BUFW_RDY_SIG_EN)) << SDIINTSIGEN_BUFW_RDY_SIG_EN_SHIFT) | \
	 (((unsigned long)(BUFR_RDY_SIG_EN)) << SDIINTSIGEN_BUFR_RDY_SIG_EN_SHIFT) | \
	 (((unsigned long)(CARD_INS_SIG_EN)) << SDIINTSIGEN_CARD_INS_SIG_EN_SHIFT) | \
	 (((unsigned long)(CARD_REM_SIG_EN)) << SDIINTSIGEN_CARD_REM_SIG_EN_SHIFT) | \
	 (((unsigned long)(CARD_INT_SIG_EN)) << SDIINTSIGEN_CARD_INT_SIG_EN_SHIFT) | \
	 (((unsigned long)(CMD_TIMEOUT_ERR_SIG_EN)) << SDIINTSIGEN_CMD_TIMEOUT_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(CMD_CRC_ERR_SIG_EN)) << SDIINTSIGEN_CMD_CRC_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(CMD_EBIT_ERR_SIG_EN)) << SDIINTSIGEN_CMD_EBIT_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(CMD_IDX_ERR_SIG_EN)) << SDIINTSIGEN_CMD_IDX_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(DAT_TIMEOUT_ERR_SIG_EN)) << SDIINTSIGEN_DAT_TIMEOUT_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(DAT_CRC_ERR_SIG_EN)) << SDIINTSIGEN_DAT_CRC_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(DAT_EBIT_ERR_SIG_EN)) << SDIINTSIGEN_DAT_EBIT_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(CUR_LIM_ERR_SIG_EN)) << SDIINTSIGEN_CUR_LIM_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(ACMD12_ERR_SIG_EN)) << SDIINTSIGEN_ACMD12_ERR_SIG_EN_SHIFT) | \
	 (((unsigned long)(VEND_SPEC_ERR_SIG_EN)) << SDIINTSIGEN_VEND_SPEC_ERR_SIG_EN_SHIFT))

/*
 *  SDIACMD12ERRSTAT struct
 */
#define SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_SIZE	1
#define SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_SHIFT	0
#define SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_MASK	0x00000001
#define SDIACMD12ERRSTAT_GET_ACMD12_NOT_EXEC(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_MASK) >> SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_SHIFT)
#define SDIACMD12ERRSTAT_SET_ACMD12_NOT_EXEC(SDIACMD12ERRSTAT, ACMD12_NOT_EXEC) { \
	FDL_ASSERT(!((ACMD12_NOT_EXEC) & ~((1 << SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_MASK) | (((unsigned long)(ACMD12_NOT_EXEC)) << SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_SHIFT);\
}
#define SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_SIZE	1
#define SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_SHIFT	1
#define SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_MASK	0x00000002
#define SDIACMD12ERRSTAT_GET_ACMD12_TIMEOUT_ERR(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_MASK) >> SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_SHIFT)
#define SDIACMD12ERRSTAT_SET_ACMD12_TIMEOUT_ERR(SDIACMD12ERRSTAT, ACMD12_TIMEOUT_ERR) { \
	FDL_ASSERT(!((ACMD12_TIMEOUT_ERR) & ~((1 << SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_MASK) | (((unsigned long)(ACMD12_TIMEOUT_ERR)) << SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_SHIFT);\
}
#define SDIACMD12ERRSTAT_ACMD12_CRC_ERR_SIZE	1
#define SDIACMD12ERRSTAT_ACMD12_CRC_ERR_SHIFT	2
#define SDIACMD12ERRSTAT_ACMD12_CRC_ERR_MASK	0x00000004
#define SDIACMD12ERRSTAT_GET_ACMD12_CRC_ERR(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_ACMD12_CRC_ERR_MASK) >> SDIACMD12ERRSTAT_ACMD12_CRC_ERR_SHIFT)
#define SDIACMD12ERRSTAT_SET_ACMD12_CRC_ERR(SDIACMD12ERRSTAT, ACMD12_CRC_ERR) { \
	FDL_ASSERT(!((ACMD12_CRC_ERR) & ~((1 << SDIACMD12ERRSTAT_ACMD12_CRC_ERR_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_ACMD12_CRC_ERR_MASK) | (((unsigned long)(ACMD12_CRC_ERR)) << SDIACMD12ERRSTAT_ACMD12_CRC_ERR_SHIFT);\
}
#define SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_SIZE	1
#define SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_SHIFT	3
#define SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_MASK	0x00000008
#define SDIACMD12ERRSTAT_GET_ACMD12_EBIT_ERR(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_MASK) >> SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_SHIFT)
#define SDIACMD12ERRSTAT_SET_ACMD12_EBIT_ERR(SDIACMD12ERRSTAT, ACMD12_EBIT_ERR) { \
	FDL_ASSERT(!((ACMD12_EBIT_ERR) & ~((1 << SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_MASK) | (((unsigned long)(ACMD12_EBIT_ERR)) << SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_SHIFT);\
}
#define SDIACMD12ERRSTAT_ACMD12_IDX_ERR_SIZE	1
#define SDIACMD12ERRSTAT_ACMD12_IDX_ERR_SHIFT	4
#define SDIACMD12ERRSTAT_ACMD12_IDX_ERR_MASK	0x00000010
#define SDIACMD12ERRSTAT_GET_ACMD12_IDX_ERR(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_ACMD12_IDX_ERR_MASK) >> SDIACMD12ERRSTAT_ACMD12_IDX_ERR_SHIFT)
#define SDIACMD12ERRSTAT_SET_ACMD12_IDX_ERR(SDIACMD12ERRSTAT, ACMD12_IDX_ERR) { \
	FDL_ASSERT(!((ACMD12_IDX_ERR) & ~((1 << SDIACMD12ERRSTAT_ACMD12_IDX_ERR_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_ACMD12_IDX_ERR_MASK) | (((unsigned long)(ACMD12_IDX_ERR)) << SDIACMD12ERRSTAT_ACMD12_IDX_ERR_SHIFT);\
}
#define SDIACMD12ERRSTAT_PAD0_SIZE	2
#define SDIACMD12ERRSTAT_PAD0_SHIFT	5
#define SDIACMD12ERRSTAT_PAD0_MASK	0x00000060
#define SDIACMD12ERRSTAT_GET_PAD0(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_PAD0_MASK) >> SDIACMD12ERRSTAT_PAD0_SHIFT)
#define SDIACMD12ERRSTAT_SET_PAD0(SDIACMD12ERRSTAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIACMD12ERRSTAT_PAD0_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_PAD0_MASK) | (((unsigned long)(pad0)) << SDIACMD12ERRSTAT_PAD0_SHIFT);\
}
#define SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_SIZE	1
#define SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_SHIFT	7
#define SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_MASK	0x00000080
#define SDIACMD12ERRSTAT_GET_CMD_NOT_ISSUED_ERR(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_MASK) >> SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_SHIFT)
#define SDIACMD12ERRSTAT_SET_CMD_NOT_ISSUED_ERR(SDIACMD12ERRSTAT, CMD_NOT_ISSUED_ERR) { \
	FDL_ASSERT(!((CMD_NOT_ISSUED_ERR) & ~((1 << SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_MASK) | (((unsigned long)(CMD_NOT_ISSUED_ERR)) << SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_SHIFT);\
}
#define SDIACMD12ERRSTAT_PAD1_SIZE	8
#define SDIACMD12ERRSTAT_PAD1_SHIFT	8
#define SDIACMD12ERRSTAT_PAD1_MASK	0x0000ff00
#define SDIACMD12ERRSTAT_GET_PAD1(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_PAD1_MASK) >> SDIACMD12ERRSTAT_PAD1_SHIFT)
#define SDIACMD12ERRSTAT_SET_PAD1(SDIACMD12ERRSTAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDIACMD12ERRSTAT_PAD1_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_PAD1_MASK) | (((unsigned long)(pad1)) << SDIACMD12ERRSTAT_PAD1_SHIFT);\
}
#define SDIACMD12ERRSTAT_PAD2_SIZE	16
#define SDIACMD12ERRSTAT_PAD2_SHIFT	16
#define SDIACMD12ERRSTAT_PAD2_MASK	0xffff0000
#define SDIACMD12ERRSTAT_GET_PAD2(SDIACMD12ERRSTAT) \
	((((unsigned long)(SDIACMD12ERRSTAT)) & SDIACMD12ERRSTAT_PAD2_MASK) >> SDIACMD12ERRSTAT_PAD2_SHIFT)
#define SDIACMD12ERRSTAT_SET_PAD2(SDIACMD12ERRSTAT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << SDIACMD12ERRSTAT_PAD2_SIZE)-1))); \
	SDIACMD12ERRSTAT = (((unsigned long)(SDIACMD12ERRSTAT)) & ~SDIACMD12ERRSTAT_PAD2_MASK) | (((unsigned long)(pad2)) << SDIACMD12ERRSTAT_PAD2_SHIFT);\
}
#define SDIACMD12ERRSTAT_TOTAL_SIZE	32
#define SDIACMD12ERRSTAT(ACMD12_NOT_EXEC, ACMD12_TIMEOUT_ERR, ACMD12_CRC_ERR, ACMD12_EBIT_ERR, ACMD12_IDX_ERR, CMD_NOT_ISSUED_ERR) \
	((((unsigned long)(ACMD12_NOT_EXEC)) << SDIACMD12ERRSTAT_ACMD12_NOT_EXEC_SHIFT) | \
	 (((unsigned long)(ACMD12_TIMEOUT_ERR)) << SDIACMD12ERRSTAT_ACMD12_TIMEOUT_ERR_SHIFT) | \
	 (((unsigned long)(ACMD12_CRC_ERR)) << SDIACMD12ERRSTAT_ACMD12_CRC_ERR_SHIFT) | \
	 (((unsigned long)(ACMD12_EBIT_ERR)) << SDIACMD12ERRSTAT_ACMD12_EBIT_ERR_SHIFT) | \
	 (((unsigned long)(ACMD12_IDX_ERR)) << SDIACMD12ERRSTAT_ACMD12_IDX_ERR_SHIFT) | \
	 (((unsigned long)(CMD_NOT_ISSUED_ERR)) << SDIACMD12ERRSTAT_CMD_NOT_ISSUED_ERR_SHIFT))

/*
 *  SDICAP01 struct
 */
#define SDICAP01_TIMEOUT_CLK_FREQ_SIZE	6
#define SDICAP01_TIMEOUT_CLK_FREQ_SHIFT	0
#define SDICAP01_TIMEOUT_CLK_FREQ_MASK	0x0000003f
#define SDICAP01_GET_TIMEOUT_CLK_FREQ(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_TIMEOUT_CLK_FREQ_MASK) >> SDICAP01_TIMEOUT_CLK_FREQ_SHIFT)
#define SDICAP01_SET_TIMEOUT_CLK_FREQ(SDICAP01, TIMEOUT_CLK_FREQ) { \
	FDL_ASSERT(!((TIMEOUT_CLK_FREQ) & ~((1 << SDICAP01_TIMEOUT_CLK_FREQ_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_TIMEOUT_CLK_FREQ_MASK) | (((unsigned long)(TIMEOUT_CLK_FREQ)) << SDICAP01_TIMEOUT_CLK_FREQ_SHIFT);\
}
#define SDICAP01_PAD0_SIZE	1
#define SDICAP01_PAD0_SHIFT	6
#define SDICAP01_PAD0_MASK	0x00000040
#define SDICAP01_GET_PAD0(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_PAD0_MASK) >> SDICAP01_PAD0_SHIFT)
#define SDICAP01_SET_PAD0(SDICAP01, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDICAP01_PAD0_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_PAD0_MASK) | (((unsigned long)(pad0)) << SDICAP01_PAD0_SHIFT);\
}
#define SDICAP01_TIMEOUT_CLK_UNIT_SIZE	1
#define SDICAP01_TIMEOUT_CLK_UNIT_SHIFT	7
#define SDICAP01_TIMEOUT_CLK_UNIT_MASK	0x00000080
#define SDICAP01_GET_TIMEOUT_CLK_UNIT(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_TIMEOUT_CLK_UNIT_MASK) >> SDICAP01_TIMEOUT_CLK_UNIT_SHIFT)
#define SDICAP01_SET_TIMEOUT_CLK_UNIT(SDICAP01, TIMEOUT_CLK_UNIT) { \
	FDL_ASSERT(!((TIMEOUT_CLK_UNIT) & ~((1 << SDICAP01_TIMEOUT_CLK_UNIT_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_TIMEOUT_CLK_UNIT_MASK) | (((unsigned long)(TIMEOUT_CLK_UNIT)) << SDICAP01_TIMEOUT_CLK_UNIT_SHIFT);\
}
#define SDICAP01_BASE_SDCLK_FREQ_SIZE	6
#define SDICAP01_BASE_SDCLK_FREQ_SHIFT	8
#define SDICAP01_BASE_SDCLK_FREQ_MASK	0x00003f00
#define SDICAP01_GET_BASE_SDCLK_FREQ(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_BASE_SDCLK_FREQ_MASK) >> SDICAP01_BASE_SDCLK_FREQ_SHIFT)
#define SDICAP01_SET_BASE_SDCLK_FREQ(SDICAP01, BASE_SDCLK_FREQ) { \
	FDL_ASSERT(!((BASE_SDCLK_FREQ) & ~((1 << SDICAP01_BASE_SDCLK_FREQ_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_BASE_SDCLK_FREQ_MASK) | (((unsigned long)(BASE_SDCLK_FREQ)) << SDICAP01_BASE_SDCLK_FREQ_SHIFT);\
}
#define SDICAP01_PAD1_SIZE	2
#define SDICAP01_PAD1_SHIFT	14
#define SDICAP01_PAD1_MASK	0x0000c000
#define SDICAP01_GET_PAD1(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_PAD1_MASK) >> SDICAP01_PAD1_SHIFT)
#define SDICAP01_SET_PAD1(SDICAP01, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << SDICAP01_PAD1_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_PAD1_MASK) | (((unsigned long)(pad1)) << SDICAP01_PAD1_SHIFT);\
}
#define SDICAP01_MAX_BLK_LEN_SIZE	2
#define SDICAP01_MAX_BLK_LEN_SHIFT	16
#define SDICAP01_MAX_BLK_LEN_MASK	0x00030000
#define SDICAP01_GET_MAX_BLK_LEN(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_MAX_BLK_LEN_MASK) >> SDICAP01_MAX_BLK_LEN_SHIFT)
#define SDICAP01_SET_MAX_BLK_LEN(SDICAP01, MAX_BLK_LEN) { \
	FDL_ASSERT(!((MAX_BLK_LEN) & ~((1 << SDICAP01_MAX_BLK_LEN_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_MAX_BLK_LEN_MASK) | (((unsigned long)(MAX_BLK_LEN)) << SDICAP01_MAX_BLK_LEN_SHIFT);\
}
#define SDICAP01_PAD2_SIZE	3
#define SDICAP01_PAD2_SHIFT	18
#define SDICAP01_PAD2_MASK	0x001c0000
#define SDICAP01_GET_PAD2(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_PAD2_MASK) >> SDICAP01_PAD2_SHIFT)
#define SDICAP01_SET_PAD2(SDICAP01, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << SDICAP01_PAD2_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_PAD2_MASK) | (((unsigned long)(pad2)) << SDICAP01_PAD2_SHIFT);\
}
#define SDICAP01_HIGH_SPEED_SUP_SIZE	1
#define SDICAP01_HIGH_SPEED_SUP_SHIFT	21
#define SDICAP01_HIGH_SPEED_SUP_MASK	0x00200000
#define SDICAP01_GET_HIGH_SPEED_SUP(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_HIGH_SPEED_SUP_MASK) >> SDICAP01_HIGH_SPEED_SUP_SHIFT)
#define SDICAP01_SET_HIGH_SPEED_SUP(SDICAP01, HIGH_SPEED_SUP) { \
	FDL_ASSERT(!((HIGH_SPEED_SUP) & ~((1 << SDICAP01_HIGH_SPEED_SUP_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_HIGH_SPEED_SUP_MASK) | (((unsigned long)(HIGH_SPEED_SUP)) << SDICAP01_HIGH_SPEED_SUP_SHIFT);\
}
#define SDICAP01_DMA_SUP_SIZE	1
#define SDICAP01_DMA_SUP_SHIFT	22
#define SDICAP01_DMA_SUP_MASK	0x00400000
#define SDICAP01_GET_DMA_SUP(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_DMA_SUP_MASK) >> SDICAP01_DMA_SUP_SHIFT)
#define SDICAP01_SET_DMA_SUP(SDICAP01, DMA_SUP) { \
	FDL_ASSERT(!((DMA_SUP) & ~((1 << SDICAP01_DMA_SUP_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_DMA_SUP_MASK) | (((unsigned long)(DMA_SUP)) << SDICAP01_DMA_SUP_SHIFT);\
}
#define SDICAP01_SUSPEND_RESUME_SUP_SIZE	1
#define SDICAP01_SUSPEND_RESUME_SUP_SHIFT	23
#define SDICAP01_SUSPEND_RESUME_SUP_MASK	0x00800000
#define SDICAP01_GET_SUSPEND_RESUME_SUP(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_SUSPEND_RESUME_SUP_MASK) >> SDICAP01_SUSPEND_RESUME_SUP_SHIFT)
#define SDICAP01_SET_SUSPEND_RESUME_SUP(SDICAP01, SUSPEND_RESUME_SUP) { \
	FDL_ASSERT(!((SUSPEND_RESUME_SUP) & ~((1 << SDICAP01_SUSPEND_RESUME_SUP_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_SUSPEND_RESUME_SUP_MASK) | (((unsigned long)(SUSPEND_RESUME_SUP)) << SDICAP01_SUSPEND_RESUME_SUP_SHIFT);\
}
#define SDICAP01_V3_3_SUP_SIZE	1
#define SDICAP01_V3_3_SUP_SHIFT	24
#define SDICAP01_V3_3_SUP_MASK	0x01000000
#define SDICAP01_GET_V3_3_SUP(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_V3_3_SUP_MASK) >> SDICAP01_V3_3_SUP_SHIFT)
#define SDICAP01_SET_V3_3_SUP(SDICAP01, V3_3_SUP) { \
	FDL_ASSERT(!((V3_3_SUP) & ~((1 << SDICAP01_V3_3_SUP_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_V3_3_SUP_MASK) | (((unsigned long)(V3_3_SUP)) << SDICAP01_V3_3_SUP_SHIFT);\
}
#define SDICAP01_V3_0_SUP_SIZE	1
#define SDICAP01_V3_0_SUP_SHIFT	25
#define SDICAP01_V3_0_SUP_MASK	0x02000000
#define SDICAP01_GET_V3_0_SUP(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_V3_0_SUP_MASK) >> SDICAP01_V3_0_SUP_SHIFT)
#define SDICAP01_SET_V3_0_SUP(SDICAP01, V3_0_SUP) { \
	FDL_ASSERT(!((V3_0_SUP) & ~((1 << SDICAP01_V3_0_SUP_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_V3_0_SUP_MASK) | (((unsigned long)(V3_0_SUP)) << SDICAP01_V3_0_SUP_SHIFT);\
}
#define SDICAP01_V1_8_SUP_SIZE	1
#define SDICAP01_V1_8_SUP_SHIFT	26
#define SDICAP01_V1_8_SUP_MASK	0x04000000
#define SDICAP01_GET_V1_8_SUP(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_V1_8_SUP_MASK) >> SDICAP01_V1_8_SUP_SHIFT)
#define SDICAP01_SET_V1_8_SUP(SDICAP01, V1_8_SUP) { \
	FDL_ASSERT(!((V1_8_SUP) & ~((1 << SDICAP01_V1_8_SUP_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_V1_8_SUP_MASK) | (((unsigned long)(V1_8_SUP)) << SDICAP01_V1_8_SUP_SHIFT);\
}
#define SDICAP01_PAD3_SIZE	5
#define SDICAP01_PAD3_SHIFT	27
#define SDICAP01_PAD3_MASK	0xf8000000
#define SDICAP01_GET_PAD3(SDICAP01) \
	((((unsigned long)(SDICAP01)) & SDICAP01_PAD3_MASK) >> SDICAP01_PAD3_SHIFT)
#define SDICAP01_SET_PAD3(SDICAP01, pad3) { \
	FDL_ASSERT(!((pad3) & ~((1 << SDICAP01_PAD3_SIZE)-1))); \
	SDICAP01 = (((unsigned long)(SDICAP01)) & ~SDICAP01_PAD3_MASK) | (((unsigned long)(pad3)) << SDICAP01_PAD3_SHIFT);\
}
#define SDICAP01_TOTAL_SIZE	32
#define SDICAP01(TIMEOUT_CLK_FREQ, TIMEOUT_CLK_UNIT, BASE_SDCLK_FREQ, MAX_BLK_LEN, HIGH_SPEED_SUP, DMA_SUP, SUSPEND_RESUME_SUP, V3_3_SUP, V3_0_SUP, V1_8_SUP) \
	((((unsigned long)(TIMEOUT_CLK_FREQ)) << SDICAP01_TIMEOUT_CLK_FREQ_SHIFT) | \
	 (((unsigned long)(TIMEOUT_CLK_UNIT)) << SDICAP01_TIMEOUT_CLK_UNIT_SHIFT) | \
	 (((unsigned long)(BASE_SDCLK_FREQ)) << SDICAP01_BASE_SDCLK_FREQ_SHIFT) | \
	 (((unsigned long)(MAX_BLK_LEN)) << SDICAP01_MAX_BLK_LEN_SHIFT) | \
	 (((unsigned long)(HIGH_SPEED_SUP)) << SDICAP01_HIGH_SPEED_SUP_SHIFT) | \
	 (((unsigned long)(DMA_SUP)) << SDICAP01_DMA_SUP_SHIFT) | \
	 (((unsigned long)(SUSPEND_RESUME_SUP)) << SDICAP01_SUSPEND_RESUME_SUP_SHIFT) | \
	 (((unsigned long)(V3_3_SUP)) << SDICAP01_V3_3_SUP_SHIFT) | \
	 (((unsigned long)(V3_0_SUP)) << SDICAP01_V3_0_SUP_SHIFT) | \
	 (((unsigned long)(V1_8_SUP)) << SDICAP01_V1_8_SUP_SHIFT))

/*
 *  SDICAP23 struct
 */
#define SDICAP23_PAD0_SIZE	32
#define SDICAP23_PAD0_SHIFT	0
#define SDICAP23_PAD0_MASK	0xffffffff
#define SDICAP23_GET_PAD0(SDICAP23) \
	((((unsigned long)(SDICAP23)) & SDICAP23_PAD0_MASK) >> SDICAP23_PAD0_SHIFT)
#define SDICAP23_SET_PAD0(SDICAP23, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDICAP23_PAD0_SIZE)-1))); \
	SDICAP23 = (((unsigned long)(SDICAP23)) & ~SDICAP23_PAD0_MASK) | (((unsigned long)(pad0)) << SDICAP23_PAD0_SHIFT);\
}
#define SDICAP23_TOTAL_SIZE	32
#define SDICAP23() \
)

/*
 *  SDIMAXCURCAP01 struct
 */
#define SDIMAXCURCAP01_V3_3_MAXCUR_SIZE	8
#define SDIMAXCURCAP01_V3_3_MAXCUR_SHIFT	0
#define SDIMAXCURCAP01_V3_3_MAXCUR_MASK	0x000000ff
#define SDIMAXCURCAP01_GET_V3_3_MAXCUR(SDIMAXCURCAP01) \
	((((unsigned long)(SDIMAXCURCAP01)) & SDIMAXCURCAP01_V3_3_MAXCUR_MASK) >> SDIMAXCURCAP01_V3_3_MAXCUR_SHIFT)
#define SDIMAXCURCAP01_SET_V3_3_MAXCUR(SDIMAXCURCAP01, V3_3_MAXCUR) { \
	FDL_ASSERT(!((V3_3_MAXCUR) & ~((1 << SDIMAXCURCAP01_V3_3_MAXCUR_SIZE)-1))); \
	SDIMAXCURCAP01 = (((unsigned long)(SDIMAXCURCAP01)) & ~SDIMAXCURCAP01_V3_3_MAXCUR_MASK) | (((unsigned long)(V3_3_MAXCUR)) << SDIMAXCURCAP01_V3_3_MAXCUR_SHIFT);\
}
#define SDIMAXCURCAP01_V3_0_MAXCUR_SIZE	8
#define SDIMAXCURCAP01_V3_0_MAXCUR_SHIFT	8
#define SDIMAXCURCAP01_V3_0_MAXCUR_MASK	0x0000ff00
#define SDIMAXCURCAP01_GET_V3_0_MAXCUR(SDIMAXCURCAP01) \
	((((unsigned long)(SDIMAXCURCAP01)) & SDIMAXCURCAP01_V3_0_MAXCUR_MASK) >> SDIMAXCURCAP01_V3_0_MAXCUR_SHIFT)
#define SDIMAXCURCAP01_SET_V3_0_MAXCUR(SDIMAXCURCAP01, V3_0_MAXCUR) { \
	FDL_ASSERT(!((V3_0_MAXCUR) & ~((1 << SDIMAXCURCAP01_V3_0_MAXCUR_SIZE)-1))); \
	SDIMAXCURCAP01 = (((unsigned long)(SDIMAXCURCAP01)) & ~SDIMAXCURCAP01_V3_0_MAXCUR_MASK) | (((unsigned long)(V3_0_MAXCUR)) << SDIMAXCURCAP01_V3_0_MAXCUR_SHIFT);\
}
#define SDIMAXCURCAP01_V1_8_MAXCUR_SIZE	8
#define SDIMAXCURCAP01_V1_8_MAXCUR_SHIFT	16
#define SDIMAXCURCAP01_V1_8_MAXCUR_MASK	0x00ff0000
#define SDIMAXCURCAP01_GET_V1_8_MAXCUR(SDIMAXCURCAP01) \
	((((unsigned long)(SDIMAXCURCAP01)) & SDIMAXCURCAP01_V1_8_MAXCUR_MASK) >> SDIMAXCURCAP01_V1_8_MAXCUR_SHIFT)
#define SDIMAXCURCAP01_SET_V1_8_MAXCUR(SDIMAXCURCAP01, V1_8_MAXCUR) { \
	FDL_ASSERT(!((V1_8_MAXCUR) & ~((1 << SDIMAXCURCAP01_V1_8_MAXCUR_SIZE)-1))); \
	SDIMAXCURCAP01 = (((unsigned long)(SDIMAXCURCAP01)) & ~SDIMAXCURCAP01_V1_8_MAXCUR_MASK) | (((unsigned long)(V1_8_MAXCUR)) << SDIMAXCURCAP01_V1_8_MAXCUR_SHIFT);\
}
#define SDIMAXCURCAP01_PAD0_SIZE	8
#define SDIMAXCURCAP01_PAD0_SHIFT	24
#define SDIMAXCURCAP01_PAD0_MASK	0xff000000
#define SDIMAXCURCAP01_GET_PAD0(SDIMAXCURCAP01) \
	((((unsigned long)(SDIMAXCURCAP01)) & SDIMAXCURCAP01_PAD0_MASK) >> SDIMAXCURCAP01_PAD0_SHIFT)
#define SDIMAXCURCAP01_SET_PAD0(SDIMAXCURCAP01, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIMAXCURCAP01_PAD0_SIZE)-1))); \
	SDIMAXCURCAP01 = (((unsigned long)(SDIMAXCURCAP01)) & ~SDIMAXCURCAP01_PAD0_MASK) | (((unsigned long)(pad0)) << SDIMAXCURCAP01_PAD0_SHIFT);\
}
#define SDIMAXCURCAP01_TOTAL_SIZE	32
#define SDIMAXCURCAP01(V3_3_MAXCUR, V3_0_MAXCUR, V1_8_MAXCUR) \
	((((unsigned long)(V3_3_MAXCUR)) << SDIMAXCURCAP01_V3_3_MAXCUR_SHIFT) | \
	 (((unsigned long)(V3_0_MAXCUR)) << SDIMAXCURCAP01_V3_0_MAXCUR_SHIFT) | \
	 (((unsigned long)(V1_8_MAXCUR)) << SDIMAXCURCAP01_V1_8_MAXCUR_SHIFT))

/*
 *  SDIMAXCURCAP23 struct
 */
#define SDIMAXCURCAP23_PAD0_SIZE	32
#define SDIMAXCURCAP23_PAD0_SHIFT	0
#define SDIMAXCURCAP23_PAD0_MASK	0xffffffff
#define SDIMAXCURCAP23_GET_PAD0(SDIMAXCURCAP23) \
	((((unsigned long)(SDIMAXCURCAP23)) & SDIMAXCURCAP23_PAD0_MASK) >> SDIMAXCURCAP23_PAD0_SHIFT)
#define SDIMAXCURCAP23_SET_PAD0(SDIMAXCURCAP23, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDIMAXCURCAP23_PAD0_SIZE)-1))); \
	SDIMAXCURCAP23 = (((unsigned long)(SDIMAXCURCAP23)) & ~SDIMAXCURCAP23_PAD0_MASK) | (((unsigned long)(pad0)) << SDIMAXCURCAP23_PAD0_SHIFT);\
}
#define SDIMAXCURCAP23_TOTAL_SIZE	32
#define SDIMAXCURCAP23() \
)

/*
 *  SDISISVER struct
 */
#define SDISISVER_SLOT_INT_SIG_SIZE	8
#define SDISISVER_SLOT_INT_SIG_SHIFT	0
#define SDISISVER_SLOT_INT_SIG_MASK	0x000000ff
#define SDISISVER_GET_SLOT_INT_SIG(SDISISVER) \
	((((unsigned long)(SDISISVER)) & SDISISVER_SLOT_INT_SIG_MASK) >> SDISISVER_SLOT_INT_SIG_SHIFT)
#define SDISISVER_SET_SLOT_INT_SIG(SDISISVER, SLOT_INT_SIG) { \
	FDL_ASSERT(!((SLOT_INT_SIG) & ~((1 << SDISISVER_SLOT_INT_SIG_SIZE)-1))); \
	SDISISVER = (((unsigned long)(SDISISVER)) & ~SDISISVER_SLOT_INT_SIG_MASK) | (((unsigned long)(SLOT_INT_SIG)) << SDISISVER_SLOT_INT_SIG_SHIFT);\
}
#define SDISISVER_PAD0_SIZE	8
#define SDISISVER_PAD0_SHIFT	8
#define SDISISVER_PAD0_MASK	0x0000ff00
#define SDISISVER_GET_PAD0(SDISISVER) \
	((((unsigned long)(SDISISVER)) & SDISISVER_PAD0_MASK) >> SDISISVER_PAD0_SHIFT)
#define SDISISVER_SET_PAD0(SDISISVER, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SDISISVER_PAD0_SIZE)-1))); \
	SDISISVER = (((unsigned long)(SDISISVER)) & ~SDISISVER_PAD0_MASK) | (((unsigned long)(pad0)) << SDISISVER_PAD0_SHIFT);\
}
#define SDISISVER_SPEC_VER_SIZE	8
#define SDISISVER_SPEC_VER_SHIFT	16
#define SDISISVER_SPEC_VER_MASK	0x00ff0000
#define SDISISVER_GET_SPEC_VER(SDISISVER) \
	((((unsigned long)(SDISISVER)) & SDISISVER_SPEC_VER_MASK) >> SDISISVER_SPEC_VER_SHIFT)
#define SDISISVER_SET_SPEC_VER(SDISISVER, SPEC_VER) { \
	FDL_ASSERT(!((SPEC_VER) & ~((1 << SDISISVER_SPEC_VER_SIZE)-1))); \
	SDISISVER = (((unsigned long)(SDISISVER)) & ~SDISISVER_SPEC_VER_MASK) | (((unsigned long)(SPEC_VER)) << SDISISVER_SPEC_VER_SHIFT);\
}
#define SDISISVER_VEND_VER_SIZE	8
#define SDISISVER_VEND_VER_SHIFT	24
#define SDISISVER_VEND_VER_MASK	0xff000000
#define SDISISVER_GET_VEND_VER(SDISISVER) \
	((((unsigned long)(SDISISVER)) & SDISISVER_VEND_VER_MASK) >> SDISISVER_VEND_VER_SHIFT)
#define SDISISVER_SET_VEND_VER(SDISISVER, VEND_VER) { \
	FDL_ASSERT(!((VEND_VER) & ~((1 << SDISISVER_VEND_VER_SIZE)-1))); \
	SDISISVER = (((unsigned long)(SDISISVER)) & ~SDISISVER_VEND_VER_MASK) | (((unsigned long)(VEND_VER)) << SDISISVER_VEND_VER_SHIFT);\
}
#define SDISISVER_TOTAL_SIZE	32
#define SDISISVER(SLOT_INT_SIG, SPEC_VER, VEND_VER) \
	((((unsigned long)(SLOT_INT_SIG)) << SDISISVER_SLOT_INT_SIG_SHIFT) | \
	 (((unsigned long)(SPEC_VER)) << SDISISVER_SPEC_VER_SHIFT) | \
	 (((unsigned long)(VEND_VER)) << SDISISVER_VEND_VER_SHIFT))

/*
 *  AHM_reg_addr value
 */
#define AHMSECDDR	0x000
#define AHMSECSPL	0x004
#define AHMRDBI	0x008
#define AHMPREFC	0x010
#define AHMINTMASK	0x020
#define AHMINTSTAT	0x030
#define AHMRESPCNTR	0x040
#define AHMPREFCNTR	0x044

/*
 *  AHMSECDDR_reg struct
 */
#define AHMSECDDR_REG_COARSE_EN_DDR_SIZE	1
#define AHMSECDDR_REG_COARSE_EN_DDR_SHIFT	0
#define AHMSECDDR_REG_COARSE_EN_DDR_MASK	0x00000001
#define AHMSECDDR_REG_GET_COARSE_EN_DDR(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_COARSE_EN_DDR_MASK) >> AHMSECDDR_REG_COARSE_EN_DDR_SHIFT)
#define AHMSECDDR_REG_SET_COARSE_EN_DDR(AHMSECDDR_reg, COARSE_EN_DDR) { \
	FDL_ASSERT(!((COARSE_EN_DDR) & ~((1 << AHMSECDDR_REG_COARSE_EN_DDR_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_COARSE_EN_DDR_MASK) | (((unsigned long)(COARSE_EN_DDR)) << AHMSECDDR_REG_COARSE_EN_DDR_SHIFT);\
}
#define AHMSECDDR_REG_FINE_EN_DDR_SIZE	1
#define AHMSECDDR_REG_FINE_EN_DDR_SHIFT	1
#define AHMSECDDR_REG_FINE_EN_DDR_MASK	0x00000002
#define AHMSECDDR_REG_GET_FINE_EN_DDR(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_FINE_EN_DDR_MASK) >> AHMSECDDR_REG_FINE_EN_DDR_SHIFT)
#define AHMSECDDR_REG_SET_FINE_EN_DDR(AHMSECDDR_reg, FINE_EN_DDR) { \
	FDL_ASSERT(!((FINE_EN_DDR) & ~((1 << AHMSECDDR_REG_FINE_EN_DDR_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_FINE_EN_DDR_MASK) | (((unsigned long)(FINE_EN_DDR)) << AHMSECDDR_REG_FINE_EN_DDR_SHIFT);\
}
#define AHMSECDDR_REG_PTSIZE_DDR_SIZE	3
#define AHMSECDDR_REG_PTSIZE_DDR_SHIFT	2
#define AHMSECDDR_REG_PTSIZE_DDR_MASK	0x0000001c
#define AHMSECDDR_REG_GET_PTSIZE_DDR(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_PTSIZE_DDR_MASK) >> AHMSECDDR_REG_PTSIZE_DDR_SHIFT)
#define AHMSECDDR_REG_SET_PTSIZE_DDR(AHMSECDDR_reg, PTSIZE_DDR) { \
	FDL_ASSERT(!((PTSIZE_DDR) & ~((1 << AHMSECDDR_REG_PTSIZE_DDR_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_PTSIZE_DDR_MASK) | (((unsigned long)(PTSIZE_DDR)) << AHMSECDDR_REG_PTSIZE_DDR_SHIFT);\
}
#define AHMSECDDR_REG_DIS_DDR_SIZE	1
#define AHMSECDDR_REG_DIS_DDR_SHIFT	5
#define AHMSECDDR_REG_DIS_DDR_MASK	0x00000020
#define AHMSECDDR_REG_GET_DIS_DDR(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_DIS_DDR_MASK) >> AHMSECDDR_REG_DIS_DDR_SHIFT)
#define AHMSECDDR_REG_SET_DIS_DDR(AHMSECDDR_reg, DIS_DDR) { \
	FDL_ASSERT(!((DIS_DDR) & ~((1 << AHMSECDDR_REG_DIS_DDR_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_DIS_DDR_MASK) | (((unsigned long)(DIS_DDR)) << AHMSECDDR_REG_DIS_DDR_SHIFT);\
}
#define AHMSECDDR_REG_DIS_REG_SIZE	1
#define AHMSECDDR_REG_DIS_REG_SHIFT	6
#define AHMSECDDR_REG_DIS_REG_MASK	0x00000040
#define AHMSECDDR_REG_GET_DIS_REG(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_DIS_REG_MASK) >> AHMSECDDR_REG_DIS_REG_SHIFT)
#define AHMSECDDR_REG_SET_DIS_REG(AHMSECDDR_reg, DIS_REG) { \
	FDL_ASSERT(!((DIS_REG) & ~((1 << AHMSECDDR_REG_DIS_REG_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_DIS_REG_MASK) | (((unsigned long)(DIS_REG)) << AHMSECDDR_REG_DIS_REG_SHIFT);\
}
#define AHMSECDDR_REG_PAD0_SIZE	1
#define AHMSECDDR_REG_PAD0_SHIFT	7
#define AHMSECDDR_REG_PAD0_MASK	0x00000080
#define AHMSECDDR_REG_GET_PAD0(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_PAD0_MASK) >> AHMSECDDR_REG_PAD0_SHIFT)
#define AHMSECDDR_REG_SET_PAD0(AHMSECDDR_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMSECDDR_REG_PAD0_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AHMSECDDR_REG_PAD0_SHIFT);\
}
#define AHMSECDDR_REG_BASE_ADDR_DDR_FINE_SIZE	8
#define AHMSECDDR_REG_BASE_ADDR_DDR_FINE_SHIFT	8
#define AHMSECDDR_REG_BASE_ADDR_DDR_FINE_MASK	0x0000ff00
#define AHMSECDDR_REG_GET_BASE_ADDR_DDR_FINE(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_BASE_ADDR_DDR_FINE_MASK) >> AHMSECDDR_REG_BASE_ADDR_DDR_FINE_SHIFT)
#define AHMSECDDR_REG_SET_BASE_ADDR_DDR_FINE(AHMSECDDR_reg, BASE_ADDR_DDR_FINE) { \
	FDL_ASSERT(!((BASE_ADDR_DDR_FINE) & ~((1 << AHMSECDDR_REG_BASE_ADDR_DDR_FINE_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_BASE_ADDR_DDR_FINE_MASK) | (((unsigned long)(BASE_ADDR_DDR_FINE)) << AHMSECDDR_REG_BASE_ADDR_DDR_FINE_SHIFT);\
}
#define AHMSECDDR_REG_PAD1_SIZE	4
#define AHMSECDDR_REG_PAD1_SHIFT	16
#define AHMSECDDR_REG_PAD1_MASK	0x000f0000
#define AHMSECDDR_REG_GET_PAD1(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_PAD1_MASK) >> AHMSECDDR_REG_PAD1_SHIFT)
#define AHMSECDDR_REG_SET_PAD1(AHMSECDDR_reg, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << AHMSECDDR_REG_PAD1_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_PAD1_MASK) | (((unsigned long)(pad1)) << AHMSECDDR_REG_PAD1_SHIFT);\
}
#define AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_SIZE	8
#define AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_SHIFT	20
#define AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_MASK	0x0ff00000
#define AHMSECDDR_REG_GET_BASE_ADDR_DDR_COARSE(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_MASK) >> AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_SHIFT)
#define AHMSECDDR_REG_SET_BASE_ADDR_DDR_COARSE(AHMSECDDR_reg, BASE_ADDR_DDR_COARSE) { \
	FDL_ASSERT(!((BASE_ADDR_DDR_COARSE) & ~((1 << AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_MASK) | (((unsigned long)(BASE_ADDR_DDR_COARSE)) << AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_SHIFT);\
}
#define AHMSECDDR_REG_PAD2_SIZE	4
#define AHMSECDDR_REG_PAD2_SHIFT	28
#define AHMSECDDR_REG_PAD2_MASK	0xf0000000
#define AHMSECDDR_REG_GET_PAD2(AHMSECDDR_reg) \
	((((unsigned long)(AHMSECDDR_reg)) & AHMSECDDR_REG_PAD2_MASK) >> AHMSECDDR_REG_PAD2_SHIFT)
#define AHMSECDDR_REG_SET_PAD2(AHMSECDDR_reg, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << AHMSECDDR_REG_PAD2_SIZE)-1))); \
	AHMSECDDR_reg = (((unsigned long)(AHMSECDDR_reg)) & ~AHMSECDDR_REG_PAD2_MASK) | (((unsigned long)(pad2)) << AHMSECDDR_REG_PAD2_SHIFT);\
}
#define AHMSECDDR_REG_TOTAL_SIZE	32
#define AHMSECDDR_REG(COARSE_EN_DDR, FINE_EN_DDR, PTSIZE_DDR, DIS_DDR, DIS_REG, BASE_ADDR_DDR_FINE, BASE_ADDR_DDR_COARSE) \
	((((unsigned long)(COARSE_EN_DDR)) << AHMSECDDR_REG_COARSE_EN_DDR_SHIFT) | \
	 (((unsigned long)(FINE_EN_DDR)) << AHMSECDDR_REG_FINE_EN_DDR_SHIFT) | \
	 (((unsigned long)(PTSIZE_DDR)) << AHMSECDDR_REG_PTSIZE_DDR_SHIFT) | \
	 (((unsigned long)(DIS_DDR)) << AHMSECDDR_REG_DIS_DDR_SHIFT) | \
	 (((unsigned long)(DIS_REG)) << AHMSECDDR_REG_DIS_REG_SHIFT) | \
	 (((unsigned long)(BASE_ADDR_DDR_FINE)) << AHMSECDDR_REG_BASE_ADDR_DDR_FINE_SHIFT) | \
	 (((unsigned long)(BASE_ADDR_DDR_COARSE)) << AHMSECDDR_REG_BASE_ADDR_DDR_COARSE_SHIFT))

/*
 *  AHMRDBI_reg struct
 */
#define AHMRDBI_REG_AHBEXIDI_RDBI_SIZE	1
#define AHMRDBI_REG_AHBEXIDI_RDBI_SHIFT	0
#define AHMRDBI_REG_AHBEXIDI_RDBI_MASK	0x00000001
#define AHMRDBI_REG_GET_AHBEXIDI_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_AHBEXIDI_RDBI_MASK) >> AHMRDBI_REG_AHBEXIDI_RDBI_SHIFT)
#define AHMRDBI_REG_SET_AHBEXIDI_RDBI(AHMRDBI_reg, AHBEXIDI_RDBI) { \
	FDL_ASSERT(!((AHBEXIDI_RDBI) & ~((1 << AHMRDBI_REG_AHBEXIDI_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_AHBEXIDI_RDBI_MASK) | (((unsigned long)(AHBEXIDI_RDBI)) << AHMRDBI_REG_AHBEXIDI_RDBI_SHIFT);\
}
#define AHMRDBI_REG_FLASH_RDBI_SIZE	1
#define AHMRDBI_REG_FLASH_RDBI_SHIFT	1
#define AHMRDBI_REG_FLASH_RDBI_MASK	0x00000002
#define AHMRDBI_REG_GET_FLASH_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_FLASH_RDBI_MASK) >> AHMRDBI_REG_FLASH_RDBI_SHIFT)
#define AHMRDBI_REG_SET_FLASH_RDBI(AHMRDBI_reg, FLASH_RDBI) { \
	FDL_ASSERT(!((FLASH_RDBI) & ~((1 << AHMRDBI_REG_FLASH_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_FLASH_RDBI_MASK) | (((unsigned long)(FLASH_RDBI)) << AHMRDBI_REG_FLASH_RDBI_SHIFT);\
}
#define AHMRDBI_REG_AES_RDBI_SIZE	1
#define AHMRDBI_REG_AES_RDBI_SHIFT	2
#define AHMRDBI_REG_AES_RDBI_MASK	0x00000004
#define AHMRDBI_REG_GET_AES_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_AES_RDBI_MASK) >> AHMRDBI_REG_AES_RDBI_SHIFT)
#define AHMRDBI_REG_SET_AES_RDBI(AHMRDBI_reg, AES_RDBI) { \
	FDL_ASSERT(!((AES_RDBI) & ~((1 << AHMRDBI_REG_AES_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_AES_RDBI_MASK) | (((unsigned long)(AES_RDBI)) << AHMRDBI_REG_AES_RDBI_SHIFT);\
}
#define AHMRDBI_REG_SHA_RDBI_SIZE	1
#define AHMRDBI_REG_SHA_RDBI_SHIFT	3
#define AHMRDBI_REG_SHA_RDBI_MASK	0x00000008
#define AHMRDBI_REG_GET_SHA_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_SHA_RDBI_MASK) >> AHMRDBI_REG_SHA_RDBI_SHIFT)
#define AHMRDBI_REG_SET_SHA_RDBI(AHMRDBI_reg, SHA_RDBI) { \
	FDL_ASSERT(!((SHA_RDBI) & ~((1 << AHMRDBI_REG_SHA_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_SHA_RDBI_MASK) | (((unsigned long)(SHA_RDBI)) << AHMRDBI_REG_SHA_RDBI_SHIFT);\
}
#define AHMRDBI_REG_EHCI_RDBI_SIZE	1
#define AHMRDBI_REG_EHCI_RDBI_SHIFT	4
#define AHMRDBI_REG_EHCI_RDBI_MASK	0x00000010
#define AHMRDBI_REG_GET_EHCI_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_EHCI_RDBI_MASK) >> AHMRDBI_REG_EHCI_RDBI_SHIFT)
#define AHMRDBI_REG_SET_EHCI_RDBI(AHMRDBI_reg, EHCI_RDBI) { \
	FDL_ASSERT(!((EHCI_RDBI) & ~((1 << AHMRDBI_REG_EHCI_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_EHCI_RDBI_MASK) | (((unsigned long)(EHCI_RDBI)) << AHMRDBI_REG_EHCI_RDBI_SHIFT);\
}
#define AHMRDBI_REG_OHCI0_RDBI_SIZE	1
#define AHMRDBI_REG_OHCI0_RDBI_SHIFT	5
#define AHMRDBI_REG_OHCI0_RDBI_MASK	0x00000020
#define AHMRDBI_REG_GET_OHCI0_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_OHCI0_RDBI_MASK) >> AHMRDBI_REG_OHCI0_RDBI_SHIFT)
#define AHMRDBI_REG_SET_OHCI0_RDBI(AHMRDBI_reg, OHCI0_RDBI) { \
	FDL_ASSERT(!((OHCI0_RDBI) & ~((1 << AHMRDBI_REG_OHCI0_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_OHCI0_RDBI_MASK) | (((unsigned long)(OHCI0_RDBI)) << AHMRDBI_REG_OHCI0_RDBI_SHIFT);\
}
#define AHMRDBI_REG_OHCI1_RDBI_SIZE	1
#define AHMRDBI_REG_OHCI1_RDBI_SHIFT	6
#define AHMRDBI_REG_OHCI1_RDBI_MASK	0x00000040
#define AHMRDBI_REG_GET_OHCI1_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_OHCI1_RDBI_MASK) >> AHMRDBI_REG_OHCI1_RDBI_SHIFT)
#define AHMRDBI_REG_SET_OHCI1_RDBI(AHMRDBI_reg, OHCI1_RDBI) { \
	FDL_ASSERT(!((OHCI1_RDBI) & ~((1 << AHMRDBI_REG_OHCI1_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_OHCI1_RDBI_MASK) | (((unsigned long)(OHCI1_RDBI)) << AHMRDBI_REG_OHCI1_RDBI_SHIFT);\
}
#define AHMRDBI_REG_SDIO0_RDBI_SIZE	1
#define AHMRDBI_REG_SDIO0_RDBI_SHIFT	7
#define AHMRDBI_REG_SDIO0_RDBI_MASK	0x00000080
#define AHMRDBI_REG_GET_SDIO0_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_SDIO0_RDBI_MASK) >> AHMRDBI_REG_SDIO0_RDBI_SHIFT)
#define AHMRDBI_REG_SET_SDIO0_RDBI(AHMRDBI_reg, SDIO0_RDBI) { \
	FDL_ASSERT(!((SDIO0_RDBI) & ~((1 << AHMRDBI_REG_SDIO0_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_SDIO0_RDBI_MASK) | (((unsigned long)(SDIO0_RDBI)) << AHMRDBI_REG_SDIO0_RDBI_SHIFT);\
}
#define AHMRDBI_REG_SDIO1_RDBI_SIZE	1
#define AHMRDBI_REG_SDIO1_RDBI_SHIFT	8
#define AHMRDBI_REG_SDIO1_RDBI_MASK	0x00000100
#define AHMRDBI_REG_GET_SDIO1_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_SDIO1_RDBI_MASK) >> AHMRDBI_REG_SDIO1_RDBI_SHIFT)
#define AHMRDBI_REG_SET_SDIO1_RDBI(AHMRDBI_reg, SDIO1_RDBI) { \
	FDL_ASSERT(!((SDIO1_RDBI) & ~((1 << AHMRDBI_REG_SDIO1_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_SDIO1_RDBI_MASK) | (((unsigned long)(SDIO1_RDBI)) << AHMRDBI_REG_SDIO1_RDBI_SHIFT);\
}
#define AHMRDBI_REG_BMD_RDBI_SIZE	1
#define AHMRDBI_REG_BMD_RDBI_SHIFT	9
#define AHMRDBI_REG_BMD_RDBI_MASK	0x00000200
#define AHMRDBI_REG_GET_BMD_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_BMD_RDBI_MASK) >> AHMRDBI_REG_BMD_RDBI_SHIFT)
#define AHMRDBI_REG_SET_BMD_RDBI(AHMRDBI_reg, BMD_RDBI) { \
	FDL_ASSERT(!((BMD_RDBI) & ~((1 << AHMRDBI_REG_BMD_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_BMD_RDBI_MASK) | (((unsigned long)(BMD_RDBI)) << AHMRDBI_REG_BMD_RDBI_SHIFT);\
}
#define AHMRDBI_REG_PAD0_SIZE	2
#define AHMRDBI_REG_PAD0_SHIFT	10
#define AHMRDBI_REG_PAD0_MASK	0x00000c00
#define AHMRDBI_REG_GET_PAD0(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_PAD0_MASK) >> AHMRDBI_REG_PAD0_SHIFT)
#define AHMRDBI_REG_SET_PAD0(AHMRDBI_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMRDBI_REG_PAD0_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AHMRDBI_REG_PAD0_SHIFT);\
}
#define AHMRDBI_REG_BMC_RDBI_SIZE	1
#define AHMRDBI_REG_BMC_RDBI_SHIFT	12
#define AHMRDBI_REG_BMC_RDBI_MASK	0x00001000
#define AHMRDBI_REG_GET_BMC_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_BMC_RDBI_MASK) >> AHMRDBI_REG_BMC_RDBI_SHIFT)
#define AHMRDBI_REG_SET_BMC_RDBI(AHMRDBI_reg, BMC_RDBI) { \
	FDL_ASSERT(!((BMC_RDBI) & ~((1 << AHMRDBI_REG_BMC_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_BMC_RDBI_MASK) | (((unsigned long)(BMC_RDBI)) << AHMRDBI_REG_BMC_RDBI_SHIFT);\
}
#define AHMRDBI_REG_PAD1_SIZE	1
#define AHMRDBI_REG_PAD1_SHIFT	13
#define AHMRDBI_REG_PAD1_MASK	0x00002000
#define AHMRDBI_REG_GET_PAD1(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_PAD1_MASK) >> AHMRDBI_REG_PAD1_SHIFT)
#define AHMRDBI_REG_SET_PAD1(AHMRDBI_reg, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << AHMRDBI_REG_PAD1_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_PAD1_MASK) | (((unsigned long)(pad1)) << AHMRDBI_REG_PAD1_SHIFT);\
}
#define AHMRDBI_REG_IOPI_RDBI_SIZE	1
#define AHMRDBI_REG_IOPI_RDBI_SHIFT	14
#define AHMRDBI_REG_IOPI_RDBI_MASK	0x00004000
#define AHMRDBI_REG_GET_IOPI_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_IOPI_RDBI_MASK) >> AHMRDBI_REG_IOPI_RDBI_SHIFT)
#define AHMRDBI_REG_SET_IOPI_RDBI(AHMRDBI_reg, IOPI_RDBI) { \
	FDL_ASSERT(!((IOPI_RDBI) & ~((1 << AHMRDBI_REG_IOPI_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_IOPI_RDBI_MASK) | (((unsigned long)(IOPI_RDBI)) << AHMRDBI_REG_IOPI_RDBI_SHIFT);\
}
#define AHMRDBI_REG_IOPD_RDBI_SIZE	1
#define AHMRDBI_REG_IOPD_RDBI_SHIFT	15
#define AHMRDBI_REG_IOPD_RDBI_MASK	0x00008000
#define AHMRDBI_REG_GET_IOPD_RDBI(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_IOPD_RDBI_MASK) >> AHMRDBI_REG_IOPD_RDBI_SHIFT)
#define AHMRDBI_REG_SET_IOPD_RDBI(AHMRDBI_reg, IOPD_RDBI) { \
	FDL_ASSERT(!((IOPD_RDBI) & ~((1 << AHMRDBI_REG_IOPD_RDBI_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_IOPD_RDBI_MASK) | (((unsigned long)(IOPD_RDBI)) << AHMRDBI_REG_IOPD_RDBI_SHIFT);\
}
#define AHMRDBI_REG_PAD2_SIZE	16
#define AHMRDBI_REG_PAD2_SHIFT	16
#define AHMRDBI_REG_PAD2_MASK	0xffff0000
#define AHMRDBI_REG_GET_PAD2(AHMRDBI_reg) \
	((((unsigned long)(AHMRDBI_reg)) & AHMRDBI_REG_PAD2_MASK) >> AHMRDBI_REG_PAD2_SHIFT)
#define AHMRDBI_REG_SET_PAD2(AHMRDBI_reg, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << AHMRDBI_REG_PAD2_SIZE)-1))); \
	AHMRDBI_reg = (((unsigned long)(AHMRDBI_reg)) & ~AHMRDBI_REG_PAD2_MASK) | (((unsigned long)(pad2)) << AHMRDBI_REG_PAD2_SHIFT);\
}
#define AHMRDBI_REG_TOTAL_SIZE	32
#define AHMRDBI_REG(AHBEXIDI_RDBI, FLASH_RDBI, AES_RDBI, SHA_RDBI, EHCI_RDBI, OHCI0_RDBI, OHCI1_RDBI, SDIO0_RDBI, SDIO1_RDBI, BMD_RDBI, BMC_RDBI, IOPI_RDBI, IOPD_RDBI) \
	((((unsigned long)(AHBEXIDI_RDBI)) << AHMRDBI_REG_AHBEXIDI_RDBI_SHIFT) | \
	 (((unsigned long)(FLASH_RDBI)) << AHMRDBI_REG_FLASH_RDBI_SHIFT) | \
	 (((unsigned long)(AES_RDBI)) << AHMRDBI_REG_AES_RDBI_SHIFT) | \
	 (((unsigned long)(SHA_RDBI)) << AHMRDBI_REG_SHA_RDBI_SHIFT) | \
	 (((unsigned long)(EHCI_RDBI)) << AHMRDBI_REG_EHCI_RDBI_SHIFT) | \
	 (((unsigned long)(OHCI0_RDBI)) << AHMRDBI_REG_OHCI0_RDBI_SHIFT) | \
	 (((unsigned long)(OHCI1_RDBI)) << AHMRDBI_REG_OHCI1_RDBI_SHIFT) | \
	 (((unsigned long)(SDIO0_RDBI)) << AHMRDBI_REG_SDIO0_RDBI_SHIFT) | \
	 (((unsigned long)(SDIO1_RDBI)) << AHMRDBI_REG_SDIO1_RDBI_SHIFT) | \
	 (((unsigned long)(BMD_RDBI)) << AHMRDBI_REG_BMD_RDBI_SHIFT) | \
	 (((unsigned long)(BMC_RDBI)) << AHMRDBI_REG_BMC_RDBI_SHIFT) | \
	 (((unsigned long)(IOPI_RDBI)) << AHMRDBI_REG_IOPI_RDBI_SHIFT) | \
	 (((unsigned long)(IOPD_RDBI)) << AHMRDBI_REG_IOPD_RDBI_SHIFT))

/*
 *  AHMSECSPL_reg struct
 */
#define AHMSECSPL_REG_COARSE_EN_SPL_SIZE	1
#define AHMSECSPL_REG_COARSE_EN_SPL_SHIFT	0
#define AHMSECSPL_REG_COARSE_EN_SPL_MASK	0x00000001
#define AHMSECSPL_REG_GET_COARSE_EN_SPL(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_COARSE_EN_SPL_MASK) >> AHMSECSPL_REG_COARSE_EN_SPL_SHIFT)
#define AHMSECSPL_REG_SET_COARSE_EN_SPL(AHMSECSPL_reg, COARSE_EN_SPL) { \
	FDL_ASSERT(!((COARSE_EN_SPL) & ~((1 << AHMSECSPL_REG_COARSE_EN_SPL_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_COARSE_EN_SPL_MASK) | (((unsigned long)(COARSE_EN_SPL)) << AHMSECSPL_REG_COARSE_EN_SPL_SHIFT);\
}
#define AHMSECSPL_REG_FINE_EN_SPL_SIZE	1
#define AHMSECSPL_REG_FINE_EN_SPL_SHIFT	1
#define AHMSECSPL_REG_FINE_EN_SPL_MASK	0x00000002
#define AHMSECSPL_REG_GET_FINE_EN_SPL(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_FINE_EN_SPL_MASK) >> AHMSECSPL_REG_FINE_EN_SPL_SHIFT)
#define AHMSECSPL_REG_SET_FINE_EN_SPL(AHMSECSPL_reg, FINE_EN_SPL) { \
	FDL_ASSERT(!((FINE_EN_SPL) & ~((1 << AHMSECSPL_REG_FINE_EN_SPL_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_FINE_EN_SPL_MASK) | (((unsigned long)(FINE_EN_SPL)) << AHMSECSPL_REG_FINE_EN_SPL_SHIFT);\
}
#define AHMSECSPL_REG_PTSIZE_SPL_SIZE	3
#define AHMSECSPL_REG_PTSIZE_SPL_SHIFT	2
#define AHMSECSPL_REG_PTSIZE_SPL_MASK	0x0000001c
#define AHMSECSPL_REG_GET_PTSIZE_SPL(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_PTSIZE_SPL_MASK) >> AHMSECSPL_REG_PTSIZE_SPL_SHIFT)
#define AHMSECSPL_REG_SET_PTSIZE_SPL(AHMSECSPL_reg, PTSIZE_SPL) { \
	FDL_ASSERT(!((PTSIZE_SPL) & ~((1 << AHMSECSPL_REG_PTSIZE_SPL_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_PTSIZE_SPL_MASK) | (((unsigned long)(PTSIZE_SPL)) << AHMSECSPL_REG_PTSIZE_SPL_SHIFT);\
}
#define AHMSECSPL_REG_DIS_SPL_SIZE	1
#define AHMSECSPL_REG_DIS_SPL_SHIFT	5
#define AHMSECSPL_REG_DIS_SPL_MASK	0x00000020
#define AHMSECSPL_REG_GET_DIS_SPL(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_DIS_SPL_MASK) >> AHMSECSPL_REG_DIS_SPL_SHIFT)
#define AHMSECSPL_REG_SET_DIS_SPL(AHMSECSPL_reg, DIS_SPL) { \
	FDL_ASSERT(!((DIS_SPL) & ~((1 << AHMSECSPL_REG_DIS_SPL_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_DIS_SPL_MASK) | (((unsigned long)(DIS_SPL)) << AHMSECSPL_REG_DIS_SPL_SHIFT);\
}
#define AHMSECSPL_REG_PAD0_SIZE	2
#define AHMSECSPL_REG_PAD0_SHIFT	6
#define AHMSECSPL_REG_PAD0_MASK	0x000000c0
#define AHMSECSPL_REG_GET_PAD0(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_PAD0_MASK) >> AHMSECSPL_REG_PAD0_SHIFT)
#define AHMSECSPL_REG_SET_PAD0(AHMSECSPL_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMSECSPL_REG_PAD0_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AHMSECSPL_REG_PAD0_SHIFT);\
}
#define AHMSECSPL_REG_BASE_ADDR_SPL_FINE_SIZE	6
#define AHMSECSPL_REG_BASE_ADDR_SPL_FINE_SHIFT	8
#define AHMSECSPL_REG_BASE_ADDR_SPL_FINE_MASK	0x00003f00
#define AHMSECSPL_REG_GET_BASE_ADDR_SPL_FINE(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_BASE_ADDR_SPL_FINE_MASK) >> AHMSECSPL_REG_BASE_ADDR_SPL_FINE_SHIFT)
#define AHMSECSPL_REG_SET_BASE_ADDR_SPL_FINE(AHMSECSPL_reg, BASE_ADDR_SPL_FINE) { \
	FDL_ASSERT(!((BASE_ADDR_SPL_FINE) & ~((1 << AHMSECSPL_REG_BASE_ADDR_SPL_FINE_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_BASE_ADDR_SPL_FINE_MASK) | (((unsigned long)(BASE_ADDR_SPL_FINE)) << AHMSECSPL_REG_BASE_ADDR_SPL_FINE_SHIFT);\
}
#define AHMSECSPL_REG_PAD1_SIZE	6
#define AHMSECSPL_REG_PAD1_SHIFT	14
#define AHMSECSPL_REG_PAD1_MASK	0x000fc000
#define AHMSECSPL_REG_GET_PAD1(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_PAD1_MASK) >> AHMSECSPL_REG_PAD1_SHIFT)
#define AHMSECSPL_REG_SET_PAD1(AHMSECSPL_reg, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << AHMSECSPL_REG_PAD1_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_PAD1_MASK) | (((unsigned long)(pad1)) << AHMSECSPL_REG_PAD1_SHIFT);\
}
#define AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_SIZE	6
#define AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_SHIFT	20
#define AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_MASK	0x03f00000
#define AHMSECSPL_REG_GET_BASE_ADDR_SPL_COARSE(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_MASK) >> AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_SHIFT)
#define AHMSECSPL_REG_SET_BASE_ADDR_SPL_COARSE(AHMSECSPL_reg, BASE_ADDR_SPL_COARSE) { \
	FDL_ASSERT(!((BASE_ADDR_SPL_COARSE) & ~((1 << AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_MASK) | (((unsigned long)(BASE_ADDR_SPL_COARSE)) << AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_SHIFT);\
}
#define AHMSECSPL_REG_PAD2_SIZE	6
#define AHMSECSPL_REG_PAD2_SHIFT	26
#define AHMSECSPL_REG_PAD2_MASK	0xfc000000
#define AHMSECSPL_REG_GET_PAD2(AHMSECSPL_reg) \
	((((unsigned long)(AHMSECSPL_reg)) & AHMSECSPL_REG_PAD2_MASK) >> AHMSECSPL_REG_PAD2_SHIFT)
#define AHMSECSPL_REG_SET_PAD2(AHMSECSPL_reg, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << AHMSECSPL_REG_PAD2_SIZE)-1))); \
	AHMSECSPL_reg = (((unsigned long)(AHMSECSPL_reg)) & ~AHMSECSPL_REG_PAD2_MASK) | (((unsigned long)(pad2)) << AHMSECSPL_REG_PAD2_SHIFT);\
}
#define AHMSECSPL_REG_TOTAL_SIZE	32
#define AHMSECSPL_REG(COARSE_EN_SPL, FINE_EN_SPL, PTSIZE_SPL, DIS_SPL, BASE_ADDR_SPL_FINE, BASE_ADDR_SPL_COARSE) \
	((((unsigned long)(COARSE_EN_SPL)) << AHMSECSPL_REG_COARSE_EN_SPL_SHIFT) | \
	 (((unsigned long)(FINE_EN_SPL)) << AHMSECSPL_REG_FINE_EN_SPL_SHIFT) | \
	 (((unsigned long)(PTSIZE_SPL)) << AHMSECSPL_REG_PTSIZE_SPL_SHIFT) | \
	 (((unsigned long)(DIS_SPL)) << AHMSECSPL_REG_DIS_SPL_SHIFT) | \
	 (((unsigned long)(BASE_ADDR_SPL_FINE)) << AHMSECSPL_REG_BASE_ADDR_SPL_FINE_SHIFT) | \
	 (((unsigned long)(BASE_ADDR_SPL_COARSE)) << AHMSECSPL_REG_BASE_ADDR_SPL_COARSE_SHIFT))

/*
 *  AHMRESPCNTR_reg struct
 */
#define AHMRESPCNTR_REG_SPLIT4FULL_SIZE	8
#define AHMRESPCNTR_REG_SPLIT4FULL_SHIFT	0
#define AHMRESPCNTR_REG_SPLIT4FULL_MASK	0x000000ff
#define AHMRESPCNTR_REG_GET_SPLIT4FULL(AHMRESPCNTR_reg) \
	((((unsigned long)(AHMRESPCNTR_reg)) & AHMRESPCNTR_REG_SPLIT4FULL_MASK) >> AHMRESPCNTR_REG_SPLIT4FULL_SHIFT)
#define AHMRESPCNTR_REG_SET_SPLIT4FULL(AHMRESPCNTR_reg, SPLIT4FULL) { \
	FDL_ASSERT(!((SPLIT4FULL) & ~((1 << AHMRESPCNTR_REG_SPLIT4FULL_SIZE)-1))); \
	AHMRESPCNTR_reg = (((unsigned long)(AHMRESPCNTR_reg)) & ~AHMRESPCNTR_REG_SPLIT4FULL_MASK) | (((unsigned long)(SPLIT4FULL)) << AHMRESPCNTR_REG_SPLIT4FULL_SHIFT);\
}
#define AHMRESPCNTR_REG_SPLIT4NODATA_SIZE	8
#define AHMRESPCNTR_REG_SPLIT4NODATA_SHIFT	8
#define AHMRESPCNTR_REG_SPLIT4NODATA_MASK	0x0000ff00
#define AHMRESPCNTR_REG_GET_SPLIT4NODATA(AHMRESPCNTR_reg) \
	((((unsigned long)(AHMRESPCNTR_reg)) & AHMRESPCNTR_REG_SPLIT4NODATA_MASK) >> AHMRESPCNTR_REG_SPLIT4NODATA_SHIFT)
#define AHMRESPCNTR_REG_SET_SPLIT4NODATA(AHMRESPCNTR_reg, SPLIT4NODATA) { \
	FDL_ASSERT(!((SPLIT4NODATA) & ~((1 << AHMRESPCNTR_REG_SPLIT4NODATA_SIZE)-1))); \
	AHMRESPCNTR_reg = (((unsigned long)(AHMRESPCNTR_reg)) & ~AHMRESPCNTR_REG_SPLIT4NODATA_MASK) | (((unsigned long)(SPLIT4NODATA)) << AHMRESPCNTR_REG_SPLIT4NODATA_SHIFT);\
}
#define AHMRESPCNTR_REG_HREADY0_SIZE	16
#define AHMRESPCNTR_REG_HREADY0_SHIFT	16
#define AHMRESPCNTR_REG_HREADY0_MASK	0xffff0000
#define AHMRESPCNTR_REG_GET_HREADY0(AHMRESPCNTR_reg) \
	((((unsigned long)(AHMRESPCNTR_reg)) & AHMRESPCNTR_REG_HREADY0_MASK) >> AHMRESPCNTR_REG_HREADY0_SHIFT)
#define AHMRESPCNTR_REG_SET_HREADY0(AHMRESPCNTR_reg, HREADY0) { \
	FDL_ASSERT(!((HREADY0) & ~((1 << AHMRESPCNTR_REG_HREADY0_SIZE)-1))); \
	AHMRESPCNTR_reg = (((unsigned long)(AHMRESPCNTR_reg)) & ~AHMRESPCNTR_REG_HREADY0_MASK) | (((unsigned long)(HREADY0)) << AHMRESPCNTR_REG_HREADY0_SHIFT);\
}
#define AHMRESPCNTR_REG_TOTAL_SIZE	32
#define AHMRESPCNTR_REG(SPLIT4FULL, SPLIT4NODATA, HREADY0) \
	((((unsigned long)(SPLIT4FULL)) << AHMRESPCNTR_REG_SPLIT4FULL_SHIFT) | \
	 (((unsigned long)(SPLIT4NODATA)) << AHMRESPCNTR_REG_SPLIT4NODATA_SHIFT) | \
	 (((unsigned long)(HREADY0)) << AHMRESPCNTR_REG_HREADY0_SHIFT))

/*
 *  AHMPREFCNTR_reg struct
 */
#define AHMPREFCNTR_REG_BLKADR_MTCH_SIZE	16
#define AHMPREFCNTR_REG_BLKADR_MTCH_SHIFT	0
#define AHMPREFCNTR_REG_BLKADR_MTCH_MASK	0x0000ffff
#define AHMPREFCNTR_REG_GET_BLKADR_MTCH(AHMPREFCNTR_reg) \
	((((unsigned long)(AHMPREFCNTR_reg)) & AHMPREFCNTR_REG_BLKADR_MTCH_MASK) >> AHMPREFCNTR_REG_BLKADR_MTCH_SHIFT)
#define AHMPREFCNTR_REG_SET_BLKADR_MTCH(AHMPREFCNTR_reg, BLKADR_MTCH) { \
	FDL_ASSERT(!((BLKADR_MTCH) & ~((1 << AHMPREFCNTR_REG_BLKADR_MTCH_SIZE)-1))); \
	AHMPREFCNTR_reg = (((unsigned long)(AHMPREFCNTR_reg)) & ~AHMPREFCNTR_REG_BLKADR_MTCH_MASK) | (((unsigned long)(BLKADR_MTCH)) << AHMPREFCNTR_REG_BLKADR_MTCH_SHIFT);\
}
#define AHMPREFCNTR_REG_PAD0_SIZE	16
#define AHMPREFCNTR_REG_PAD0_SHIFT	16
#define AHMPREFCNTR_REG_PAD0_MASK	0xffff0000
#define AHMPREFCNTR_REG_GET_PAD0(AHMPREFCNTR_reg) \
	((((unsigned long)(AHMPREFCNTR_reg)) & AHMPREFCNTR_REG_PAD0_MASK) >> AHMPREFCNTR_REG_PAD0_SHIFT)
#define AHMPREFCNTR_REG_SET_PAD0(AHMPREFCNTR_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMPREFCNTR_REG_PAD0_SIZE)-1))); \
	AHMPREFCNTR_reg = (((unsigned long)(AHMPREFCNTR_reg)) & ~AHMPREFCNTR_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AHMPREFCNTR_REG_PAD0_SHIFT);\
}
#define AHMPREFCNTR_REG_TOTAL_SIZE	32
#define AHMPREFCNTR_REG(BLKADR_MTCH) \
	((((unsigned long)(BLKADR_MTCH)) << AHMPREFCNTR_REG_BLKADR_MTCH_SHIFT))

/*
 *  AHMINTMASK_reg struct
 */
#define AHMINTMASK_REG_EXI_DI_SEL_SIZE	1
#define AHMINTMASK_REG_EXI_DI_SEL_SHIFT	0
#define AHMINTMASK_REG_EXI_DI_SEL_MASK	0x00000001
#define AHMINTMASK_REG_GET_EXI_DI_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_EXI_DI_SEL_MASK) >> AHMINTMASK_REG_EXI_DI_SEL_SHIFT)
#define AHMINTMASK_REG_SET_EXI_DI_SEL(AHMINTMASK_reg, EXI_DI_SEL) { \
	FDL_ASSERT(!((EXI_DI_SEL) & ~((1 << AHMINTMASK_REG_EXI_DI_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_EXI_DI_SEL_MASK) | (((unsigned long)(EXI_DI_SEL)) << AHMINTMASK_REG_EXI_DI_SEL_SHIFT);\
}
#define AHMINTMASK_REG_FLA_SEL_SIZE	1
#define AHMINTMASK_REG_FLA_SEL_SHIFT	1
#define AHMINTMASK_REG_FLA_SEL_MASK	0x00000002
#define AHMINTMASK_REG_GET_FLA_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_FLA_SEL_MASK) >> AHMINTMASK_REG_FLA_SEL_SHIFT)
#define AHMINTMASK_REG_SET_FLA_SEL(AHMINTMASK_reg, FLA_SEL) { \
	FDL_ASSERT(!((FLA_SEL) & ~((1 << AHMINTMASK_REG_FLA_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_FLA_SEL_MASK) | (((unsigned long)(FLA_SEL)) << AHMINTMASK_REG_FLA_SEL_SHIFT);\
}
#define AHMINTMASK_REG_AES_SEL_SIZE	1
#define AHMINTMASK_REG_AES_SEL_SHIFT	2
#define AHMINTMASK_REG_AES_SEL_MASK	0x00000004
#define AHMINTMASK_REG_GET_AES_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_AES_SEL_MASK) >> AHMINTMASK_REG_AES_SEL_SHIFT)
#define AHMINTMASK_REG_SET_AES_SEL(AHMINTMASK_reg, AES_SEL) { \
	FDL_ASSERT(!((AES_SEL) & ~((1 << AHMINTMASK_REG_AES_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_AES_SEL_MASK) | (((unsigned long)(AES_SEL)) << AHMINTMASK_REG_AES_SEL_SHIFT);\
}
#define AHMINTMASK_REG_SHA_SEL_SIZE	1
#define AHMINTMASK_REG_SHA_SEL_SHIFT	3
#define AHMINTMASK_REG_SHA_SEL_MASK	0x00000008
#define AHMINTMASK_REG_GET_SHA_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_SHA_SEL_MASK) >> AHMINTMASK_REG_SHA_SEL_SHIFT)
#define AHMINTMASK_REG_SET_SHA_SEL(AHMINTMASK_reg, SHA_SEL) { \
	FDL_ASSERT(!((SHA_SEL) & ~((1 << AHMINTMASK_REG_SHA_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_SHA_SEL_MASK) | (((unsigned long)(SHA_SEL)) << AHMINTMASK_REG_SHA_SEL_SHIFT);\
}
#define AHMINTMASK_REG_EHC_SEL_SIZE	1
#define AHMINTMASK_REG_EHC_SEL_SHIFT	4
#define AHMINTMASK_REG_EHC_SEL_MASK	0x00000010
#define AHMINTMASK_REG_GET_EHC_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_EHC_SEL_MASK) >> AHMINTMASK_REG_EHC_SEL_SHIFT)
#define AHMINTMASK_REG_SET_EHC_SEL(AHMINTMASK_reg, EHC_SEL) { \
	FDL_ASSERT(!((EHC_SEL) & ~((1 << AHMINTMASK_REG_EHC_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_EHC_SEL_MASK) | (((unsigned long)(EHC_SEL)) << AHMINTMASK_REG_EHC_SEL_SHIFT);\
}
#define AHMINTMASK_REG_OH0_SEL_SIZE	1
#define AHMINTMASK_REG_OH0_SEL_SHIFT	5
#define AHMINTMASK_REG_OH0_SEL_MASK	0x00000020
#define AHMINTMASK_REG_GET_OH0_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_OH0_SEL_MASK) >> AHMINTMASK_REG_OH0_SEL_SHIFT)
#define AHMINTMASK_REG_SET_OH0_SEL(AHMINTMASK_reg, OH0_SEL) { \
	FDL_ASSERT(!((OH0_SEL) & ~((1 << AHMINTMASK_REG_OH0_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_OH0_SEL_MASK) | (((unsigned long)(OH0_SEL)) << AHMINTMASK_REG_OH0_SEL_SHIFT);\
}
#define AHMINTMASK_REG_OH1_SEL_SIZE	1
#define AHMINTMASK_REG_OH1_SEL_SHIFT	6
#define AHMINTMASK_REG_OH1_SEL_MASK	0x00000040
#define AHMINTMASK_REG_GET_OH1_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_OH1_SEL_MASK) >> AHMINTMASK_REG_OH1_SEL_SHIFT)
#define AHMINTMASK_REG_SET_OH1_SEL(AHMINTMASK_reg, OH1_SEL) { \
	FDL_ASSERT(!((OH1_SEL) & ~((1 << AHMINTMASK_REG_OH1_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_OH1_SEL_MASK) | (((unsigned long)(OH1_SEL)) << AHMINTMASK_REG_OH1_SEL_SHIFT);\
}
#define AHMINTMASK_REG_SD0_SEL_SIZE	1
#define AHMINTMASK_REG_SD0_SEL_SHIFT	7
#define AHMINTMASK_REG_SD0_SEL_MASK	0x00000080
#define AHMINTMASK_REG_GET_SD0_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_SD0_SEL_MASK) >> AHMINTMASK_REG_SD0_SEL_SHIFT)
#define AHMINTMASK_REG_SET_SD0_SEL(AHMINTMASK_reg, SD0_SEL) { \
	FDL_ASSERT(!((SD0_SEL) & ~((1 << AHMINTMASK_REG_SD0_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_SD0_SEL_MASK) | (((unsigned long)(SD0_SEL)) << AHMINTMASK_REG_SD0_SEL_SHIFT);\
}
#define AHMINTMASK_REG_SD1_SEL_SIZE	1
#define AHMINTMASK_REG_SD1_SEL_SHIFT	8
#define AHMINTMASK_REG_SD1_SEL_MASK	0x00000100
#define AHMINTMASK_REG_GET_SD1_SEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_SD1_SEL_MASK) >> AHMINTMASK_REG_SD1_SEL_SHIFT)
#define AHMINTMASK_REG_SET_SD1_SEL(AHMINTMASK_reg, SD1_SEL) { \
	FDL_ASSERT(!((SD1_SEL) & ~((1 << AHMINTMASK_REG_SD1_SEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_SD1_SEL_MASK) | (((unsigned long)(SD1_SEL)) << AHMINTMASK_REG_SD1_SEL_SHIFT);\
}
#define AHMINTMASK_REG_PAD0_SIZE	3
#define AHMINTMASK_REG_PAD0_SHIFT	9
#define AHMINTMASK_REG_PAD0_MASK	0x00000e00
#define AHMINTMASK_REG_GET_PAD0(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_PAD0_MASK) >> AHMINTMASK_REG_PAD0_SHIFT)
#define AHMINTMASK_REG_SET_PAD0(AHMINTMASK_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMINTMASK_REG_PAD0_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AHMINTMASK_REG_PAD0_SHIFT);\
}
#define AHMINTMASK_REG_BLKADR_MTCH_SIZE	1
#define AHMINTMASK_REG_BLKADR_MTCH_SHIFT	12
#define AHMINTMASK_REG_BLKADR_MTCH_MASK	0x00001000
#define AHMINTMASK_REG_GET_BLKADR_MTCH(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_BLKADR_MTCH_MASK) >> AHMINTMASK_REG_BLKADR_MTCH_SHIFT)
#define AHMINTMASK_REG_SET_BLKADR_MTCH(AHMINTMASK_reg, BLKADR_MTCH) { \
	FDL_ASSERT(!((BLKADR_MTCH) & ~((1 << AHMINTMASK_REG_BLKADR_MTCH_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_BLKADR_MTCH_MASK) | (((unsigned long)(BLKADR_MTCH)) << AHMINTMASK_REG_BLKADR_MTCH_SHIFT);\
}
#define AHMINTMASK_REG_HREADY0_SIZE	1
#define AHMINTMASK_REG_HREADY0_SHIFT	13
#define AHMINTMASK_REG_HREADY0_MASK	0x00002000
#define AHMINTMASK_REG_GET_HREADY0(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_HREADY0_MASK) >> AHMINTMASK_REG_HREADY0_SHIFT)
#define AHMINTMASK_REG_SET_HREADY0(AHMINTMASK_reg, HREADY0) { \
	FDL_ASSERT(!((HREADY0) & ~((1 << AHMINTMASK_REG_HREADY0_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_HREADY0_MASK) | (((unsigned long)(HREADY0)) << AHMINTMASK_REG_HREADY0_SHIFT);\
}
#define AHMINTMASK_REG_SPLIT4NODATA_SIZE	1
#define AHMINTMASK_REG_SPLIT4NODATA_SHIFT	14
#define AHMINTMASK_REG_SPLIT4NODATA_MASK	0x00004000
#define AHMINTMASK_REG_GET_SPLIT4NODATA(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_SPLIT4NODATA_MASK) >> AHMINTMASK_REG_SPLIT4NODATA_SHIFT)
#define AHMINTMASK_REG_SET_SPLIT4NODATA(AHMINTMASK_reg, SPLIT4NODATA) { \
	FDL_ASSERT(!((SPLIT4NODATA) & ~((1 << AHMINTMASK_REG_SPLIT4NODATA_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_SPLIT4NODATA_MASK) | (((unsigned long)(SPLIT4NODATA)) << AHMINTMASK_REG_SPLIT4NODATA_SHIFT);\
}
#define AHMINTMASK_REG_SPLIT4FULL_SIZE	1
#define AHMINTMASK_REG_SPLIT4FULL_SHIFT	15
#define AHMINTMASK_REG_SPLIT4FULL_MASK	0x00008000
#define AHMINTMASK_REG_GET_SPLIT4FULL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_SPLIT4FULL_MASK) >> AHMINTMASK_REG_SPLIT4FULL_SHIFT)
#define AHMINTMASK_REG_SET_SPLIT4FULL(AHMINTMASK_reg, SPLIT4FULL) { \
	FDL_ASSERT(!((SPLIT4FULL) & ~((1 << AHMINTMASK_REG_SPLIT4FULL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_SPLIT4FULL_MASK) | (((unsigned long)(SPLIT4FULL)) << AHMINTMASK_REG_SPLIT4FULL_SHIFT);\
}
#define AHMINTMASK_REG_PAD1_SIZE	15
#define AHMINTMASK_REG_PAD1_SHIFT	16
#define AHMINTMASK_REG_PAD1_MASK	0x7fff0000
#define AHMINTMASK_REG_GET_PAD1(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_PAD1_MASK) >> AHMINTMASK_REG_PAD1_SHIFT)
#define AHMINTMASK_REG_SET_PAD1(AHMINTMASK_reg, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << AHMINTMASK_REG_PAD1_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_PAD1_MASK) | (((unsigned long)(pad1)) << AHMINTMASK_REG_PAD1_SHIFT);\
}
#define AHMINTMASK_REG_CPUSEL_SIZE	1
#define AHMINTMASK_REG_CPUSEL_SHIFT	31
#define AHMINTMASK_REG_CPUSEL_MASK	0x80000000
#define AHMINTMASK_REG_GET_CPUSEL(AHMINTMASK_reg) \
	((((unsigned long)(AHMINTMASK_reg)) & AHMINTMASK_REG_CPUSEL_MASK) >> AHMINTMASK_REG_CPUSEL_SHIFT)
#define AHMINTMASK_REG_SET_CPUSEL(AHMINTMASK_reg, CPUSEL) { \
	FDL_ASSERT(!((CPUSEL) & ~((1 << AHMINTMASK_REG_CPUSEL_SIZE)-1))); \
	AHMINTMASK_reg = (((unsigned long)(AHMINTMASK_reg)) & ~AHMINTMASK_REG_CPUSEL_MASK) | (((unsigned long)(CPUSEL)) << AHMINTMASK_REG_CPUSEL_SHIFT);\
}
#define AHMINTMASK_REG_TOTAL_SIZE	32
#define AHMINTMASK_REG(EXI_DI_SEL, FLA_SEL, AES_SEL, SHA_SEL, EHC_SEL, OH0_SEL, OH1_SEL, SD0_SEL, SD1_SEL, BLKADR_MTCH, HREADY0, SPLIT4NODATA, SPLIT4FULL, CPUSEL) \
	((((unsigned long)(EXI_DI_SEL)) << AHMINTMASK_REG_EXI_DI_SEL_SHIFT) | \
	 (((unsigned long)(FLA_SEL)) << AHMINTMASK_REG_FLA_SEL_SHIFT) | \
	 (((unsigned long)(AES_SEL)) << AHMINTMASK_REG_AES_SEL_SHIFT) | \
	 (((unsigned long)(SHA_SEL)) << AHMINTMASK_REG_SHA_SEL_SHIFT) | \
	 (((unsigned long)(EHC_SEL)) << AHMINTMASK_REG_EHC_SEL_SHIFT) | \
	 (((unsigned long)(OH0_SEL)) << AHMINTMASK_REG_OH0_SEL_SHIFT) | \
	 (((unsigned long)(OH1_SEL)) << AHMINTMASK_REG_OH1_SEL_SHIFT) | \
	 (((unsigned long)(SD0_SEL)) << AHMINTMASK_REG_SD0_SEL_SHIFT) | \
	 (((unsigned long)(SD1_SEL)) << AHMINTMASK_REG_SD1_SEL_SHIFT) | \
	 (((unsigned long)(BLKADR_MTCH)) << AHMINTMASK_REG_BLKADR_MTCH_SHIFT) | \
	 (((unsigned long)(HREADY0)) << AHMINTMASK_REG_HREADY0_SHIFT) | \
	 (((unsigned long)(SPLIT4NODATA)) << AHMINTMASK_REG_SPLIT4NODATA_SHIFT) | \
	 (((unsigned long)(SPLIT4FULL)) << AHMINTMASK_REG_SPLIT4FULL_SHIFT) | \
	 (((unsigned long)(CPUSEL)) << AHMINTMASK_REG_CPUSEL_SHIFT))

/*
 *  AHMINTSTAT_reg struct
 */
#define AHMINTSTAT_REG_EXIDI_SIZE	1
#define AHMINTSTAT_REG_EXIDI_SHIFT	0
#define AHMINTSTAT_REG_EXIDI_MASK	0x00000001
#define AHMINTSTAT_REG_GET_EXIDI(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_EXIDI_MASK) >> AHMINTSTAT_REG_EXIDI_SHIFT)
#define AHMINTSTAT_REG_SET_EXIDI(AHMINTSTAT_reg, EXIDI) { \
	FDL_ASSERT(!((EXIDI) & ~((1 << AHMINTSTAT_REG_EXIDI_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_EXIDI_MASK) | (((unsigned long)(EXIDI)) << AHMINTSTAT_REG_EXIDI_SHIFT);\
}
#define AHMINTSTAT_REG_FLA_SIZE	1
#define AHMINTSTAT_REG_FLA_SHIFT	1
#define AHMINTSTAT_REG_FLA_MASK	0x00000002
#define AHMINTSTAT_REG_GET_FLA(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_FLA_MASK) >> AHMINTSTAT_REG_FLA_SHIFT)
#define AHMINTSTAT_REG_SET_FLA(AHMINTSTAT_reg, FLA) { \
	FDL_ASSERT(!((FLA) & ~((1 << AHMINTSTAT_REG_FLA_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_FLA_MASK) | (((unsigned long)(FLA)) << AHMINTSTAT_REG_FLA_SHIFT);\
}
#define AHMINTSTAT_REG_AES_SIZE	1
#define AHMINTSTAT_REG_AES_SHIFT	2
#define AHMINTSTAT_REG_AES_MASK	0x00000004
#define AHMINTSTAT_REG_GET_AES(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_AES_MASK) >> AHMINTSTAT_REG_AES_SHIFT)
#define AHMINTSTAT_REG_SET_AES(AHMINTSTAT_reg, AES) { \
	FDL_ASSERT(!((AES) & ~((1 << AHMINTSTAT_REG_AES_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_AES_MASK) | (((unsigned long)(AES)) << AHMINTSTAT_REG_AES_SHIFT);\
}
#define AHMINTSTAT_REG_SHA_SIZE	1
#define AHMINTSTAT_REG_SHA_SHIFT	3
#define AHMINTSTAT_REG_SHA_MASK	0x00000008
#define AHMINTSTAT_REG_GET_SHA(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_SHA_MASK) >> AHMINTSTAT_REG_SHA_SHIFT)
#define AHMINTSTAT_REG_SET_SHA(AHMINTSTAT_reg, SHA) { \
	FDL_ASSERT(!((SHA) & ~((1 << AHMINTSTAT_REG_SHA_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_SHA_MASK) | (((unsigned long)(SHA)) << AHMINTSTAT_REG_SHA_SHIFT);\
}
#define AHMINTSTAT_REG_EHC_SIZE	1
#define AHMINTSTAT_REG_EHC_SHIFT	4
#define AHMINTSTAT_REG_EHC_MASK	0x00000010
#define AHMINTSTAT_REG_GET_EHC(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_EHC_MASK) >> AHMINTSTAT_REG_EHC_SHIFT)
#define AHMINTSTAT_REG_SET_EHC(AHMINTSTAT_reg, EHC) { \
	FDL_ASSERT(!((EHC) & ~((1 << AHMINTSTAT_REG_EHC_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_EHC_MASK) | (((unsigned long)(EHC)) << AHMINTSTAT_REG_EHC_SHIFT);\
}
#define AHMINTSTAT_REG_OH0_SIZE	1
#define AHMINTSTAT_REG_OH0_SHIFT	5
#define AHMINTSTAT_REG_OH0_MASK	0x00000020
#define AHMINTSTAT_REG_GET_OH0(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_OH0_MASK) >> AHMINTSTAT_REG_OH0_SHIFT)
#define AHMINTSTAT_REG_SET_OH0(AHMINTSTAT_reg, OH0) { \
	FDL_ASSERT(!((OH0) & ~((1 << AHMINTSTAT_REG_OH0_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_OH0_MASK) | (((unsigned long)(OH0)) << AHMINTSTAT_REG_OH0_SHIFT);\
}
#define AHMINTSTAT_REG_OH1_SIZE	1
#define AHMINTSTAT_REG_OH1_SHIFT	6
#define AHMINTSTAT_REG_OH1_MASK	0x00000040
#define AHMINTSTAT_REG_GET_OH1(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_OH1_MASK) >> AHMINTSTAT_REG_OH1_SHIFT)
#define AHMINTSTAT_REG_SET_OH1(AHMINTSTAT_reg, OH1) { \
	FDL_ASSERT(!((OH1) & ~((1 << AHMINTSTAT_REG_OH1_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_OH1_MASK) | (((unsigned long)(OH1)) << AHMINTSTAT_REG_OH1_SHIFT);\
}
#define AHMINTSTAT_REG_SD0_SIZE	1
#define AHMINTSTAT_REG_SD0_SHIFT	7
#define AHMINTSTAT_REG_SD0_MASK	0x00000080
#define AHMINTSTAT_REG_GET_SD0(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_SD0_MASK) >> AHMINTSTAT_REG_SD0_SHIFT)
#define AHMINTSTAT_REG_SET_SD0(AHMINTSTAT_reg, SD0) { \
	FDL_ASSERT(!((SD0) & ~((1 << AHMINTSTAT_REG_SD0_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_SD0_MASK) | (((unsigned long)(SD0)) << AHMINTSTAT_REG_SD0_SHIFT);\
}
#define AHMINTSTAT_REG_SD1_SIZE	1
#define AHMINTSTAT_REG_SD1_SHIFT	8
#define AHMINTSTAT_REG_SD1_MASK	0x00000100
#define AHMINTSTAT_REG_GET_SD1(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_SD1_MASK) >> AHMINTSTAT_REG_SD1_SHIFT)
#define AHMINTSTAT_REG_SET_SD1(AHMINTSTAT_reg, SD1) { \
	FDL_ASSERT(!((SD1) & ~((1 << AHMINTSTAT_REG_SD1_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_SD1_MASK) | (((unsigned long)(SD1)) << AHMINTSTAT_REG_SD1_SHIFT);\
}
#define AHMINTSTAT_REG_PAD0_SIZE	7
#define AHMINTSTAT_REG_PAD0_SHIFT	9
#define AHMINTSTAT_REG_PAD0_MASK	0x0000fe00
#define AHMINTSTAT_REG_GET_PAD0(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_PAD0_MASK) >> AHMINTSTAT_REG_PAD0_SHIFT)
#define AHMINTSTAT_REG_SET_PAD0(AHMINTSTAT_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMINTSTAT_REG_PAD0_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AHMINTSTAT_REG_PAD0_SHIFT);\
}
#define AHMINTSTAT_REG_SPLIT4FULLCNTOVL_SIZE	1
#define AHMINTSTAT_REG_SPLIT4FULLCNTOVL_SHIFT	16
#define AHMINTSTAT_REG_SPLIT4FULLCNTOVL_MASK	0x00010000
#define AHMINTSTAT_REG_GET_SPLIT4FULLCNTOVL(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_SPLIT4FULLCNTOVL_MASK) >> AHMINTSTAT_REG_SPLIT4FULLCNTOVL_SHIFT)
#define AHMINTSTAT_REG_SET_SPLIT4FULLCNTOVL(AHMINTSTAT_reg, SPLIT4FULLCNTOVL) { \
	FDL_ASSERT(!((SPLIT4FULLCNTOVL) & ~((1 << AHMINTSTAT_REG_SPLIT4FULLCNTOVL_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_SPLIT4FULLCNTOVL_MASK) | (((unsigned long)(SPLIT4FULLCNTOVL)) << AHMINTSTAT_REG_SPLIT4FULLCNTOVL_SHIFT);\
}
#define AHMINTSTAT_REG_SPLIT4NODATACNTOVL_SIZE	1
#define AHMINTSTAT_REG_SPLIT4NODATACNTOVL_SHIFT	17
#define AHMINTSTAT_REG_SPLIT4NODATACNTOVL_MASK	0x00020000
#define AHMINTSTAT_REG_GET_SPLIT4NODATACNTOVL(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_SPLIT4NODATACNTOVL_MASK) >> AHMINTSTAT_REG_SPLIT4NODATACNTOVL_SHIFT)
#define AHMINTSTAT_REG_SET_SPLIT4NODATACNTOVL(AHMINTSTAT_reg, SPLIT4NODATACNTOVL) { \
	FDL_ASSERT(!((SPLIT4NODATACNTOVL) & ~((1 << AHMINTSTAT_REG_SPLIT4NODATACNTOVL_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_SPLIT4NODATACNTOVL_MASK) | (((unsigned long)(SPLIT4NODATACNTOVL)) << AHMINTSTAT_REG_SPLIT4NODATACNTOVL_SHIFT);\
}
#define AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_SIZE	1
#define AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_SHIFT	18
#define AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_MASK	0x00040000
#define AHMINTSTAT_REG_GET_BLKADR_MTCHCNTOVL(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_MASK) >> AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_SHIFT)
#define AHMINTSTAT_REG_SET_BLKADR_MTCHCNTOVL(AHMINTSTAT_reg, BLKADR_MTCHCNTOVL) { \
	FDL_ASSERT(!((BLKADR_MTCHCNTOVL) & ~((1 << AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_MASK) | (((unsigned long)(BLKADR_MTCHCNTOVL)) << AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_SHIFT);\
}
#define AHMINTSTAT_REG_HREADY0_CNTOVL_SIZE	1
#define AHMINTSTAT_REG_HREADY0_CNTOVL_SHIFT	19
#define AHMINTSTAT_REG_HREADY0_CNTOVL_MASK	0x00080000
#define AHMINTSTAT_REG_GET_HREADY0_CNTOVL(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_HREADY0_CNTOVL_MASK) >> AHMINTSTAT_REG_HREADY0_CNTOVL_SHIFT)
#define AHMINTSTAT_REG_SET_HREADY0_CNTOVL(AHMINTSTAT_reg, HREADY0_CNTOVL) { \
	FDL_ASSERT(!((HREADY0_CNTOVL) & ~((1 << AHMINTSTAT_REG_HREADY0_CNTOVL_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_HREADY0_CNTOVL_MASK) | (((unsigned long)(HREADY0_CNTOVL)) << AHMINTSTAT_REG_HREADY0_CNTOVL_SHIFT);\
}
#define AHMINTSTAT_REG_PAD1_SIZE	12
#define AHMINTSTAT_REG_PAD1_SHIFT	20
#define AHMINTSTAT_REG_PAD1_MASK	0xfff00000
#define AHMINTSTAT_REG_GET_PAD1(AHMINTSTAT_reg) \
	((((unsigned long)(AHMINTSTAT_reg)) & AHMINTSTAT_REG_PAD1_MASK) >> AHMINTSTAT_REG_PAD1_SHIFT)
#define AHMINTSTAT_REG_SET_PAD1(AHMINTSTAT_reg, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << AHMINTSTAT_REG_PAD1_SIZE)-1))); \
	AHMINTSTAT_reg = (((unsigned long)(AHMINTSTAT_reg)) & ~AHMINTSTAT_REG_PAD1_MASK) | (((unsigned long)(pad1)) << AHMINTSTAT_REG_PAD1_SHIFT);\
}
#define AHMINTSTAT_REG_TOTAL_SIZE	32
#define AHMINTSTAT_REG(EXIDI, FLA, AES, SHA, EHC, OH0, OH1, SD0, SD1, SPLIT4FULLCNTOVL, SPLIT4NODATACNTOVL, BLKADR_MTCHCNTOVL, HREADY0_CNTOVL) \
	((((unsigned long)(EXIDI)) << AHMINTSTAT_REG_EXIDI_SHIFT) | \
	 (((unsigned long)(FLA)) << AHMINTSTAT_REG_FLA_SHIFT) | \
	 (((unsigned long)(AES)) << AHMINTSTAT_REG_AES_SHIFT) | \
	 (((unsigned long)(SHA)) << AHMINTSTAT_REG_SHA_SHIFT) | \
	 (((unsigned long)(EHC)) << AHMINTSTAT_REG_EHC_SHIFT) | \
	 (((unsigned long)(OH0)) << AHMINTSTAT_REG_OH0_SHIFT) | \
	 (((unsigned long)(OH1)) << AHMINTSTAT_REG_OH1_SHIFT) | \
	 (((unsigned long)(SD0)) << AHMINTSTAT_REG_SD0_SHIFT) | \
	 (((unsigned long)(SD1)) << AHMINTSTAT_REG_SD1_SHIFT) | \
	 (((unsigned long)(SPLIT4FULLCNTOVL)) << AHMINTSTAT_REG_SPLIT4FULLCNTOVL_SHIFT) | \
	 (((unsigned long)(SPLIT4NODATACNTOVL)) << AHMINTSTAT_REG_SPLIT4NODATACNTOVL_SHIFT) | \
	 (((unsigned long)(BLKADR_MTCHCNTOVL)) << AHMINTSTAT_REG_BLKADR_MTCHCNTOVL_SHIFT) | \
	 (((unsigned long)(HREADY0_CNTOVL)) << AHMINTSTAT_REG_HREADY0_CNTOVL_SHIFT))

/*
 *  ACRWDGCFG_reg struct
 */
#define ACRWDGCFG_REG_CLR_INTRPT_SIZE	1
#define ACRWDGCFG_REG_CLR_INTRPT_SHIFT	0
#define ACRWDGCFG_REG_CLR_INTRPT_MASK	0x00000001
#define ACRWDGCFG_REG_GET_CLR_INTRPT(ACRWDGCFG_reg) \
	((((unsigned long)(ACRWDGCFG_reg)) & ACRWDGCFG_REG_CLR_INTRPT_MASK) >> ACRWDGCFG_REG_CLR_INTRPT_SHIFT)
#define ACRWDGCFG_REG_SET_CLR_INTRPT(ACRWDGCFG_reg, CLR_INTRPT) { \
	FDL_ASSERT(!((CLR_INTRPT) & ~((1 << ACRWDGCFG_REG_CLR_INTRPT_SIZE)-1))); \
	ACRWDGCFG_reg = (((unsigned long)(ACRWDGCFG_reg)) & ~ACRWDGCFG_REG_CLR_INTRPT_MASK) | (((unsigned long)(CLR_INTRPT)) << ACRWDGCFG_REG_CLR_INTRPT_SHIFT);\
}
#define ACRWDGCFG_REG_WTIMER_SIZE	2
#define ACRWDGCFG_REG_WTIMER_SHIFT	1
#define ACRWDGCFG_REG_WTIMER_MASK	0x00000006
#define ACRWDGCFG_REG_GET_WTIMER(ACRWDGCFG_reg) \
	((((unsigned long)(ACRWDGCFG_reg)) & ACRWDGCFG_REG_WTIMER_MASK) >> ACRWDGCFG_REG_WTIMER_SHIFT)
#define ACRWDGCFG_REG_SET_WTIMER(ACRWDGCFG_reg, WTIMER) { \
	FDL_ASSERT(!((WTIMER) & ~((1 << ACRWDGCFG_REG_WTIMER_SIZE)-1))); \
	ACRWDGCFG_reg = (((unsigned long)(ACRWDGCFG_reg)) & ~ACRWDGCFG_REG_WTIMER_MASK) | (((unsigned long)(WTIMER)) << ACRWDGCFG_REG_WTIMER_SHIFT);\
}
#define ACRWDGCFG_REG_PAD0_SIZE	29
#define ACRWDGCFG_REG_PAD0_SHIFT	3
#define ACRWDGCFG_REG_PAD0_MASK	0xfffffff8
#define ACRWDGCFG_REG_GET_PAD0(ACRWDGCFG_reg) \
	((((unsigned long)(ACRWDGCFG_reg)) & ACRWDGCFG_REG_PAD0_MASK) >> ACRWDGCFG_REG_PAD0_SHIFT)
#define ACRWDGCFG_REG_SET_PAD0(ACRWDGCFG_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRWDGCFG_REG_PAD0_SIZE)-1))); \
	ACRWDGCFG_reg = (((unsigned long)(ACRWDGCFG_reg)) & ~ACRWDGCFG_REG_PAD0_MASK) | (((unsigned long)(pad0)) << ACRWDGCFG_REG_PAD0_SHIFT);\
}
#define ACRWDGCFG_REG_TOTAL_SIZE	32
#define ACRWDGCFG_REG(CLR_INTRPT, WTIMER) \
	((((unsigned long)(CLR_INTRPT)) << ACRWDGCFG_REG_CLR_INTRPT_SHIFT) | \
	 (((unsigned long)(WTIMER)) << ACRWDGCFG_REG_WTIMER_SHIFT))

/*
 *  FLA_SEQ_reg_addr value
 */
#define FLACTRL	0x000
#define FLACFG	0x004
#define FLAAD0	0x008
#define FLAAD1	0x00c
#define FLAMA0	0x010
#define FLAMA1	0x014
#define FLADIV	0x018

/*
 *  FLACTRL_reg struct
 */
#define FLACTRL_REG_SIZE_SIZE	12
#define FLACTRL_REG_SIZE_SHIFT	0
#define FLACTRL_REG_SIZE_MASK	0x00000fff
#define FLACTRL_REG_GET_SIZE(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_SIZE_MASK) >> FLACTRL_REG_SIZE_SHIFT)
#define FLACTRL_REG_SET_SIZE(FLACTRL_reg, SIZE) { \
	FDL_ASSERT(!((SIZE) & ~((1 << FLACTRL_REG_SIZE_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_SIZE_MASK) | (((unsigned long)(SIZE)) << FLACTRL_REG_SIZE_SHIFT);\
}
#define FLACTRL_REG_ECC_SIZE	1
#define FLACTRL_REG_ECC_SHIFT	12
#define FLACTRL_REG_ECC_MASK	0x00001000
#define FLACTRL_REG_GET_ECC(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_ECC_MASK) >> FLACTRL_REG_ECC_SHIFT)
#define FLACTRL_REG_SET_ECC(FLACTRL_reg, ECC) { \
	FDL_ASSERT(!((ECC) & ~((1 << FLACTRL_REG_ECC_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_ECC_MASK) | (((unsigned long)(ECC)) << FLACTRL_REG_ECC_SHIFT);\
}
#define FLACTRL_REG_RDP_SIZE	1
#define FLACTRL_REG_RDP_SHIFT	13
#define FLACTRL_REG_RDP_MASK	0x00002000
#define FLACTRL_REG_GET_RDP(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_RDP_MASK) >> FLACTRL_REG_RDP_SHIFT)
#define FLACTRL_REG_SET_RDP(FLACTRL_reg, RDP) { \
	FDL_ASSERT(!((RDP) & ~((1 << FLACTRL_REG_RDP_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_RDP_MASK) | (((unsigned long)(RDP)) << FLACTRL_REG_RDP_SHIFT);\
}
#define FLACTRL_REG_WDP_SIZE	1
#define FLACTRL_REG_WDP_SHIFT	14
#define FLACTRL_REG_WDP_MASK	0x00004000
#define FLACTRL_REG_GET_WDP(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_WDP_MASK) >> FLACTRL_REG_WDP_SHIFT)
#define FLACTRL_REG_SET_WDP(FLACTRL_reg, WDP) { \
	FDL_ASSERT(!((WDP) & ~((1 << FLACTRL_REG_WDP_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_WDP_MASK) | (((unsigned long)(WDP)) << FLACTRL_REG_WDP_SHIFT);\
}
#define FLACTRL_REG_RDY_SIZE	1
#define FLACTRL_REG_RDY_SHIFT	15
#define FLACTRL_REG_RDY_MASK	0x00008000
#define FLACTRL_REG_GET_RDY(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_RDY_MASK) >> FLACTRL_REG_RDY_SHIFT)
#define FLACTRL_REG_SET_RDY(FLACTRL_reg, RDY) { \
	FDL_ASSERT(!((RDY) & ~((1 << FLACTRL_REG_RDY_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_RDY_MASK) | (((unsigned long)(RDY)) << FLACTRL_REG_RDY_SHIFT);\
}
#define FLACTRL_REG_CMD_SIZE	8
#define FLACTRL_REG_CMD_SHIFT	16
#define FLACTRL_REG_CMD_MASK	0x00ff0000
#define FLACTRL_REG_GET_CMD(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_CMD_MASK) >> FLACTRL_REG_CMD_SHIFT)
#define FLACTRL_REG_SET_CMD(FLACTRL_reg, CMD) { \
	FDL_ASSERT(!((CMD) & ~((1 << FLACTRL_REG_CMD_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_CMD_MASK) | (((unsigned long)(CMD)) << FLACTRL_REG_CMD_SHIFT);\
}
#define FLACTRL_REG_ADP_SIZE	5
#define FLACTRL_REG_ADP_SHIFT	24
#define FLACTRL_REG_ADP_MASK	0x1f000000
#define FLACTRL_REG_GET_ADP(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_ADP_MASK) >> FLACTRL_REG_ADP_SHIFT)
#define FLACTRL_REG_SET_ADP(FLACTRL_reg, ADP) { \
	FDL_ASSERT(!((ADP) & ~((1 << FLACTRL_REG_ADP_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_ADP_MASK) | (((unsigned long)(ADP)) << FLACTRL_REG_ADP_SHIFT);\
}
#define FLACTRL_REG_MVIOL_SIZE	1
#define FLACTRL_REG_MVIOL_SHIFT	29
#define FLACTRL_REG_MVIOL_MASK	0x20000000
#define FLACTRL_REG_GET_MVIOL(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_MVIOL_MASK) >> FLACTRL_REG_MVIOL_SHIFT)
#define FLACTRL_REG_SET_MVIOL(FLACTRL_reg, MVIOL) { \
	FDL_ASSERT(!((MVIOL) & ~((1 << FLACTRL_REG_MVIOL_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_MVIOL_MASK) | (((unsigned long)(MVIOL)) << FLACTRL_REG_MVIOL_SHIFT);\
}
#define FLACTRL_REG_MASK_SIZE	1
#define FLACTRL_REG_MASK_SHIFT	30
#define FLACTRL_REG_MASK_MASK	0x40000000
#define FLACTRL_REG_GET_MASK(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_MASK_MASK) >> FLACTRL_REG_MASK_SHIFT)
#define FLACTRL_REG_SET_MASK(FLACTRL_reg, MASK) { \
	FDL_ASSERT(!((MASK) & ~((1 << FLACTRL_REG_MASK_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_MASK_MASK) | (((unsigned long)(MASK)) << FLACTRL_REG_MASK_SHIFT);\
}
#define FLACTRL_REG_EXEC_SIZE	1
#define FLACTRL_REG_EXEC_SHIFT	31
#define FLACTRL_REG_EXEC_MASK	0x80000000
#define FLACTRL_REG_GET_EXEC(FLACTRL_reg) \
	((((unsigned long)(FLACTRL_reg)) & FLACTRL_REG_EXEC_MASK) >> FLACTRL_REG_EXEC_SHIFT)
#define FLACTRL_REG_SET_EXEC(FLACTRL_reg, EXEC) { \
	FDL_ASSERT(!((EXEC) & ~((1 << FLACTRL_REG_EXEC_SIZE)-1))); \
	FLACTRL_reg = (((unsigned long)(FLACTRL_reg)) & ~FLACTRL_REG_EXEC_MASK) | (((unsigned long)(EXEC)) << FLACTRL_REG_EXEC_SHIFT);\
}
#define FLACTRL_REG_TOTAL_SIZE	32
#define FLACTRL_REG(SIZE, ECC, RDP, WDP, RDY, CMD, ADP, MVIOL, MASK, EXEC) \
	((((unsigned long)(SIZE)) << FLACTRL_REG_SIZE_SHIFT) | \
	 (((unsigned long)(ECC)) << FLACTRL_REG_ECC_SHIFT) | \
	 (((unsigned long)(RDP)) << FLACTRL_REG_RDP_SHIFT) | \
	 (((unsigned long)(WDP)) << FLACTRL_REG_WDP_SHIFT) | \
	 (((unsigned long)(RDY)) << FLACTRL_REG_RDY_SHIFT) | \
	 (((unsigned long)(CMD)) << FLACTRL_REG_CMD_SHIFT) | \
	 (((unsigned long)(ADP)) << FLACTRL_REG_ADP_SHIFT) | \
	 (((unsigned long)(MVIOL)) << FLACTRL_REG_MVIOL_SHIFT) | \
	 (((unsigned long)(MASK)) << FLACTRL_REG_MASK_SHIFT) | \
	 (((unsigned long)(EXEC)) << FLACTRL_REG_EXEC_SHIFT))

/*
 *  FLACFG_reg struct
 */
#define FLACFG_REG_CAA_SIZE	8
#define FLACFG_REG_CAA_SHIFT	0
#define FLACFG_REG_CAA_MASK	0x000000ff
#define FLACFG_REG_GET_CAA(FLACFG_reg) \
	((((unsigned long)(FLACFG_reg)) & FLACFG_REG_CAA_MASK) >> FLACFG_REG_CAA_SHIFT)
#define FLACFG_REG_SET_CAA(FLACFG_reg, CAA) { \
	FDL_ASSERT(!((CAA) & ~((1 << FLACFG_REG_CAA_SIZE)-1))); \
	FLACFG_reg = (((unsigned long)(FLACFG_reg)) & ~FLACFG_REG_CAA_MASK) | (((unsigned long)(CAA)) << FLACFG_REG_CAA_SHIFT);\
}
#define FLACFG_REG_WEA_SIZE	8
#define FLACFG_REG_WEA_SHIFT	8
#define FLACFG_REG_WEA_MASK	0x0000ff00
#define FLACFG_REG_GET_WEA(FLACFG_reg) \
	((((unsigned long)(FLACFG_reg)) & FLACFG_REG_WEA_MASK) >> FLACFG_REG_WEA_SHIFT)
#define FLACFG_REG_SET_WEA(FLACFG_reg, WEA) { \
	FDL_ASSERT(!((WEA) & ~((1 << FLACFG_REG_WEA_SIZE)-1))); \
	FLACFG_reg = (((unsigned long)(FLACFG_reg)) & ~FLACFG_REG_WEA_MASK) | (((unsigned long)(WEA)) << FLACFG_REG_WEA_SHIFT);\
}
#define FLACFG_REG_REA_SIZE	8
#define FLACFG_REG_REA_SHIFT	16
#define FLACFG_REG_REA_MASK	0x00ff0000
#define FLACFG_REG_GET_REA(FLACFG_reg) \
	((((unsigned long)(FLACFG_reg)) & FLACFG_REG_REA_MASK) >> FLACFG_REG_REA_SHIFT)
#define FLACFG_REG_SET_REA(FLACFG_reg, REA) { \
	FDL_ASSERT(!((REA) & ~((1 << FLACFG_REG_REA_SIZE)-1))); \
	FLACFG_reg = (((unsigned long)(FLACFG_reg)) & ~FLACFG_REG_REA_MASK) | (((unsigned long)(REA)) << FLACFG_REG_REA_SHIFT);\
}
#define FLACFG_REG_RSA_SIZE	3
#define FLACFG_REG_RSA_SHIFT	24
#define FLACFG_REG_RSA_MASK	0x07000000
#define FLACFG_REG_GET_RSA(FLACFG_reg) \
	((((unsigned long)(FLACFG_reg)) & FLACFG_REG_RSA_MASK) >> FLACFG_REG_RSA_SHIFT)
#define FLACFG_REG_SET_RSA(FLACFG_reg, RSA) { \
	FDL_ASSERT(!((RSA) & ~((1 << FLACFG_REG_RSA_SIZE)-1))); \
	FLACFG_reg = (((unsigned long)(FLACFG_reg)) & ~FLACFG_REG_RSA_MASK) | (((unsigned long)(RSA)) << FLACFG_REG_RSA_SHIFT);\
}
#define FLACFG_REG_DEV_SIZE	1
#define FLACFG_REG_DEV_SHIFT	27
#define FLACFG_REG_DEV_MASK	0x08000000
#define FLACFG_REG_GET_DEV(FLACFG_reg) \
	((((unsigned long)(FLACFG_reg)) & FLACFG_REG_DEV_MASK) >> FLACFG_REG_DEV_SHIFT)
#define FLACFG_REG_SET_DEV(FLACFG_reg, DEV) { \
	FDL_ASSERT(!((DEV) & ~((1 << FLACFG_REG_DEV_SIZE)-1))); \
	FLACFG_reg = (((unsigned long)(FLACFG_reg)) & ~FLACFG_REG_DEV_MASK) | (((unsigned long)(DEV)) << FLACFG_REG_DEV_SHIFT);\
}
#define FLACFG_REG_EOC_SIZE	3
#define FLACFG_REG_EOC_SHIFT	28
#define FLACFG_REG_EOC_MASK	0x70000000
#define FLACFG_REG_GET_EOC(FLACFG_reg) \
	((((unsigned long)(FLACFG_reg)) & FLACFG_REG_EOC_MASK) >> FLACFG_REG_EOC_SHIFT)
#define FLACFG_REG_SET_EOC(FLACFG_reg, EOC) { \
	FDL_ASSERT(!((EOC) & ~((1 << FLACFG_REG_EOC_SIZE)-1))); \
	FLACFG_reg = (((unsigned long)(FLACFG_reg)) & ~FLACFG_REG_EOC_MASK) | (((unsigned long)(EOC)) << FLACFG_REG_EOC_SHIFT);\
}
#define FLACFG_REG_WP_SIZE	1
#define FLACFG_REG_WP_SHIFT	31
#define FLACFG_REG_WP_MASK	0x80000000
#define FLACFG_REG_GET_WP(FLACFG_reg) \
	((((unsigned long)(FLACFG_reg)) & FLACFG_REG_WP_MASK) >> FLACFG_REG_WP_SHIFT)
#define FLACFG_REG_SET_WP(FLACFG_reg, WP) { \
	FDL_ASSERT(!((WP) & ~((1 << FLACFG_REG_WP_SIZE)-1))); \
	FLACFG_reg = (((unsigned long)(FLACFG_reg)) & ~FLACFG_REG_WP_MASK) | (((unsigned long)(WP)) << FLACFG_REG_WP_SHIFT);\
}
#define FLACFG_REG_TOTAL_SIZE	32
#define FLACFG_REG(CAA, WEA, REA, RSA, DEV, EOC, WP) \
	((((unsigned long)(CAA)) << FLACFG_REG_CAA_SHIFT) | \
	 (((unsigned long)(WEA)) << FLACFG_REG_WEA_SHIFT) | \
	 (((unsigned long)(REA)) << FLACFG_REG_REA_SHIFT) | \
	 (((unsigned long)(RSA)) << FLACFG_REG_RSA_SHIFT) | \
	 (((unsigned long)(DEV)) << FLACFG_REG_DEV_SHIFT) | \
	 (((unsigned long)(EOC)) << FLACFG_REG_EOC_SHIFT) | \
	 (((unsigned long)(WP)) << FLACFG_REG_WP_SHIFT))

/*
 *  SRN_ROM_MIN value
 */
#define SRN_ROM_MIN	0x3f0000

/*
 *  AES_reg_addr value
 */
#define AESCTRL	0x000
#define AESRDPTR	0x004
#define AESWRPTR	0x008
#define AESWKEY	0x00c
#define AESWIV	0x010

/*
 *  AESCTRL_reg struct
 */
#define AESCTRL_REG_SIZE_SIZE	10
#define AESCTRL_REG_SIZE_SHIFT	0
#define AESCTRL_REG_SIZE_MASK	0x000003ff
#define AESCTRL_REG_GET_SIZE(AESCTRL_reg) \
	((((unsigned long)(AESCTRL_reg)) & AESCTRL_REG_SIZE_MASK) >> AESCTRL_REG_SIZE_SHIFT)
#define AESCTRL_REG_SET_SIZE(AESCTRL_reg, SIZE) { \
	FDL_ASSERT(!((SIZE) & ~((1 << AESCTRL_REG_SIZE_SIZE)-1))); \
	AESCTRL_reg = (((unsigned long)(AESCTRL_reg)) & ~AESCTRL_REG_SIZE_MASK) | (((unsigned long)(SIZE)) << AESCTRL_REG_SIZE_SHIFT);\
}
#define AESCTRL_REG_PAD0_SIZE	19
#define AESCTRL_REG_PAD0_SHIFT	10
#define AESCTRL_REG_PAD0_MASK	0x1ffffc00
#define AESCTRL_REG_GET_PAD0(AESCTRL_reg) \
	((((unsigned long)(AESCTRL_reg)) & AESCTRL_REG_PAD0_MASK) >> AESCTRL_REG_PAD0_SHIFT)
#define AESCTRL_REG_SET_PAD0(AESCTRL_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AESCTRL_REG_PAD0_SIZE)-1))); \
	AESCTRL_reg = (((unsigned long)(AESCTRL_reg)) & ~AESCTRL_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AESCTRL_REG_PAD0_SHIFT);\
}
#define AESCTRL_REG_MVIOL_SIZE	1
#define AESCTRL_REG_MVIOL_SHIFT	29
#define AESCTRL_REG_MVIOL_MASK	0x20000000
#define AESCTRL_REG_GET_MVIOL(AESCTRL_reg) \
	((((unsigned long)(AESCTRL_reg)) & AESCTRL_REG_MVIOL_MASK) >> AESCTRL_REG_MVIOL_SHIFT)
#define AESCTRL_REG_SET_MVIOL(AESCTRL_reg, MVIOL) { \
	FDL_ASSERT(!((MVIOL) & ~((1 << AESCTRL_REG_MVIOL_SIZE)-1))); \
	AESCTRL_reg = (((unsigned long)(AESCTRL_reg)) & ~AESCTRL_REG_MVIOL_MASK) | (((unsigned long)(MVIOL)) << AESCTRL_REG_MVIOL_SHIFT);\
}
#define AESCTRL_REG_MASK_SIZE	1
#define AESCTRL_REG_MASK_SHIFT	30
#define AESCTRL_REG_MASK_MASK	0x40000000
#define AESCTRL_REG_GET_MASK(AESCTRL_reg) \
	((((unsigned long)(AESCTRL_reg)) & AESCTRL_REG_MASK_MASK) >> AESCTRL_REG_MASK_SHIFT)
#define AESCTRL_REG_SET_MASK(AESCTRL_reg, MASK) { \
	FDL_ASSERT(!((MASK) & ~((1 << AESCTRL_REG_MASK_SIZE)-1))); \
	AESCTRL_reg = (((unsigned long)(AESCTRL_reg)) & ~AESCTRL_REG_MASK_MASK) | (((unsigned long)(MASK)) << AESCTRL_REG_MASK_SHIFT);\
}
#define AESCTRL_REG_EXEC_SIZE	1
#define AESCTRL_REG_EXEC_SHIFT	31
#define AESCTRL_REG_EXEC_MASK	0x80000000
#define AESCTRL_REG_GET_EXEC(AESCTRL_reg) \
	((((unsigned long)(AESCTRL_reg)) & AESCTRL_REG_EXEC_MASK) >> AESCTRL_REG_EXEC_SHIFT)
#define AESCTRL_REG_SET_EXEC(AESCTRL_reg, EXEC) { \
	FDL_ASSERT(!((EXEC) & ~((1 << AESCTRL_REG_EXEC_SIZE)-1))); \
	AESCTRL_reg = (((unsigned long)(AESCTRL_reg)) & ~AESCTRL_REG_EXEC_MASK) | (((unsigned long)(EXEC)) << AESCTRL_REG_EXEC_SHIFT);\
}
#define AESCTRL_REG_TOTAL_SIZE	32
#define AESCTRL_REG(SIZE, MVIOL, MASK, EXEC) \
	((((unsigned long)(SIZE)) << AESCTRL_REG_SIZE_SHIFT) | \
	 (((unsigned long)(MVIOL)) << AESCTRL_REG_MVIOL_SHIFT) | \
	 (((unsigned long)(MASK)) << AESCTRL_REG_MASK_SHIFT) | \
	 (((unsigned long)(EXEC)) << AESCTRL_REG_EXEC_SHIFT))

/*
 *  AESRDPTR_reg struct
 */
#define AESRDPTR_REG_PAD0_SIZE	4
#define AESRDPTR_REG_PAD0_SHIFT	0
#define AESRDPTR_REG_PAD0_MASK	0x0000000f
#define AESRDPTR_REG_GET_PAD0(AESRDPTR_reg) \
	((((unsigned long)(AESRDPTR_reg)) & AESRDPTR_REG_PAD0_MASK) >> AESRDPTR_REG_PAD0_SHIFT)
#define AESRDPTR_REG_SET_PAD0(AESRDPTR_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AESRDPTR_REG_PAD0_SIZE)-1))); \
	AESRDPTR_reg = (((unsigned long)(AESRDPTR_reg)) & ~AESRDPTR_REG_PAD0_MASK) | (((unsigned long)(pad0)) << AESRDPTR_REG_PAD0_SHIFT);\
}
#define AESRDPTR_REG_RPTR_SIZE	28
#define AESRDPTR_REG_RPTR_SHIFT	4
#define AESRDPTR_REG_RPTR_MASK	0xfffffff0
#define AESRDPTR_REG_GET_RPTR(AESRDPTR_reg) \
	((((unsigned long)(AESRDPTR_reg)) & AESRDPTR_REG_RPTR_MASK) >> AESRDPTR_REG_RPTR_SHIFT)
#define AESRDPTR_REG_SET_RPTR(AESRDPTR_reg, RPTR) { \
	FDL_ASSERT(!((RPTR) & ~((1 << AESRDPTR_REG_RPTR_SIZE)-1))); \
	AESRDPTR_reg = (((unsigned long)(AESRDPTR_reg)) & ~AESRDPTR_REG_RPTR_MASK) | (((unsigned long)(RPTR)) << AESRDPTR_REG_RPTR_SHIFT);\
}
#define AESRDPTR_REG_TOTAL_SIZE	32
#define AESRDPTR_REG(RPTR) \
	((((unsigned long)(RPTR)) << AESRDPTR_REG_RPTR_SHIFT))

/*
 *  SHA_addr value
 */
#define SHACTRL	0x000
#define SHARPTR	0x004
#define SHABUF0	0x008
#define SHABUF1	0x00c
#define SHABUF2	0x010
#define SHABUF3	0x014
#define SHABUF4	0x018

/*
 *  SHACTRL_reg struct
 */
#define SHACTRL_REG_SIZE_SIZE	10
#define SHACTRL_REG_SIZE_SHIFT	0
#define SHACTRL_REG_SIZE_MASK	0x000003ff
#define SHACTRL_REG_GET_SIZE(SHACTRL_reg) \
	((((unsigned long)(SHACTRL_reg)) & SHACTRL_REG_SIZE_MASK) >> SHACTRL_REG_SIZE_SHIFT)
#define SHACTRL_REG_SET_SIZE(SHACTRL_reg, SIZE) { \
	FDL_ASSERT(!((SIZE) & ~((1 << SHACTRL_REG_SIZE_SIZE)-1))); \
	SHACTRL_reg = (((unsigned long)(SHACTRL_reg)) & ~SHACTRL_REG_SIZE_MASK) | (((unsigned long)(SIZE)) << SHACTRL_REG_SIZE_SHIFT);\
}
#define SHACTRL_REG_PAD0_SIZE	19
#define SHACTRL_REG_PAD0_SHIFT	10
#define SHACTRL_REG_PAD0_MASK	0x1ffffc00
#define SHACTRL_REG_GET_PAD0(SHACTRL_reg) \
	((((unsigned long)(SHACTRL_reg)) & SHACTRL_REG_PAD0_MASK) >> SHACTRL_REG_PAD0_SHIFT)
#define SHACTRL_REG_SET_PAD0(SHACTRL_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SHACTRL_REG_PAD0_SIZE)-1))); \
	SHACTRL_reg = (((unsigned long)(SHACTRL_reg)) & ~SHACTRL_REG_PAD0_MASK) | (((unsigned long)(pad0)) << SHACTRL_REG_PAD0_SHIFT);\
}
#define SHACTRL_REG_MVIOL_SIZE	1
#define SHACTRL_REG_MVIOL_SHIFT	29
#define SHACTRL_REG_MVIOL_MASK	0x20000000
#define SHACTRL_REG_GET_MVIOL(SHACTRL_reg) \
	((((unsigned long)(SHACTRL_reg)) & SHACTRL_REG_MVIOL_MASK) >> SHACTRL_REG_MVIOL_SHIFT)
#define SHACTRL_REG_SET_MVIOL(SHACTRL_reg, MVIOL) { \
	FDL_ASSERT(!((MVIOL) & ~((1 << SHACTRL_REG_MVIOL_SIZE)-1))); \
	SHACTRL_reg = (((unsigned long)(SHACTRL_reg)) & ~SHACTRL_REG_MVIOL_MASK) | (((unsigned long)(MVIOL)) << SHACTRL_REG_MVIOL_SHIFT);\
}
#define SHACTRL_REG_MASK_SIZE	1
#define SHACTRL_REG_MASK_SHIFT	30
#define SHACTRL_REG_MASK_MASK	0x40000000
#define SHACTRL_REG_GET_MASK(SHACTRL_reg) \
	((((unsigned long)(SHACTRL_reg)) & SHACTRL_REG_MASK_MASK) >> SHACTRL_REG_MASK_SHIFT)
#define SHACTRL_REG_SET_MASK(SHACTRL_reg, MASK) { \
	FDL_ASSERT(!((MASK) & ~((1 << SHACTRL_REG_MASK_SIZE)-1))); \
	SHACTRL_reg = (((unsigned long)(SHACTRL_reg)) & ~SHACTRL_REG_MASK_MASK) | (((unsigned long)(MASK)) << SHACTRL_REG_MASK_SHIFT);\
}
#define SHACTRL_REG_EXEC_SIZE	1
#define SHACTRL_REG_EXEC_SHIFT	31
#define SHACTRL_REG_EXEC_MASK	0x80000000
#define SHACTRL_REG_GET_EXEC(SHACTRL_reg) \
	((((unsigned long)(SHACTRL_reg)) & SHACTRL_REG_EXEC_MASK) >> SHACTRL_REG_EXEC_SHIFT)
#define SHACTRL_REG_SET_EXEC(SHACTRL_reg, EXEC) { \
	FDL_ASSERT(!((EXEC) & ~((1 << SHACTRL_REG_EXEC_SIZE)-1))); \
	SHACTRL_reg = (((unsigned long)(SHACTRL_reg)) & ~SHACTRL_REG_EXEC_MASK) | (((unsigned long)(EXEC)) << SHACTRL_REG_EXEC_SHIFT);\
}
#define SHACTRL_REG_TOTAL_SIZE	32
#define SHACTRL_REG(SIZE, MVIOL, MASK, EXEC) \
	((((unsigned long)(SIZE)) << SHACTRL_REG_SIZE_SHIFT) | \
	 (((unsigned long)(MVIOL)) << SHACTRL_REG_MVIOL_SHIFT) | \
	 (((unsigned long)(MASK)) << SHACTRL_REG_MASK_SHIFT) | \
	 (((unsigned long)(EXEC)) << SHACTRL_REG_EXEC_SHIFT))

/*
 *  SHARPTR_reg struct
 */
#define SHARPTR_REG_PAD0_SIZE	4
#define SHARPTR_REG_PAD0_SHIFT	0
#define SHARPTR_REG_PAD0_MASK	0x0000000f
#define SHARPTR_REG_GET_PAD0(SHARPTR_reg) \
	((((unsigned long)(SHARPTR_reg)) & SHARPTR_REG_PAD0_MASK) >> SHARPTR_REG_PAD0_SHIFT)
#define SHARPTR_REG_SET_PAD0(SHARPTR_reg, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << SHARPTR_REG_PAD0_SIZE)-1))); \
	SHARPTR_reg = (((unsigned long)(SHARPTR_reg)) & ~SHARPTR_REG_PAD0_MASK) | (((unsigned long)(pad0)) << SHARPTR_REG_PAD0_SHIFT);\
}
#define SHARPTR_REG_RPTR_SIZE	28
#define SHARPTR_REG_RPTR_SHIFT	4
#define SHARPTR_REG_RPTR_MASK	0xfffffff0
#define SHARPTR_REG_GET_RPTR(SHARPTR_reg) \
	((((unsigned long)(SHARPTR_reg)) & SHARPTR_REG_RPTR_MASK) >> SHARPTR_REG_RPTR_SHIFT)
#define SHARPTR_REG_SET_RPTR(SHARPTR_reg, RPTR) { \
	FDL_ASSERT(!((RPTR) & ~((1 << SHARPTR_REG_RPTR_SIZE)-1))); \
	SHARPTR_reg = (((unsigned long)(SHARPTR_reg)) & ~SHARPTR_REG_RPTR_MASK) | (((unsigned long)(RPTR)) << SHARPTR_REG_RPTR_SHIFT);\
}
#define SHARPTR_REG_TOTAL_SIZE	32
#define SHARPTR_REG(RPTR) \
	((((unsigned long)(RPTR)) << SHARPTR_REG_RPTR_SHIFT))

/*
 *  OHC_reg_index value
 */
#define HCREV_OFFSET	0x000
#define HCCTRL_OFFSET	0x004
#define HCCMDSTAT_OFFSET	0x008
#define HCINTSTAT_OFFSET	0x00c
#define HCINTEN_OFFSET	0x010
#define HCINTDIS_OFFSET	0x014
#define HCHCCA_OFFSET	0x018
#define HCPERCUR_OFFSET	0x01c
#define HCCTRLHD_OFFSET	0x020
#define HCCTRLCUR_OFFSET	0x024
#define HCBLKHD_OFFSET	0x028
#define HCBLKCUR_OFFSET	0x02c
#define HCDNHD_OFFSET	0x030
#define HCFMINT_OFFSET	0x034
#define HCFMREM_OFFSET	0x038
#define HCFMNUM_OFFSET	0x03c
#define HCPERST_OFFSET	0x040
#define HCLSTHRESH_OFFSET	0x044
#define HCRHDESCA_OFFSET	0x048
#define HCRHDESCB_OFFSET	0x04c
#define HCRHSTAT_OFFSET	0x050
#define HCRHPORT1STAT_OFFSET	0x054
#define HCRHPORT2STAT_OFFSET	0x058

/*
 *  HCREV struct
 */
#define HCREV_REV_SIZE	8
#define HCREV_REV_SHIFT	0
#define HCREV_REV_MASK	0x000000ff
#define HCREV_GET_REV(HCREV) \
	((((unsigned long)(HCREV)) & HCREV_REV_MASK) >> HCREV_REV_SHIFT)
#define HCREV_SET_REV(HCREV, REV) { \
	FDL_ASSERT(!((REV) & ~((1 << HCREV_REV_SIZE)-1))); \
	HCREV = (((unsigned long)(HCREV)) & ~HCREV_REV_MASK) | (((unsigned long)(REV)) << HCREV_REV_SHIFT);\
}
#define HCREV_PAD0_SIZE	24
#define HCREV_PAD0_SHIFT	8
#define HCREV_PAD0_MASK	0xffffff00
#define HCREV_GET_PAD0(HCREV) \
	((((unsigned long)(HCREV)) & HCREV_PAD0_MASK) >> HCREV_PAD0_SHIFT)
#define HCREV_SET_PAD0(HCREV, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCREV_PAD0_SIZE)-1))); \
	HCREV = (((unsigned long)(HCREV)) & ~HCREV_PAD0_MASK) | (((unsigned long)(pad0)) << HCREV_PAD0_SHIFT);\
}
#define HCREV_TOTAL_SIZE	32
#define HCREV(REV) \
	((((unsigned long)(REV)) << HCREV_REV_SHIFT))

/*
 *  HCCTRL struct
 */
#define HCCTRL_CBSR_SIZE	2
#define HCCTRL_CBSR_SHIFT	0
#define HCCTRL_CBSR_MASK	0x00000003
#define HCCTRL_GET_CBSR(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_CBSR_MASK) >> HCCTRL_CBSR_SHIFT)
#define HCCTRL_SET_CBSR(HCCTRL, CBSR) { \
	FDL_ASSERT(!((CBSR) & ~((1 << HCCTRL_CBSR_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_CBSR_MASK) | (((unsigned long)(CBSR)) << HCCTRL_CBSR_SHIFT);\
}
#define HCCTRL_PLE_SIZE	1
#define HCCTRL_PLE_SHIFT	2
#define HCCTRL_PLE_MASK	0x00000004
#define HCCTRL_GET_PLE(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_PLE_MASK) >> HCCTRL_PLE_SHIFT)
#define HCCTRL_SET_PLE(HCCTRL, PLE) { \
	FDL_ASSERT(!((PLE) & ~((1 << HCCTRL_PLE_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_PLE_MASK) | (((unsigned long)(PLE)) << HCCTRL_PLE_SHIFT);\
}
#define HCCTRL_IE_SIZE	1
#define HCCTRL_IE_SHIFT	3
#define HCCTRL_IE_MASK	0x00000008
#define HCCTRL_GET_IE(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_IE_MASK) >> HCCTRL_IE_SHIFT)
#define HCCTRL_SET_IE(HCCTRL, IE) { \
	FDL_ASSERT(!((IE) & ~((1 << HCCTRL_IE_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_IE_MASK) | (((unsigned long)(IE)) << HCCTRL_IE_SHIFT);\
}
#define HCCTRL_CLE_SIZE	1
#define HCCTRL_CLE_SHIFT	4
#define HCCTRL_CLE_MASK	0x00000010
#define HCCTRL_GET_CLE(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_CLE_MASK) >> HCCTRL_CLE_SHIFT)
#define HCCTRL_SET_CLE(HCCTRL, CLE) { \
	FDL_ASSERT(!((CLE) & ~((1 << HCCTRL_CLE_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_CLE_MASK) | (((unsigned long)(CLE)) << HCCTRL_CLE_SHIFT);\
}
#define HCCTRL_BLE_SIZE	1
#define HCCTRL_BLE_SHIFT	5
#define HCCTRL_BLE_MASK	0x00000020
#define HCCTRL_GET_BLE(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_BLE_MASK) >> HCCTRL_BLE_SHIFT)
#define HCCTRL_SET_BLE(HCCTRL, BLE) { \
	FDL_ASSERT(!((BLE) & ~((1 << HCCTRL_BLE_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_BLE_MASK) | (((unsigned long)(BLE)) << HCCTRL_BLE_SHIFT);\
}
#define HCCTRL_HCFS_SIZE	2
#define HCCTRL_HCFS_SHIFT	6
#define HCCTRL_HCFS_MASK	0x000000c0
#define HCCTRL_GET_HCFS(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_HCFS_MASK) >> HCCTRL_HCFS_SHIFT)
#define HCCTRL_SET_HCFS(HCCTRL, HCFS) { \
	FDL_ASSERT(!((HCFS) & ~((1 << HCCTRL_HCFS_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_HCFS_MASK) | (((unsigned long)(HCFS)) << HCCTRL_HCFS_SHIFT);\
}
#define HCCTRL_IR_SIZE	1
#define HCCTRL_IR_SHIFT	8
#define HCCTRL_IR_MASK	0x00000100
#define HCCTRL_GET_IR(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_IR_MASK) >> HCCTRL_IR_SHIFT)
#define HCCTRL_SET_IR(HCCTRL, IR) { \
	FDL_ASSERT(!((IR) & ~((1 << HCCTRL_IR_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_IR_MASK) | (((unsigned long)(IR)) << HCCTRL_IR_SHIFT);\
}
#define HCCTRL_RWC_SIZE	1
#define HCCTRL_RWC_SHIFT	9
#define HCCTRL_RWC_MASK	0x00000200
#define HCCTRL_GET_RWC(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_RWC_MASK) >> HCCTRL_RWC_SHIFT)
#define HCCTRL_SET_RWC(HCCTRL, RWC) { \
	FDL_ASSERT(!((RWC) & ~((1 << HCCTRL_RWC_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_RWC_MASK) | (((unsigned long)(RWC)) << HCCTRL_RWC_SHIFT);\
}
#define HCCTRL_RWE_SIZE	1
#define HCCTRL_RWE_SHIFT	10
#define HCCTRL_RWE_MASK	0x00000400
#define HCCTRL_GET_RWE(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_RWE_MASK) >> HCCTRL_RWE_SHIFT)
#define HCCTRL_SET_RWE(HCCTRL, RWE) { \
	FDL_ASSERT(!((RWE) & ~((1 << HCCTRL_RWE_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_RWE_MASK) | (((unsigned long)(RWE)) << HCCTRL_RWE_SHIFT);\
}
#define HCCTRL_PAD0_SIZE	21
#define HCCTRL_PAD0_SHIFT	11
#define HCCTRL_PAD0_MASK	0xfffff800
#define HCCTRL_GET_PAD0(HCCTRL) \
	((((unsigned long)(HCCTRL)) & HCCTRL_PAD0_MASK) >> HCCTRL_PAD0_SHIFT)
#define HCCTRL_SET_PAD0(HCCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCCTRL_PAD0_SIZE)-1))); \
	HCCTRL = (((unsigned long)(HCCTRL)) & ~HCCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << HCCTRL_PAD0_SHIFT);\
}
#define HCCTRL_TOTAL_SIZE	32
#define HCCTRL(CBSR, PLE, IE, CLE, BLE, HCFS, IR, RWC, RWE) \
	((((unsigned long)(CBSR)) << HCCTRL_CBSR_SHIFT) | \
	 (((unsigned long)(PLE)) << HCCTRL_PLE_SHIFT) | \
	 (((unsigned long)(IE)) << HCCTRL_IE_SHIFT) | \
	 (((unsigned long)(CLE)) << HCCTRL_CLE_SHIFT) | \
	 (((unsigned long)(BLE)) << HCCTRL_BLE_SHIFT) | \
	 (((unsigned long)(HCFS)) << HCCTRL_HCFS_SHIFT) | \
	 (((unsigned long)(IR)) << HCCTRL_IR_SHIFT) | \
	 (((unsigned long)(RWC)) << HCCTRL_RWC_SHIFT) | \
	 (((unsigned long)(RWE)) << HCCTRL_RWE_SHIFT))

/*
 *  HCCMDSTAT struct
 */
#define HCCMDSTAT_HCR_SIZE	1
#define HCCMDSTAT_HCR_SHIFT	0
#define HCCMDSTAT_HCR_MASK	0x00000001
#define HCCMDSTAT_GET_HCR(HCCMDSTAT) \
	((((unsigned long)(HCCMDSTAT)) & HCCMDSTAT_HCR_MASK) >> HCCMDSTAT_HCR_SHIFT)
#define HCCMDSTAT_SET_HCR(HCCMDSTAT, HCR) { \
	FDL_ASSERT(!((HCR) & ~((1 << HCCMDSTAT_HCR_SIZE)-1))); \
	HCCMDSTAT = (((unsigned long)(HCCMDSTAT)) & ~HCCMDSTAT_HCR_MASK) | (((unsigned long)(HCR)) << HCCMDSTAT_HCR_SHIFT);\
}
#define HCCMDSTAT_CLF_SIZE	1
#define HCCMDSTAT_CLF_SHIFT	1
#define HCCMDSTAT_CLF_MASK	0x00000002
#define HCCMDSTAT_GET_CLF(HCCMDSTAT) \
	((((unsigned long)(HCCMDSTAT)) & HCCMDSTAT_CLF_MASK) >> HCCMDSTAT_CLF_SHIFT)
#define HCCMDSTAT_SET_CLF(HCCMDSTAT, CLF) { \
	FDL_ASSERT(!((CLF) & ~((1 << HCCMDSTAT_CLF_SIZE)-1))); \
	HCCMDSTAT = (((unsigned long)(HCCMDSTAT)) & ~HCCMDSTAT_CLF_MASK) | (((unsigned long)(CLF)) << HCCMDSTAT_CLF_SHIFT);\
}
#define HCCMDSTAT_BLF_SIZE	1
#define HCCMDSTAT_BLF_SHIFT	2
#define HCCMDSTAT_BLF_MASK	0x00000004
#define HCCMDSTAT_GET_BLF(HCCMDSTAT) \
	((((unsigned long)(HCCMDSTAT)) & HCCMDSTAT_BLF_MASK) >> HCCMDSTAT_BLF_SHIFT)
#define HCCMDSTAT_SET_BLF(HCCMDSTAT, BLF) { \
	FDL_ASSERT(!((BLF) & ~((1 << HCCMDSTAT_BLF_SIZE)-1))); \
	HCCMDSTAT = (((unsigned long)(HCCMDSTAT)) & ~HCCMDSTAT_BLF_MASK) | (((unsigned long)(BLF)) << HCCMDSTAT_BLF_SHIFT);\
}
#define HCCMDSTAT_OCR_SIZE	1
#define HCCMDSTAT_OCR_SHIFT	3
#define HCCMDSTAT_OCR_MASK	0x00000008
#define HCCMDSTAT_GET_OCR(HCCMDSTAT) \
	((((unsigned long)(HCCMDSTAT)) & HCCMDSTAT_OCR_MASK) >> HCCMDSTAT_OCR_SHIFT)
#define HCCMDSTAT_SET_OCR(HCCMDSTAT, OCR) { \
	FDL_ASSERT(!((OCR) & ~((1 << HCCMDSTAT_OCR_SIZE)-1))); \
	HCCMDSTAT = (((unsigned long)(HCCMDSTAT)) & ~HCCMDSTAT_OCR_MASK) | (((unsigned long)(OCR)) << HCCMDSTAT_OCR_SHIFT);\
}
#define HCCMDSTAT_PAD0_SIZE	12
#define HCCMDSTAT_PAD0_SHIFT	4
#define HCCMDSTAT_PAD0_MASK	0x0000fff0
#define HCCMDSTAT_GET_PAD0(HCCMDSTAT) \
	((((unsigned long)(HCCMDSTAT)) & HCCMDSTAT_PAD0_MASK) >> HCCMDSTAT_PAD0_SHIFT)
#define HCCMDSTAT_SET_PAD0(HCCMDSTAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCCMDSTAT_PAD0_SIZE)-1))); \
	HCCMDSTAT = (((unsigned long)(HCCMDSTAT)) & ~HCCMDSTAT_PAD0_MASK) | (((unsigned long)(pad0)) << HCCMDSTAT_PAD0_SHIFT);\
}
#define HCCMDSTAT_SOC_SIZE	2
#define HCCMDSTAT_SOC_SHIFT	16
#define HCCMDSTAT_SOC_MASK	0x00030000
#define HCCMDSTAT_GET_SOC(HCCMDSTAT) \
	((((unsigned long)(HCCMDSTAT)) & HCCMDSTAT_SOC_MASK) >> HCCMDSTAT_SOC_SHIFT)
#define HCCMDSTAT_SET_SOC(HCCMDSTAT, SOC) { \
	FDL_ASSERT(!((SOC) & ~((1 << HCCMDSTAT_SOC_SIZE)-1))); \
	HCCMDSTAT = (((unsigned long)(HCCMDSTAT)) & ~HCCMDSTAT_SOC_MASK) | (((unsigned long)(SOC)) << HCCMDSTAT_SOC_SHIFT);\
}
#define HCCMDSTAT_PAD1_SIZE	14
#define HCCMDSTAT_PAD1_SHIFT	18
#define HCCMDSTAT_PAD1_MASK	0xfffc0000
#define HCCMDSTAT_GET_PAD1(HCCMDSTAT) \
	((((unsigned long)(HCCMDSTAT)) & HCCMDSTAT_PAD1_MASK) >> HCCMDSTAT_PAD1_SHIFT)
#define HCCMDSTAT_SET_PAD1(HCCMDSTAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << HCCMDSTAT_PAD1_SIZE)-1))); \
	HCCMDSTAT = (((unsigned long)(HCCMDSTAT)) & ~HCCMDSTAT_PAD1_MASK) | (((unsigned long)(pad1)) << HCCMDSTAT_PAD1_SHIFT);\
}
#define HCCMDSTAT_TOTAL_SIZE	32
#define HCCMDSTAT(HCR, CLF, BLF, OCR, SOC) \
	((((unsigned long)(HCR)) << HCCMDSTAT_HCR_SHIFT) | \
	 (((unsigned long)(CLF)) << HCCMDSTAT_CLF_SHIFT) | \
	 (((unsigned long)(BLF)) << HCCMDSTAT_BLF_SHIFT) | \
	 (((unsigned long)(OCR)) << HCCMDSTAT_OCR_SHIFT) | \
	 (((unsigned long)(SOC)) << HCCMDSTAT_SOC_SHIFT))

/*
 *  HCINTSTAT struct
 */
#define HCINTSTAT_SO_SIZE	1
#define HCINTSTAT_SO_SHIFT	0
#define HCINTSTAT_SO_MASK	0x00000001
#define HCINTSTAT_GET_SO(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_SO_MASK) >> HCINTSTAT_SO_SHIFT)
#define HCINTSTAT_SET_SO(HCINTSTAT, SO) { \
	FDL_ASSERT(!((SO) & ~((1 << HCINTSTAT_SO_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_SO_MASK) | (((unsigned long)(SO)) << HCINTSTAT_SO_SHIFT);\
}
#define HCINTSTAT_WDH_SIZE	1
#define HCINTSTAT_WDH_SHIFT	1
#define HCINTSTAT_WDH_MASK	0x00000002
#define HCINTSTAT_GET_WDH(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_WDH_MASK) >> HCINTSTAT_WDH_SHIFT)
#define HCINTSTAT_SET_WDH(HCINTSTAT, WDH) { \
	FDL_ASSERT(!((WDH) & ~((1 << HCINTSTAT_WDH_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_WDH_MASK) | (((unsigned long)(WDH)) << HCINTSTAT_WDH_SHIFT);\
}
#define HCINTSTAT_SF_SIZE	1
#define HCINTSTAT_SF_SHIFT	2
#define HCINTSTAT_SF_MASK	0x00000004
#define HCINTSTAT_GET_SF(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_SF_MASK) >> HCINTSTAT_SF_SHIFT)
#define HCINTSTAT_SET_SF(HCINTSTAT, SF) { \
	FDL_ASSERT(!((SF) & ~((1 << HCINTSTAT_SF_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_SF_MASK) | (((unsigned long)(SF)) << HCINTSTAT_SF_SHIFT);\
}
#define HCINTSTAT_RD_SIZE	1
#define HCINTSTAT_RD_SHIFT	3
#define HCINTSTAT_RD_MASK	0x00000008
#define HCINTSTAT_GET_RD(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_RD_MASK) >> HCINTSTAT_RD_SHIFT)
#define HCINTSTAT_SET_RD(HCINTSTAT, RD) { \
	FDL_ASSERT(!((RD) & ~((1 << HCINTSTAT_RD_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_RD_MASK) | (((unsigned long)(RD)) << HCINTSTAT_RD_SHIFT);\
}
#define HCINTSTAT_UE_SIZE	1
#define HCINTSTAT_UE_SHIFT	4
#define HCINTSTAT_UE_MASK	0x00000010
#define HCINTSTAT_GET_UE(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_UE_MASK) >> HCINTSTAT_UE_SHIFT)
#define HCINTSTAT_SET_UE(HCINTSTAT, UE) { \
	FDL_ASSERT(!((UE) & ~((1 << HCINTSTAT_UE_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_UE_MASK) | (((unsigned long)(UE)) << HCINTSTAT_UE_SHIFT);\
}
#define HCINTSTAT_FNO_SIZE	1
#define HCINTSTAT_FNO_SHIFT	5
#define HCINTSTAT_FNO_MASK	0x00000020
#define HCINTSTAT_GET_FNO(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_FNO_MASK) >> HCINTSTAT_FNO_SHIFT)
#define HCINTSTAT_SET_FNO(HCINTSTAT, FNO) { \
	FDL_ASSERT(!((FNO) & ~((1 << HCINTSTAT_FNO_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_FNO_MASK) | (((unsigned long)(FNO)) << HCINTSTAT_FNO_SHIFT);\
}
#define HCINTSTAT_RHSC_SIZE	1
#define HCINTSTAT_RHSC_SHIFT	6
#define HCINTSTAT_RHSC_MASK	0x00000040
#define HCINTSTAT_GET_RHSC(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_RHSC_MASK) >> HCINTSTAT_RHSC_SHIFT)
#define HCINTSTAT_SET_RHSC(HCINTSTAT, RHSC) { \
	FDL_ASSERT(!((RHSC) & ~((1 << HCINTSTAT_RHSC_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_RHSC_MASK) | (((unsigned long)(RHSC)) << HCINTSTAT_RHSC_SHIFT);\
}
#define HCINTSTAT_PAD0_SIZE	23
#define HCINTSTAT_PAD0_SHIFT	7
#define HCINTSTAT_PAD0_MASK	0x3fffff80
#define HCINTSTAT_GET_PAD0(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_PAD0_MASK) >> HCINTSTAT_PAD0_SHIFT)
#define HCINTSTAT_SET_PAD0(HCINTSTAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCINTSTAT_PAD0_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_PAD0_MASK) | (((unsigned long)(pad0)) << HCINTSTAT_PAD0_SHIFT);\
}
#define HCINTSTAT_OC_SIZE	1
#define HCINTSTAT_OC_SHIFT	30
#define HCINTSTAT_OC_MASK	0x40000000
#define HCINTSTAT_GET_OC(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_OC_MASK) >> HCINTSTAT_OC_SHIFT)
#define HCINTSTAT_SET_OC(HCINTSTAT, OC) { \
	FDL_ASSERT(!((OC) & ~((1 << HCINTSTAT_OC_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_OC_MASK) | (((unsigned long)(OC)) << HCINTSTAT_OC_SHIFT);\
}
#define HCINTSTAT_PAD1_SIZE	1
#define HCINTSTAT_PAD1_SHIFT	31
#define HCINTSTAT_PAD1_MASK	0x80000000
#define HCINTSTAT_GET_PAD1(HCINTSTAT) \
	((((unsigned long)(HCINTSTAT)) & HCINTSTAT_PAD1_MASK) >> HCINTSTAT_PAD1_SHIFT)
#define HCINTSTAT_SET_PAD1(HCINTSTAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << HCINTSTAT_PAD1_SIZE)-1))); \
	HCINTSTAT = (((unsigned long)(HCINTSTAT)) & ~HCINTSTAT_PAD1_MASK) | (((unsigned long)(pad1)) << HCINTSTAT_PAD1_SHIFT);\
}
#define HCINTSTAT_TOTAL_SIZE	32
#define HCINTSTAT(SO, WDH, SF, RD, UE, FNO, RHSC, OC) \
	((((unsigned long)(SO)) << HCINTSTAT_SO_SHIFT) | \
	 (((unsigned long)(WDH)) << HCINTSTAT_WDH_SHIFT) | \
	 (((unsigned long)(SF)) << HCINTSTAT_SF_SHIFT) | \
	 (((unsigned long)(RD)) << HCINTSTAT_RD_SHIFT) | \
	 (((unsigned long)(UE)) << HCINTSTAT_UE_SHIFT) | \
	 (((unsigned long)(FNO)) << HCINTSTAT_FNO_SHIFT) | \
	 (((unsigned long)(RHSC)) << HCINTSTAT_RHSC_SHIFT) | \
	 (((unsigned long)(OC)) << HCINTSTAT_OC_SHIFT))

/*
 *  HCINTEN struct
 */
#define HCINTEN_SO_SIZE	1
#define HCINTEN_SO_SHIFT	0
#define HCINTEN_SO_MASK	0x00000001
#define HCINTEN_GET_SO(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_SO_MASK) >> HCINTEN_SO_SHIFT)
#define HCINTEN_SET_SO(HCINTEN, SO) { \
	FDL_ASSERT(!((SO) & ~((1 << HCINTEN_SO_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_SO_MASK) | (((unsigned long)(SO)) << HCINTEN_SO_SHIFT);\
}
#define HCINTEN_WDH_SIZE	1
#define HCINTEN_WDH_SHIFT	1
#define HCINTEN_WDH_MASK	0x00000002
#define HCINTEN_GET_WDH(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_WDH_MASK) >> HCINTEN_WDH_SHIFT)
#define HCINTEN_SET_WDH(HCINTEN, WDH) { \
	FDL_ASSERT(!((WDH) & ~((1 << HCINTEN_WDH_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_WDH_MASK) | (((unsigned long)(WDH)) << HCINTEN_WDH_SHIFT);\
}
#define HCINTEN_SF_SIZE	1
#define HCINTEN_SF_SHIFT	2
#define HCINTEN_SF_MASK	0x00000004
#define HCINTEN_GET_SF(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_SF_MASK) >> HCINTEN_SF_SHIFT)
#define HCINTEN_SET_SF(HCINTEN, SF) { \
	FDL_ASSERT(!((SF) & ~((1 << HCINTEN_SF_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_SF_MASK) | (((unsigned long)(SF)) << HCINTEN_SF_SHIFT);\
}
#define HCINTEN_RD_SIZE	1
#define HCINTEN_RD_SHIFT	3
#define HCINTEN_RD_MASK	0x00000008
#define HCINTEN_GET_RD(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_RD_MASK) >> HCINTEN_RD_SHIFT)
#define HCINTEN_SET_RD(HCINTEN, RD) { \
	FDL_ASSERT(!((RD) & ~((1 << HCINTEN_RD_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_RD_MASK) | (((unsigned long)(RD)) << HCINTEN_RD_SHIFT);\
}
#define HCINTEN_UE_SIZE	1
#define HCINTEN_UE_SHIFT	4
#define HCINTEN_UE_MASK	0x00000010
#define HCINTEN_GET_UE(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_UE_MASK) >> HCINTEN_UE_SHIFT)
#define HCINTEN_SET_UE(HCINTEN, UE) { \
	FDL_ASSERT(!((UE) & ~((1 << HCINTEN_UE_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_UE_MASK) | (((unsigned long)(UE)) << HCINTEN_UE_SHIFT);\
}
#define HCINTEN_FNO_SIZE	1
#define HCINTEN_FNO_SHIFT	5
#define HCINTEN_FNO_MASK	0x00000020
#define HCINTEN_GET_FNO(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_FNO_MASK) >> HCINTEN_FNO_SHIFT)
#define HCINTEN_SET_FNO(HCINTEN, FNO) { \
	FDL_ASSERT(!((FNO) & ~((1 << HCINTEN_FNO_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_FNO_MASK) | (((unsigned long)(FNO)) << HCINTEN_FNO_SHIFT);\
}
#define HCINTEN_RHSC_SIZE	1
#define HCINTEN_RHSC_SHIFT	6
#define HCINTEN_RHSC_MASK	0x00000040
#define HCINTEN_GET_RHSC(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_RHSC_MASK) >> HCINTEN_RHSC_SHIFT)
#define HCINTEN_SET_RHSC(HCINTEN, RHSC) { \
	FDL_ASSERT(!((RHSC) & ~((1 << HCINTEN_RHSC_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_RHSC_MASK) | (((unsigned long)(RHSC)) << HCINTEN_RHSC_SHIFT);\
}
#define HCINTEN_PAD0_SIZE	23
#define HCINTEN_PAD0_SHIFT	7
#define HCINTEN_PAD0_MASK	0x3fffff80
#define HCINTEN_GET_PAD0(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_PAD0_MASK) >> HCINTEN_PAD0_SHIFT)
#define HCINTEN_SET_PAD0(HCINTEN, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCINTEN_PAD0_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_PAD0_MASK) | (((unsigned long)(pad0)) << HCINTEN_PAD0_SHIFT);\
}
#define HCINTEN_OC_SIZE	1
#define HCINTEN_OC_SHIFT	30
#define HCINTEN_OC_MASK	0x40000000
#define HCINTEN_GET_OC(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_OC_MASK) >> HCINTEN_OC_SHIFT)
#define HCINTEN_SET_OC(HCINTEN, OC) { \
	FDL_ASSERT(!((OC) & ~((1 << HCINTEN_OC_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_OC_MASK) | (((unsigned long)(OC)) << HCINTEN_OC_SHIFT);\
}
#define HCINTEN_MIE_SIZE	1
#define HCINTEN_MIE_SHIFT	31
#define HCINTEN_MIE_MASK	0x80000000
#define HCINTEN_GET_MIE(HCINTEN) \
	((((unsigned long)(HCINTEN)) & HCINTEN_MIE_MASK) >> HCINTEN_MIE_SHIFT)
#define HCINTEN_SET_MIE(HCINTEN, MIE) { \
	FDL_ASSERT(!((MIE) & ~((1 << HCINTEN_MIE_SIZE)-1))); \
	HCINTEN = (((unsigned long)(HCINTEN)) & ~HCINTEN_MIE_MASK) | (((unsigned long)(MIE)) << HCINTEN_MIE_SHIFT);\
}
#define HCINTEN_TOTAL_SIZE	32
#define HCINTEN(SO, WDH, SF, RD, UE, FNO, RHSC, OC, MIE) \
	((((unsigned long)(SO)) << HCINTEN_SO_SHIFT) | \
	 (((unsigned long)(WDH)) << HCINTEN_WDH_SHIFT) | \
	 (((unsigned long)(SF)) << HCINTEN_SF_SHIFT) | \
	 (((unsigned long)(RD)) << HCINTEN_RD_SHIFT) | \
	 (((unsigned long)(UE)) << HCINTEN_UE_SHIFT) | \
	 (((unsigned long)(FNO)) << HCINTEN_FNO_SHIFT) | \
	 (((unsigned long)(RHSC)) << HCINTEN_RHSC_SHIFT) | \
	 (((unsigned long)(OC)) << HCINTEN_OC_SHIFT) | \
	 (((unsigned long)(MIE)) << HCINTEN_MIE_SHIFT))

/*
 *  HCINTDIS struct
 */
#define HCINTDIS_SO_SIZE	1
#define HCINTDIS_SO_SHIFT	0
#define HCINTDIS_SO_MASK	0x00000001
#define HCINTDIS_GET_SO(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_SO_MASK) >> HCINTDIS_SO_SHIFT)
#define HCINTDIS_SET_SO(HCINTDIS, SO) { \
	FDL_ASSERT(!((SO) & ~((1 << HCINTDIS_SO_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_SO_MASK) | (((unsigned long)(SO)) << HCINTDIS_SO_SHIFT);\
}
#define HCINTDIS_WDH_SIZE	1
#define HCINTDIS_WDH_SHIFT	1
#define HCINTDIS_WDH_MASK	0x00000002
#define HCINTDIS_GET_WDH(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_WDH_MASK) >> HCINTDIS_WDH_SHIFT)
#define HCINTDIS_SET_WDH(HCINTDIS, WDH) { \
	FDL_ASSERT(!((WDH) & ~((1 << HCINTDIS_WDH_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_WDH_MASK) | (((unsigned long)(WDH)) << HCINTDIS_WDH_SHIFT);\
}
#define HCINTDIS_SF_SIZE	1
#define HCINTDIS_SF_SHIFT	2
#define HCINTDIS_SF_MASK	0x00000004
#define HCINTDIS_GET_SF(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_SF_MASK) >> HCINTDIS_SF_SHIFT)
#define HCINTDIS_SET_SF(HCINTDIS, SF) { \
	FDL_ASSERT(!((SF) & ~((1 << HCINTDIS_SF_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_SF_MASK) | (((unsigned long)(SF)) << HCINTDIS_SF_SHIFT);\
}
#define HCINTDIS_RD_SIZE	1
#define HCINTDIS_RD_SHIFT	3
#define HCINTDIS_RD_MASK	0x00000008
#define HCINTDIS_GET_RD(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_RD_MASK) >> HCINTDIS_RD_SHIFT)
#define HCINTDIS_SET_RD(HCINTDIS, RD) { \
	FDL_ASSERT(!((RD) & ~((1 << HCINTDIS_RD_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_RD_MASK) | (((unsigned long)(RD)) << HCINTDIS_RD_SHIFT);\
}
#define HCINTDIS_UE_SIZE	1
#define HCINTDIS_UE_SHIFT	4
#define HCINTDIS_UE_MASK	0x00000010
#define HCINTDIS_GET_UE(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_UE_MASK) >> HCINTDIS_UE_SHIFT)
#define HCINTDIS_SET_UE(HCINTDIS, UE) { \
	FDL_ASSERT(!((UE) & ~((1 << HCINTDIS_UE_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_UE_MASK) | (((unsigned long)(UE)) << HCINTDIS_UE_SHIFT);\
}
#define HCINTDIS_FNO_SIZE	1
#define HCINTDIS_FNO_SHIFT	5
#define HCINTDIS_FNO_MASK	0x00000020
#define HCINTDIS_GET_FNO(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_FNO_MASK) >> HCINTDIS_FNO_SHIFT)
#define HCINTDIS_SET_FNO(HCINTDIS, FNO) { \
	FDL_ASSERT(!((FNO) & ~((1 << HCINTDIS_FNO_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_FNO_MASK) | (((unsigned long)(FNO)) << HCINTDIS_FNO_SHIFT);\
}
#define HCINTDIS_RHSC_SIZE	1
#define HCINTDIS_RHSC_SHIFT	6
#define HCINTDIS_RHSC_MASK	0x00000040
#define HCINTDIS_GET_RHSC(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_RHSC_MASK) >> HCINTDIS_RHSC_SHIFT)
#define HCINTDIS_SET_RHSC(HCINTDIS, RHSC) { \
	FDL_ASSERT(!((RHSC) & ~((1 << HCINTDIS_RHSC_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_RHSC_MASK) | (((unsigned long)(RHSC)) << HCINTDIS_RHSC_SHIFT);\
}
#define HCINTDIS_PAD0_SIZE	23
#define HCINTDIS_PAD0_SHIFT	7
#define HCINTDIS_PAD0_MASK	0x3fffff80
#define HCINTDIS_GET_PAD0(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_PAD0_MASK) >> HCINTDIS_PAD0_SHIFT)
#define HCINTDIS_SET_PAD0(HCINTDIS, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCINTDIS_PAD0_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_PAD0_MASK) | (((unsigned long)(pad0)) << HCINTDIS_PAD0_SHIFT);\
}
#define HCINTDIS_OC_SIZE	1
#define HCINTDIS_OC_SHIFT	30
#define HCINTDIS_OC_MASK	0x40000000
#define HCINTDIS_GET_OC(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_OC_MASK) >> HCINTDIS_OC_SHIFT)
#define HCINTDIS_SET_OC(HCINTDIS, OC) { \
	FDL_ASSERT(!((OC) & ~((1 << HCINTDIS_OC_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_OC_MASK) | (((unsigned long)(OC)) << HCINTDIS_OC_SHIFT);\
}
#define HCINTDIS_MIE_SIZE	1
#define HCINTDIS_MIE_SHIFT	31
#define HCINTDIS_MIE_MASK	0x80000000
#define HCINTDIS_GET_MIE(HCINTDIS) \
	((((unsigned long)(HCINTDIS)) & HCINTDIS_MIE_MASK) >> HCINTDIS_MIE_SHIFT)
#define HCINTDIS_SET_MIE(HCINTDIS, MIE) { \
	FDL_ASSERT(!((MIE) & ~((1 << HCINTDIS_MIE_SIZE)-1))); \
	HCINTDIS = (((unsigned long)(HCINTDIS)) & ~HCINTDIS_MIE_MASK) | (((unsigned long)(MIE)) << HCINTDIS_MIE_SHIFT);\
}
#define HCINTDIS_TOTAL_SIZE	32
#define HCINTDIS(SO, WDH, SF, RD, UE, FNO, RHSC, OC, MIE) \
	((((unsigned long)(SO)) << HCINTDIS_SO_SHIFT) | \
	 (((unsigned long)(WDH)) << HCINTDIS_WDH_SHIFT) | \
	 (((unsigned long)(SF)) << HCINTDIS_SF_SHIFT) | \
	 (((unsigned long)(RD)) << HCINTDIS_RD_SHIFT) | \
	 (((unsigned long)(UE)) << HCINTDIS_UE_SHIFT) | \
	 (((unsigned long)(FNO)) << HCINTDIS_FNO_SHIFT) | \
	 (((unsigned long)(RHSC)) << HCINTDIS_RHSC_SHIFT) | \
	 (((unsigned long)(OC)) << HCINTDIS_OC_SHIFT) | \
	 (((unsigned long)(MIE)) << HCINTDIS_MIE_SHIFT))

/*
 *  HCHCCA struct
 */
#define HCHCCA_PAD0_SIZE	8
#define HCHCCA_PAD0_SHIFT	0
#define HCHCCA_PAD0_MASK	0x000000ff
#define HCHCCA_GET_PAD0(HCHCCA) \
	((((unsigned long)(HCHCCA)) & HCHCCA_PAD0_MASK) >> HCHCCA_PAD0_SHIFT)
#define HCHCCA_SET_PAD0(HCHCCA, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCHCCA_PAD0_SIZE)-1))); \
	HCHCCA = (((unsigned long)(HCHCCA)) & ~HCHCCA_PAD0_MASK) | (((unsigned long)(pad0)) << HCHCCA_PAD0_SHIFT);\
}
#define HCHCCA_HCCA_SIZE	24
#define HCHCCA_HCCA_SHIFT	8
#define HCHCCA_HCCA_MASK	0xffffff00
#define HCHCCA_GET_HCCA(HCHCCA) \
	((((unsigned long)(HCHCCA)) & HCHCCA_HCCA_MASK) >> HCHCCA_HCCA_SHIFT)
#define HCHCCA_SET_HCCA(HCHCCA, HCCA) { \
	FDL_ASSERT(!((HCCA) & ~((1 << HCHCCA_HCCA_SIZE)-1))); \
	HCHCCA = (((unsigned long)(HCHCCA)) & ~HCHCCA_HCCA_MASK) | (((unsigned long)(HCCA)) << HCHCCA_HCCA_SHIFT);\
}
#define HCHCCA_TOTAL_SIZE	32
#define HCHCCA(HCCA) \
	((((unsigned long)(HCCA)) << HCHCCA_HCCA_SHIFT))

/*
 *  HCPERCUR struct
 */
#define HCPERCUR_PAD0_SIZE	4
#define HCPERCUR_PAD0_SHIFT	0
#define HCPERCUR_PAD0_MASK	0x0000000f
#define HCPERCUR_GET_PAD0(HCPERCUR) \
	((((unsigned long)(HCPERCUR)) & HCPERCUR_PAD0_MASK) >> HCPERCUR_PAD0_SHIFT)
#define HCPERCUR_SET_PAD0(HCPERCUR, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCPERCUR_PAD0_SIZE)-1))); \
	HCPERCUR = (((unsigned long)(HCPERCUR)) & ~HCPERCUR_PAD0_MASK) | (((unsigned long)(pad0)) << HCPERCUR_PAD0_SHIFT);\
}
#define HCPERCUR_PCED_SIZE	28
#define HCPERCUR_PCED_SHIFT	4
#define HCPERCUR_PCED_MASK	0xfffffff0
#define HCPERCUR_GET_PCED(HCPERCUR) \
	((((unsigned long)(HCPERCUR)) & HCPERCUR_PCED_MASK) >> HCPERCUR_PCED_SHIFT)
#define HCPERCUR_SET_PCED(HCPERCUR, PCED) { \
	FDL_ASSERT(!((PCED) & ~((1 << HCPERCUR_PCED_SIZE)-1))); \
	HCPERCUR = (((unsigned long)(HCPERCUR)) & ~HCPERCUR_PCED_MASK) | (((unsigned long)(PCED)) << HCPERCUR_PCED_SHIFT);\
}
#define HCPERCUR_TOTAL_SIZE	32
#define HCPERCUR(PCED) \
	((((unsigned long)(PCED)) << HCPERCUR_PCED_SHIFT))

/*
 *  HCCTRLHD struct
 */
#define HCCTRLHD_PAD0_SIZE	4
#define HCCTRLHD_PAD0_SHIFT	0
#define HCCTRLHD_PAD0_MASK	0x0000000f
#define HCCTRLHD_GET_PAD0(HCCTRLHD) \
	((((unsigned long)(HCCTRLHD)) & HCCTRLHD_PAD0_MASK) >> HCCTRLHD_PAD0_SHIFT)
#define HCCTRLHD_SET_PAD0(HCCTRLHD, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCCTRLHD_PAD0_SIZE)-1))); \
	HCCTRLHD = (((unsigned long)(HCCTRLHD)) & ~HCCTRLHD_PAD0_MASK) | (((unsigned long)(pad0)) << HCCTRLHD_PAD0_SHIFT);\
}
#define HCCTRLHD_CHED_SIZE	28
#define HCCTRLHD_CHED_SHIFT	4
#define HCCTRLHD_CHED_MASK	0xfffffff0
#define HCCTRLHD_GET_CHED(HCCTRLHD) \
	((((unsigned long)(HCCTRLHD)) & HCCTRLHD_CHED_MASK) >> HCCTRLHD_CHED_SHIFT)
#define HCCTRLHD_SET_CHED(HCCTRLHD, CHED) { \
	FDL_ASSERT(!((CHED) & ~((1 << HCCTRLHD_CHED_SIZE)-1))); \
	HCCTRLHD = (((unsigned long)(HCCTRLHD)) & ~HCCTRLHD_CHED_MASK) | (((unsigned long)(CHED)) << HCCTRLHD_CHED_SHIFT);\
}
#define HCCTRLHD_TOTAL_SIZE	32
#define HCCTRLHD(CHED) \
	((((unsigned long)(CHED)) << HCCTRLHD_CHED_SHIFT))

/*
 *  HCCTRLCUR struct
 */
#define HCCTRLCUR_PAD0_SIZE	4
#define HCCTRLCUR_PAD0_SHIFT	0
#define HCCTRLCUR_PAD0_MASK	0x0000000f
#define HCCTRLCUR_GET_PAD0(HCCTRLCUR) \
	((((unsigned long)(HCCTRLCUR)) & HCCTRLCUR_PAD0_MASK) >> HCCTRLCUR_PAD0_SHIFT)
#define HCCTRLCUR_SET_PAD0(HCCTRLCUR, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCCTRLCUR_PAD0_SIZE)-1))); \
	HCCTRLCUR = (((unsigned long)(HCCTRLCUR)) & ~HCCTRLCUR_PAD0_MASK) | (((unsigned long)(pad0)) << HCCTRLCUR_PAD0_SHIFT);\
}
#define HCCTRLCUR_CCED_SIZE	28
#define HCCTRLCUR_CCED_SHIFT	4
#define HCCTRLCUR_CCED_MASK	0xfffffff0
#define HCCTRLCUR_GET_CCED(HCCTRLCUR) \
	((((unsigned long)(HCCTRLCUR)) & HCCTRLCUR_CCED_MASK) >> HCCTRLCUR_CCED_SHIFT)
#define HCCTRLCUR_SET_CCED(HCCTRLCUR, CCED) { \
	FDL_ASSERT(!((CCED) & ~((1 << HCCTRLCUR_CCED_SIZE)-1))); \
	HCCTRLCUR = (((unsigned long)(HCCTRLCUR)) & ~HCCTRLCUR_CCED_MASK) | (((unsigned long)(CCED)) << HCCTRLCUR_CCED_SHIFT);\
}
#define HCCTRLCUR_TOTAL_SIZE	32
#define HCCTRLCUR(CCED) \
	((((unsigned long)(CCED)) << HCCTRLCUR_CCED_SHIFT))

/*
 *  HCBLKHD struct
 */
#define HCBLKHD_PAD0_SIZE	4
#define HCBLKHD_PAD0_SHIFT	0
#define HCBLKHD_PAD0_MASK	0x0000000f
#define HCBLKHD_GET_PAD0(HCBLKHD) \
	((((unsigned long)(HCBLKHD)) & HCBLKHD_PAD0_MASK) >> HCBLKHD_PAD0_SHIFT)
#define HCBLKHD_SET_PAD0(HCBLKHD, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCBLKHD_PAD0_SIZE)-1))); \
	HCBLKHD = (((unsigned long)(HCBLKHD)) & ~HCBLKHD_PAD0_MASK) | (((unsigned long)(pad0)) << HCBLKHD_PAD0_SHIFT);\
}
#define HCBLKHD_BHED_SIZE	28
#define HCBLKHD_BHED_SHIFT	4
#define HCBLKHD_BHED_MASK	0xfffffff0
#define HCBLKHD_GET_BHED(HCBLKHD) \
	((((unsigned long)(HCBLKHD)) & HCBLKHD_BHED_MASK) >> HCBLKHD_BHED_SHIFT)
#define HCBLKHD_SET_BHED(HCBLKHD, BHED) { \
	FDL_ASSERT(!((BHED) & ~((1 << HCBLKHD_BHED_SIZE)-1))); \
	HCBLKHD = (((unsigned long)(HCBLKHD)) & ~HCBLKHD_BHED_MASK) | (((unsigned long)(BHED)) << HCBLKHD_BHED_SHIFT);\
}
#define HCBLKHD_TOTAL_SIZE	32
#define HCBLKHD(BHED) \
	((((unsigned long)(BHED)) << HCBLKHD_BHED_SHIFT))

/*
 *  HCBLKCUR struct
 */
#define HCBLKCUR_PAD0_SIZE	4
#define HCBLKCUR_PAD0_SHIFT	0
#define HCBLKCUR_PAD0_MASK	0x0000000f
#define HCBLKCUR_GET_PAD0(HCBLKCUR) \
	((((unsigned long)(HCBLKCUR)) & HCBLKCUR_PAD0_MASK) >> HCBLKCUR_PAD0_SHIFT)
#define HCBLKCUR_SET_PAD0(HCBLKCUR, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCBLKCUR_PAD0_SIZE)-1))); \
	HCBLKCUR = (((unsigned long)(HCBLKCUR)) & ~HCBLKCUR_PAD0_MASK) | (((unsigned long)(pad0)) << HCBLKCUR_PAD0_SHIFT);\
}
#define HCBLKCUR_BCED_SIZE	28
#define HCBLKCUR_BCED_SHIFT	4
#define HCBLKCUR_BCED_MASK	0xfffffff0
#define HCBLKCUR_GET_BCED(HCBLKCUR) \
	((((unsigned long)(HCBLKCUR)) & HCBLKCUR_BCED_MASK) >> HCBLKCUR_BCED_SHIFT)
#define HCBLKCUR_SET_BCED(HCBLKCUR, BCED) { \
	FDL_ASSERT(!((BCED) & ~((1 << HCBLKCUR_BCED_SIZE)-1))); \
	HCBLKCUR = (((unsigned long)(HCBLKCUR)) & ~HCBLKCUR_BCED_MASK) | (((unsigned long)(BCED)) << HCBLKCUR_BCED_SHIFT);\
}
#define HCBLKCUR_TOTAL_SIZE	32
#define HCBLKCUR(BCED) \
	((((unsigned long)(BCED)) << HCBLKCUR_BCED_SHIFT))

/*
 *  HCDNHD struct
 */
#define HCDNHD_PAD0_SIZE	4
#define HCDNHD_PAD0_SHIFT	0
#define HCDNHD_PAD0_MASK	0x0000000f
#define HCDNHD_GET_PAD0(HCDNHD) \
	((((unsigned long)(HCDNHD)) & HCDNHD_PAD0_MASK) >> HCDNHD_PAD0_SHIFT)
#define HCDNHD_SET_PAD0(HCDNHD, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCDNHD_PAD0_SIZE)-1))); \
	HCDNHD = (((unsigned long)(HCDNHD)) & ~HCDNHD_PAD0_MASK) | (((unsigned long)(pad0)) << HCDNHD_PAD0_SHIFT);\
}
#define HCDNHD_DH_SIZE	28
#define HCDNHD_DH_SHIFT	4
#define HCDNHD_DH_MASK	0xfffffff0
#define HCDNHD_GET_DH(HCDNHD) \
	((((unsigned long)(HCDNHD)) & HCDNHD_DH_MASK) >> HCDNHD_DH_SHIFT)
#define HCDNHD_SET_DH(HCDNHD, DH) { \
	FDL_ASSERT(!((DH) & ~((1 << HCDNHD_DH_SIZE)-1))); \
	HCDNHD = (((unsigned long)(HCDNHD)) & ~HCDNHD_DH_MASK) | (((unsigned long)(DH)) << HCDNHD_DH_SHIFT);\
}
#define HCDNHD_TOTAL_SIZE	32
#define HCDNHD(DH) \
	((((unsigned long)(DH)) << HCDNHD_DH_SHIFT))

/*
 *  HCFMINT struct
 */
#define HCFMINT_FI_SIZE	14
#define HCFMINT_FI_SHIFT	0
#define HCFMINT_FI_MASK	0x00003fff
#define HCFMINT_GET_FI(HCFMINT) \
	((((unsigned long)(HCFMINT)) & HCFMINT_FI_MASK) >> HCFMINT_FI_SHIFT)
#define HCFMINT_SET_FI(HCFMINT, FI) { \
	FDL_ASSERT(!((FI) & ~((1 << HCFMINT_FI_SIZE)-1))); \
	HCFMINT = (((unsigned long)(HCFMINT)) & ~HCFMINT_FI_MASK) | (((unsigned long)(FI)) << HCFMINT_FI_SHIFT);\
}
#define HCFMINT_PAD0_SIZE	2
#define HCFMINT_PAD0_SHIFT	14
#define HCFMINT_PAD0_MASK	0x0000c000
#define HCFMINT_GET_PAD0(HCFMINT) \
	((((unsigned long)(HCFMINT)) & HCFMINT_PAD0_MASK) >> HCFMINT_PAD0_SHIFT)
#define HCFMINT_SET_PAD0(HCFMINT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCFMINT_PAD0_SIZE)-1))); \
	HCFMINT = (((unsigned long)(HCFMINT)) & ~HCFMINT_PAD0_MASK) | (((unsigned long)(pad0)) << HCFMINT_PAD0_SHIFT);\
}
#define HCFMINT_FSMPS_SIZE	15
#define HCFMINT_FSMPS_SHIFT	16
#define HCFMINT_FSMPS_MASK	0x7fff0000
#define HCFMINT_GET_FSMPS(HCFMINT) \
	((((unsigned long)(HCFMINT)) & HCFMINT_FSMPS_MASK) >> HCFMINT_FSMPS_SHIFT)
#define HCFMINT_SET_FSMPS(HCFMINT, FSMPS) { \
	FDL_ASSERT(!((FSMPS) & ~((1 << HCFMINT_FSMPS_SIZE)-1))); \
	HCFMINT = (((unsigned long)(HCFMINT)) & ~HCFMINT_FSMPS_MASK) | (((unsigned long)(FSMPS)) << HCFMINT_FSMPS_SHIFT);\
}
#define HCFMINT_FIT_SIZE	1
#define HCFMINT_FIT_SHIFT	31
#define HCFMINT_FIT_MASK	0x80000000
#define HCFMINT_GET_FIT(HCFMINT) \
	((((unsigned long)(HCFMINT)) & HCFMINT_FIT_MASK) >> HCFMINT_FIT_SHIFT)
#define HCFMINT_SET_FIT(HCFMINT, FIT) { \
	FDL_ASSERT(!((FIT) & ~((1 << HCFMINT_FIT_SIZE)-1))); \
	HCFMINT = (((unsigned long)(HCFMINT)) & ~HCFMINT_FIT_MASK) | (((unsigned long)(FIT)) << HCFMINT_FIT_SHIFT);\
}
#define HCFMINT_TOTAL_SIZE	32
#define HCFMINT(FI, FSMPS, FIT) \
	((((unsigned long)(FI)) << HCFMINT_FI_SHIFT) | \
	 (((unsigned long)(FSMPS)) << HCFMINT_FSMPS_SHIFT) | \
	 (((unsigned long)(FIT)) << HCFMINT_FIT_SHIFT))

/*
 *  HCFMREM struct
 */
#define HCFMREM_FR_SIZE	14
#define HCFMREM_FR_SHIFT	0
#define HCFMREM_FR_MASK	0x00003fff
#define HCFMREM_GET_FR(HCFMREM) \
	((((unsigned long)(HCFMREM)) & HCFMREM_FR_MASK) >> HCFMREM_FR_SHIFT)
#define HCFMREM_SET_FR(HCFMREM, FR) { \
	FDL_ASSERT(!((FR) & ~((1 << HCFMREM_FR_SIZE)-1))); \
	HCFMREM = (((unsigned long)(HCFMREM)) & ~HCFMREM_FR_MASK) | (((unsigned long)(FR)) << HCFMREM_FR_SHIFT);\
}
#define HCFMREM_PAD0_SIZE	17
#define HCFMREM_PAD0_SHIFT	14
#define HCFMREM_PAD0_MASK	0x7fffc000
#define HCFMREM_GET_PAD0(HCFMREM) \
	((((unsigned long)(HCFMREM)) & HCFMREM_PAD0_MASK) >> HCFMREM_PAD0_SHIFT)
#define HCFMREM_SET_PAD0(HCFMREM, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCFMREM_PAD0_SIZE)-1))); \
	HCFMREM = (((unsigned long)(HCFMREM)) & ~HCFMREM_PAD0_MASK) | (((unsigned long)(pad0)) << HCFMREM_PAD0_SHIFT);\
}
#define HCFMREM_FRT_SIZE	1
#define HCFMREM_FRT_SHIFT	31
#define HCFMREM_FRT_MASK	0x80000000
#define HCFMREM_GET_FRT(HCFMREM) \
	((((unsigned long)(HCFMREM)) & HCFMREM_FRT_MASK) >> HCFMREM_FRT_SHIFT)
#define HCFMREM_SET_FRT(HCFMREM, FRT) { \
	FDL_ASSERT(!((FRT) & ~((1 << HCFMREM_FRT_SIZE)-1))); \
	HCFMREM = (((unsigned long)(HCFMREM)) & ~HCFMREM_FRT_MASK) | (((unsigned long)(FRT)) << HCFMREM_FRT_SHIFT);\
}
#define HCFMREM_TOTAL_SIZE	32
#define HCFMREM(FR, FRT) \
	((((unsigned long)(FR)) << HCFMREM_FR_SHIFT) | \
	 (((unsigned long)(FRT)) << HCFMREM_FRT_SHIFT))

/*
 *  HCFMNUM struct
 */
#define HCFMNUM_FN_SIZE	16
#define HCFMNUM_FN_SHIFT	0
#define HCFMNUM_FN_MASK	0x0000ffff
#define HCFMNUM_GET_FN(HCFMNUM) \
	((((unsigned long)(HCFMNUM)) & HCFMNUM_FN_MASK) >> HCFMNUM_FN_SHIFT)
#define HCFMNUM_SET_FN(HCFMNUM, FN) { \
	FDL_ASSERT(!((FN) & ~((1 << HCFMNUM_FN_SIZE)-1))); \
	HCFMNUM = (((unsigned long)(HCFMNUM)) & ~HCFMNUM_FN_MASK) | (((unsigned long)(FN)) << HCFMNUM_FN_SHIFT);\
}
#define HCFMNUM_PAD0_SIZE	16
#define HCFMNUM_PAD0_SHIFT	16
#define HCFMNUM_PAD0_MASK	0xffff0000
#define HCFMNUM_GET_PAD0(HCFMNUM) \
	((((unsigned long)(HCFMNUM)) & HCFMNUM_PAD0_MASK) >> HCFMNUM_PAD0_SHIFT)
#define HCFMNUM_SET_PAD0(HCFMNUM, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCFMNUM_PAD0_SIZE)-1))); \
	HCFMNUM = (((unsigned long)(HCFMNUM)) & ~HCFMNUM_PAD0_MASK) | (((unsigned long)(pad0)) << HCFMNUM_PAD0_SHIFT);\
}
#define HCFMNUM_TOTAL_SIZE	32
#define HCFMNUM(FN) \
	((((unsigned long)(FN)) << HCFMNUM_FN_SHIFT))

/*
 *  HCPERST struct
 */
#define HCPERST_PS_SIZE	14
#define HCPERST_PS_SHIFT	0
#define HCPERST_PS_MASK	0x00003fff
#define HCPERST_GET_PS(HCPERST) \
	((((unsigned long)(HCPERST)) & HCPERST_PS_MASK) >> HCPERST_PS_SHIFT)
#define HCPERST_SET_PS(HCPERST, PS) { \
	FDL_ASSERT(!((PS) & ~((1 << HCPERST_PS_SIZE)-1))); \
	HCPERST = (((unsigned long)(HCPERST)) & ~HCPERST_PS_MASK) | (((unsigned long)(PS)) << HCPERST_PS_SHIFT);\
}
#define HCPERST_PAD0_SIZE	18
#define HCPERST_PAD0_SHIFT	14
#define HCPERST_PAD0_MASK	0xffffc000
#define HCPERST_GET_PAD0(HCPERST) \
	((((unsigned long)(HCPERST)) & HCPERST_PAD0_MASK) >> HCPERST_PAD0_SHIFT)
#define HCPERST_SET_PAD0(HCPERST, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCPERST_PAD0_SIZE)-1))); \
	HCPERST = (((unsigned long)(HCPERST)) & ~HCPERST_PAD0_MASK) | (((unsigned long)(pad0)) << HCPERST_PAD0_SHIFT);\
}
#define HCPERST_TOTAL_SIZE	32
#define HCPERST(PS) \
	((((unsigned long)(PS)) << HCPERST_PS_SHIFT))

/*
 *  HCLSTHRESH struct
 */
#define HCLSTHRESH_LST_SIZE	12
#define HCLSTHRESH_LST_SHIFT	0
#define HCLSTHRESH_LST_MASK	0x00000fff
#define HCLSTHRESH_GET_LST(HCLSTHRESH) \
	((((unsigned long)(HCLSTHRESH)) & HCLSTHRESH_LST_MASK) >> HCLSTHRESH_LST_SHIFT)
#define HCLSTHRESH_SET_LST(HCLSTHRESH, LST) { \
	FDL_ASSERT(!((LST) & ~((1 << HCLSTHRESH_LST_SIZE)-1))); \
	HCLSTHRESH = (((unsigned long)(HCLSTHRESH)) & ~HCLSTHRESH_LST_MASK) | (((unsigned long)(LST)) << HCLSTHRESH_LST_SHIFT);\
}
#define HCLSTHRESH_PAD0_SIZE	20
#define HCLSTHRESH_PAD0_SHIFT	12
#define HCLSTHRESH_PAD0_MASK	0xfffff000
#define HCLSTHRESH_GET_PAD0(HCLSTHRESH) \
	((((unsigned long)(HCLSTHRESH)) & HCLSTHRESH_PAD0_MASK) >> HCLSTHRESH_PAD0_SHIFT)
#define HCLSTHRESH_SET_PAD0(HCLSTHRESH, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCLSTHRESH_PAD0_SIZE)-1))); \
	HCLSTHRESH = (((unsigned long)(HCLSTHRESH)) & ~HCLSTHRESH_PAD0_MASK) | (((unsigned long)(pad0)) << HCLSTHRESH_PAD0_SHIFT);\
}
#define HCLSTHRESH_TOTAL_SIZE	32
#define HCLSTHRESH(LST) \
	((((unsigned long)(LST)) << HCLSTHRESH_LST_SHIFT))

/*
 *  HCRHDESCA struct
 */
#define HCRHDESCA_NDP_SIZE	8
#define HCRHDESCA_NDP_SHIFT	0
#define HCRHDESCA_NDP_MASK	0x000000ff
#define HCRHDESCA_GET_NDP(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_NDP_MASK) >> HCRHDESCA_NDP_SHIFT)
#define HCRHDESCA_SET_NDP(HCRHDESCA, NDP) { \
	FDL_ASSERT(!((NDP) & ~((1 << HCRHDESCA_NDP_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_NDP_MASK) | (((unsigned long)(NDP)) << HCRHDESCA_NDP_SHIFT);\
}
#define HCRHDESCA_PSM_SIZE	1
#define HCRHDESCA_PSM_SHIFT	8
#define HCRHDESCA_PSM_MASK	0x00000100
#define HCRHDESCA_GET_PSM(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_PSM_MASK) >> HCRHDESCA_PSM_SHIFT)
#define HCRHDESCA_SET_PSM(HCRHDESCA, PSM) { \
	FDL_ASSERT(!((PSM) & ~((1 << HCRHDESCA_PSM_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_PSM_MASK) | (((unsigned long)(PSM)) << HCRHDESCA_PSM_SHIFT);\
}
#define HCRHDESCA_NPS_SIZE	1
#define HCRHDESCA_NPS_SHIFT	9
#define HCRHDESCA_NPS_MASK	0x00000200
#define HCRHDESCA_GET_NPS(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_NPS_MASK) >> HCRHDESCA_NPS_SHIFT)
#define HCRHDESCA_SET_NPS(HCRHDESCA, NPS) { \
	FDL_ASSERT(!((NPS) & ~((1 << HCRHDESCA_NPS_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_NPS_MASK) | (((unsigned long)(NPS)) << HCRHDESCA_NPS_SHIFT);\
}
#define HCRHDESCA_DT_SIZE	1
#define HCRHDESCA_DT_SHIFT	10
#define HCRHDESCA_DT_MASK	0x00000400
#define HCRHDESCA_GET_DT(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_DT_MASK) >> HCRHDESCA_DT_SHIFT)
#define HCRHDESCA_SET_DT(HCRHDESCA, DT) { \
	FDL_ASSERT(!((DT) & ~((1 << HCRHDESCA_DT_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_DT_MASK) | (((unsigned long)(DT)) << HCRHDESCA_DT_SHIFT);\
}
#define HCRHDESCA_OCPM_SIZE	1
#define HCRHDESCA_OCPM_SHIFT	11
#define HCRHDESCA_OCPM_MASK	0x00000800
#define HCRHDESCA_GET_OCPM(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_OCPM_MASK) >> HCRHDESCA_OCPM_SHIFT)
#define HCRHDESCA_SET_OCPM(HCRHDESCA, OCPM) { \
	FDL_ASSERT(!((OCPM) & ~((1 << HCRHDESCA_OCPM_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_OCPM_MASK) | (((unsigned long)(OCPM)) << HCRHDESCA_OCPM_SHIFT);\
}
#define HCRHDESCA_NOCP_SIZE	1
#define HCRHDESCA_NOCP_SHIFT	12
#define HCRHDESCA_NOCP_MASK	0x00001000
#define HCRHDESCA_GET_NOCP(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_NOCP_MASK) >> HCRHDESCA_NOCP_SHIFT)
#define HCRHDESCA_SET_NOCP(HCRHDESCA, NOCP) { \
	FDL_ASSERT(!((NOCP) & ~((1 << HCRHDESCA_NOCP_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_NOCP_MASK) | (((unsigned long)(NOCP)) << HCRHDESCA_NOCP_SHIFT);\
}
#define HCRHDESCA_PAD0_SIZE	11
#define HCRHDESCA_PAD0_SHIFT	13
#define HCRHDESCA_PAD0_MASK	0x00ffe000
#define HCRHDESCA_GET_PAD0(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_PAD0_MASK) >> HCRHDESCA_PAD0_SHIFT)
#define HCRHDESCA_SET_PAD0(HCRHDESCA, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCRHDESCA_PAD0_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_PAD0_MASK) | (((unsigned long)(pad0)) << HCRHDESCA_PAD0_SHIFT);\
}
#define HCRHDESCA_POTPGT_SIZE	8
#define HCRHDESCA_POTPGT_SHIFT	24
#define HCRHDESCA_POTPGT_MASK	0xff000000
#define HCRHDESCA_GET_POTPGT(HCRHDESCA) \
	((((unsigned long)(HCRHDESCA)) & HCRHDESCA_POTPGT_MASK) >> HCRHDESCA_POTPGT_SHIFT)
#define HCRHDESCA_SET_POTPGT(HCRHDESCA, POTPGT) { \
	FDL_ASSERT(!((POTPGT) & ~((1 << HCRHDESCA_POTPGT_SIZE)-1))); \
	HCRHDESCA = (((unsigned long)(HCRHDESCA)) & ~HCRHDESCA_POTPGT_MASK) | (((unsigned long)(POTPGT)) << HCRHDESCA_POTPGT_SHIFT);\
}
#define HCRHDESCA_TOTAL_SIZE	32
#define HCRHDESCA(NDP, PSM, NPS, DT, OCPM, NOCP, POTPGT) \
	((((unsigned long)(NDP)) << HCRHDESCA_NDP_SHIFT) | \
	 (((unsigned long)(PSM)) << HCRHDESCA_PSM_SHIFT) | \
	 (((unsigned long)(NPS)) << HCRHDESCA_NPS_SHIFT) | \
	 (((unsigned long)(DT)) << HCRHDESCA_DT_SHIFT) | \
	 (((unsigned long)(OCPM)) << HCRHDESCA_OCPM_SHIFT) | \
	 (((unsigned long)(NOCP)) << HCRHDESCA_NOCP_SHIFT) | \
	 (((unsigned long)(POTPGT)) << HCRHDESCA_POTPGT_SHIFT))

/*
 *  HCRHDESCB struct
 */
#define HCRHDESCB_DR_SIZE	16
#define HCRHDESCB_DR_SHIFT	0
#define HCRHDESCB_DR_MASK	0x0000ffff
#define HCRHDESCB_GET_DR(HCRHDESCB) \
	((((unsigned long)(HCRHDESCB)) & HCRHDESCB_DR_MASK) >> HCRHDESCB_DR_SHIFT)
#define HCRHDESCB_SET_DR(HCRHDESCB, DR) { \
	FDL_ASSERT(!((DR) & ~((1 << HCRHDESCB_DR_SIZE)-1))); \
	HCRHDESCB = (((unsigned long)(HCRHDESCB)) & ~HCRHDESCB_DR_MASK) | (((unsigned long)(DR)) << HCRHDESCB_DR_SHIFT);\
}
#define HCRHDESCB_PPCM_SIZE	16
#define HCRHDESCB_PPCM_SHIFT	16
#define HCRHDESCB_PPCM_MASK	0xffff0000
#define HCRHDESCB_GET_PPCM(HCRHDESCB) \
	((((unsigned long)(HCRHDESCB)) & HCRHDESCB_PPCM_MASK) >> HCRHDESCB_PPCM_SHIFT)
#define HCRHDESCB_SET_PPCM(HCRHDESCB, PPCM) { \
	FDL_ASSERT(!((PPCM) & ~((1 << HCRHDESCB_PPCM_SIZE)-1))); \
	HCRHDESCB = (((unsigned long)(HCRHDESCB)) & ~HCRHDESCB_PPCM_MASK) | (((unsigned long)(PPCM)) << HCRHDESCB_PPCM_SHIFT);\
}
#define HCRHDESCB_TOTAL_SIZE	32
#define HCRHDESCB(DR, PPCM) \
	((((unsigned long)(DR)) << HCRHDESCB_DR_SHIFT) | \
	 (((unsigned long)(PPCM)) << HCRHDESCB_PPCM_SHIFT))

/*
 *  HCRHSTAT struct
 */
#define HCRHSTAT_LPS_SIZE	1
#define HCRHSTAT_LPS_SHIFT	0
#define HCRHSTAT_LPS_MASK	0x00000001
#define HCRHSTAT_GET_LPS(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_LPS_MASK) >> HCRHSTAT_LPS_SHIFT)
#define HCRHSTAT_SET_LPS(HCRHSTAT, LPS) { \
	FDL_ASSERT(!((LPS) & ~((1 << HCRHSTAT_LPS_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_LPS_MASK) | (((unsigned long)(LPS)) << HCRHSTAT_LPS_SHIFT);\
}
#define HCRHSTAT_OCI_SIZE	1
#define HCRHSTAT_OCI_SHIFT	1
#define HCRHSTAT_OCI_MASK	0x00000002
#define HCRHSTAT_GET_OCI(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_OCI_MASK) >> HCRHSTAT_OCI_SHIFT)
#define HCRHSTAT_SET_OCI(HCRHSTAT, OCI) { \
	FDL_ASSERT(!((OCI) & ~((1 << HCRHSTAT_OCI_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_OCI_MASK) | (((unsigned long)(OCI)) << HCRHSTAT_OCI_SHIFT);\
}
#define HCRHSTAT_PAD0_SIZE	13
#define HCRHSTAT_PAD0_SHIFT	2
#define HCRHSTAT_PAD0_MASK	0x00007ffc
#define HCRHSTAT_GET_PAD0(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_PAD0_MASK) >> HCRHSTAT_PAD0_SHIFT)
#define HCRHSTAT_SET_PAD0(HCRHSTAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCRHSTAT_PAD0_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_PAD0_MASK) | (((unsigned long)(pad0)) << HCRHSTAT_PAD0_SHIFT);\
}
#define HCRHSTAT_DRWE_SIZE	1
#define HCRHSTAT_DRWE_SHIFT	15
#define HCRHSTAT_DRWE_MASK	0x00008000
#define HCRHSTAT_GET_DRWE(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_DRWE_MASK) >> HCRHSTAT_DRWE_SHIFT)
#define HCRHSTAT_SET_DRWE(HCRHSTAT, DRWE) { \
	FDL_ASSERT(!((DRWE) & ~((1 << HCRHSTAT_DRWE_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_DRWE_MASK) | (((unsigned long)(DRWE)) << HCRHSTAT_DRWE_SHIFT);\
}
#define HCRHSTAT_LPSC_SIZE	1
#define HCRHSTAT_LPSC_SHIFT	16
#define HCRHSTAT_LPSC_MASK	0x00010000
#define HCRHSTAT_GET_LPSC(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_LPSC_MASK) >> HCRHSTAT_LPSC_SHIFT)
#define HCRHSTAT_SET_LPSC(HCRHSTAT, LPSC) { \
	FDL_ASSERT(!((LPSC) & ~((1 << HCRHSTAT_LPSC_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_LPSC_MASK) | (((unsigned long)(LPSC)) << HCRHSTAT_LPSC_SHIFT);\
}
#define HCRHSTAT_OCIC_SIZE	1
#define HCRHSTAT_OCIC_SHIFT	17
#define HCRHSTAT_OCIC_MASK	0x00020000
#define HCRHSTAT_GET_OCIC(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_OCIC_MASK) >> HCRHSTAT_OCIC_SHIFT)
#define HCRHSTAT_SET_OCIC(HCRHSTAT, OCIC) { \
	FDL_ASSERT(!((OCIC) & ~((1 << HCRHSTAT_OCIC_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_OCIC_MASK) | (((unsigned long)(OCIC)) << HCRHSTAT_OCIC_SHIFT);\
}
#define HCRHSTAT_PAD1_SIZE	13
#define HCRHSTAT_PAD1_SHIFT	18
#define HCRHSTAT_PAD1_MASK	0x7ffc0000
#define HCRHSTAT_GET_PAD1(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_PAD1_MASK) >> HCRHSTAT_PAD1_SHIFT)
#define HCRHSTAT_SET_PAD1(HCRHSTAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << HCRHSTAT_PAD1_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_PAD1_MASK) | (((unsigned long)(pad1)) << HCRHSTAT_PAD1_SHIFT);\
}
#define HCRHSTAT_CRWE_SIZE	1
#define HCRHSTAT_CRWE_SHIFT	31
#define HCRHSTAT_CRWE_MASK	0x80000000
#define HCRHSTAT_GET_CRWE(HCRHSTAT) \
	((((unsigned long)(HCRHSTAT)) & HCRHSTAT_CRWE_MASK) >> HCRHSTAT_CRWE_SHIFT)
#define HCRHSTAT_SET_CRWE(HCRHSTAT, CRWE) { \
	FDL_ASSERT(!((CRWE) & ~((1 << HCRHSTAT_CRWE_SIZE)-1))); \
	HCRHSTAT = (((unsigned long)(HCRHSTAT)) & ~HCRHSTAT_CRWE_MASK) | (((unsigned long)(CRWE)) << HCRHSTAT_CRWE_SHIFT);\
}
#define HCRHSTAT_TOTAL_SIZE	32
#define HCRHSTAT(LPS, OCI, DRWE, LPSC, OCIC, CRWE) \
	((((unsigned long)(LPS)) << HCRHSTAT_LPS_SHIFT) | \
	 (((unsigned long)(OCI)) << HCRHSTAT_OCI_SHIFT) | \
	 (((unsigned long)(DRWE)) << HCRHSTAT_DRWE_SHIFT) | \
	 (((unsigned long)(LPSC)) << HCRHSTAT_LPSC_SHIFT) | \
	 (((unsigned long)(OCIC)) << HCRHSTAT_OCIC_SHIFT) | \
	 (((unsigned long)(CRWE)) << HCRHSTAT_CRWE_SHIFT))

/*
 *  HCRHPORT0STAT struct
 */
#define HCRHPORT0STAT_CCS_SIZE	1
#define HCRHPORT0STAT_CCS_SHIFT	0
#define HCRHPORT0STAT_CCS_MASK	0x00000001
#define HCRHPORT0STAT_GET_CCS(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_CCS_MASK) >> HCRHPORT0STAT_CCS_SHIFT)
#define HCRHPORT0STAT_SET_CCS(HCRHPORT0STAT, CCS) { \
	FDL_ASSERT(!((CCS) & ~((1 << HCRHPORT0STAT_CCS_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_CCS_MASK) | (((unsigned long)(CCS)) << HCRHPORT0STAT_CCS_SHIFT);\
}
#define HCRHPORT0STAT_PES_SIZE	1
#define HCRHPORT0STAT_PES_SHIFT	1
#define HCRHPORT0STAT_PES_MASK	0x00000002
#define HCRHPORT0STAT_GET_PES(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PES_MASK) >> HCRHPORT0STAT_PES_SHIFT)
#define HCRHPORT0STAT_SET_PES(HCRHPORT0STAT, PES) { \
	FDL_ASSERT(!((PES) & ~((1 << HCRHPORT0STAT_PES_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PES_MASK) | (((unsigned long)(PES)) << HCRHPORT0STAT_PES_SHIFT);\
}
#define HCRHPORT0STAT_PSS_SIZE	1
#define HCRHPORT0STAT_PSS_SHIFT	2
#define HCRHPORT0STAT_PSS_MASK	0x00000004
#define HCRHPORT0STAT_GET_PSS(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PSS_MASK) >> HCRHPORT0STAT_PSS_SHIFT)
#define HCRHPORT0STAT_SET_PSS(HCRHPORT0STAT, PSS) { \
	FDL_ASSERT(!((PSS) & ~((1 << HCRHPORT0STAT_PSS_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PSS_MASK) | (((unsigned long)(PSS)) << HCRHPORT0STAT_PSS_SHIFT);\
}
#define HCRHPORT0STAT_POCI_SIZE	1
#define HCRHPORT0STAT_POCI_SHIFT	3
#define HCRHPORT0STAT_POCI_MASK	0x00000008
#define HCRHPORT0STAT_GET_POCI(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_POCI_MASK) >> HCRHPORT0STAT_POCI_SHIFT)
#define HCRHPORT0STAT_SET_POCI(HCRHPORT0STAT, POCI) { \
	FDL_ASSERT(!((POCI) & ~((1 << HCRHPORT0STAT_POCI_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_POCI_MASK) | (((unsigned long)(POCI)) << HCRHPORT0STAT_POCI_SHIFT);\
}
#define HCRHPORT0STAT_PRS_SIZE	1
#define HCRHPORT0STAT_PRS_SHIFT	4
#define HCRHPORT0STAT_PRS_MASK	0x00000010
#define HCRHPORT0STAT_GET_PRS(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PRS_MASK) >> HCRHPORT0STAT_PRS_SHIFT)
#define HCRHPORT0STAT_SET_PRS(HCRHPORT0STAT, PRS) { \
	FDL_ASSERT(!((PRS) & ~((1 << HCRHPORT0STAT_PRS_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PRS_MASK) | (((unsigned long)(PRS)) << HCRHPORT0STAT_PRS_SHIFT);\
}
#define HCRHPORT0STAT_PAD0_SIZE	3
#define HCRHPORT0STAT_PAD0_SHIFT	5
#define HCRHPORT0STAT_PAD0_MASK	0x000000e0
#define HCRHPORT0STAT_GET_PAD0(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PAD0_MASK) >> HCRHPORT0STAT_PAD0_SHIFT)
#define HCRHPORT0STAT_SET_PAD0(HCRHPORT0STAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCRHPORT0STAT_PAD0_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PAD0_MASK) | (((unsigned long)(pad0)) << HCRHPORT0STAT_PAD0_SHIFT);\
}
#define HCRHPORT0STAT_PPS_SIZE	1
#define HCRHPORT0STAT_PPS_SHIFT	8
#define HCRHPORT0STAT_PPS_MASK	0x00000100
#define HCRHPORT0STAT_GET_PPS(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PPS_MASK) >> HCRHPORT0STAT_PPS_SHIFT)
#define HCRHPORT0STAT_SET_PPS(HCRHPORT0STAT, PPS) { \
	FDL_ASSERT(!((PPS) & ~((1 << HCRHPORT0STAT_PPS_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PPS_MASK) | (((unsigned long)(PPS)) << HCRHPORT0STAT_PPS_SHIFT);\
}
#define HCRHPORT0STAT_LSDA_SIZE	1
#define HCRHPORT0STAT_LSDA_SHIFT	9
#define HCRHPORT0STAT_LSDA_MASK	0x00000200
#define HCRHPORT0STAT_GET_LSDA(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_LSDA_MASK) >> HCRHPORT0STAT_LSDA_SHIFT)
#define HCRHPORT0STAT_SET_LSDA(HCRHPORT0STAT, LSDA) { \
	FDL_ASSERT(!((LSDA) & ~((1 << HCRHPORT0STAT_LSDA_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_LSDA_MASK) | (((unsigned long)(LSDA)) << HCRHPORT0STAT_LSDA_SHIFT);\
}
#define HCRHPORT0STAT_PAD1_SIZE	6
#define HCRHPORT0STAT_PAD1_SHIFT	10
#define HCRHPORT0STAT_PAD1_MASK	0x0000fc00
#define HCRHPORT0STAT_GET_PAD1(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PAD1_MASK) >> HCRHPORT0STAT_PAD1_SHIFT)
#define HCRHPORT0STAT_SET_PAD1(HCRHPORT0STAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << HCRHPORT0STAT_PAD1_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PAD1_MASK) | (((unsigned long)(pad1)) << HCRHPORT0STAT_PAD1_SHIFT);\
}
#define HCRHPORT0STAT_CSC_SIZE	1
#define HCRHPORT0STAT_CSC_SHIFT	16
#define HCRHPORT0STAT_CSC_MASK	0x00010000
#define HCRHPORT0STAT_GET_CSC(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_CSC_MASK) >> HCRHPORT0STAT_CSC_SHIFT)
#define HCRHPORT0STAT_SET_CSC(HCRHPORT0STAT, CSC) { \
	FDL_ASSERT(!((CSC) & ~((1 << HCRHPORT0STAT_CSC_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_CSC_MASK) | (((unsigned long)(CSC)) << HCRHPORT0STAT_CSC_SHIFT);\
}
#define HCRHPORT0STAT_PESC_SIZE	1
#define HCRHPORT0STAT_PESC_SHIFT	17
#define HCRHPORT0STAT_PESC_MASK	0x00020000
#define HCRHPORT0STAT_GET_PESC(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PESC_MASK) >> HCRHPORT0STAT_PESC_SHIFT)
#define HCRHPORT0STAT_SET_PESC(HCRHPORT0STAT, PESC) { \
	FDL_ASSERT(!((PESC) & ~((1 << HCRHPORT0STAT_PESC_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PESC_MASK) | (((unsigned long)(PESC)) << HCRHPORT0STAT_PESC_SHIFT);\
}
#define HCRHPORT0STAT_PSSC_SIZE	1
#define HCRHPORT0STAT_PSSC_SHIFT	18
#define HCRHPORT0STAT_PSSC_MASK	0x00040000
#define HCRHPORT0STAT_GET_PSSC(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PSSC_MASK) >> HCRHPORT0STAT_PSSC_SHIFT)
#define HCRHPORT0STAT_SET_PSSC(HCRHPORT0STAT, PSSC) { \
	FDL_ASSERT(!((PSSC) & ~((1 << HCRHPORT0STAT_PSSC_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PSSC_MASK) | (((unsigned long)(PSSC)) << HCRHPORT0STAT_PSSC_SHIFT);\
}
#define HCRHPORT0STAT_OCIC_SIZE	1
#define HCRHPORT0STAT_OCIC_SHIFT	19
#define HCRHPORT0STAT_OCIC_MASK	0x00080000
#define HCRHPORT0STAT_GET_OCIC(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_OCIC_MASK) >> HCRHPORT0STAT_OCIC_SHIFT)
#define HCRHPORT0STAT_SET_OCIC(HCRHPORT0STAT, OCIC) { \
	FDL_ASSERT(!((OCIC) & ~((1 << HCRHPORT0STAT_OCIC_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_OCIC_MASK) | (((unsigned long)(OCIC)) << HCRHPORT0STAT_OCIC_SHIFT);\
}
#define HCRHPORT0STAT_PRSC_SIZE	1
#define HCRHPORT0STAT_PRSC_SHIFT	20
#define HCRHPORT0STAT_PRSC_MASK	0x00100000
#define HCRHPORT0STAT_GET_PRSC(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PRSC_MASK) >> HCRHPORT0STAT_PRSC_SHIFT)
#define HCRHPORT0STAT_SET_PRSC(HCRHPORT0STAT, PRSC) { \
	FDL_ASSERT(!((PRSC) & ~((1 << HCRHPORT0STAT_PRSC_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PRSC_MASK) | (((unsigned long)(PRSC)) << HCRHPORT0STAT_PRSC_SHIFT);\
}
#define HCRHPORT0STAT_PAD2_SIZE	11
#define HCRHPORT0STAT_PAD2_SHIFT	21
#define HCRHPORT0STAT_PAD2_MASK	0xffe00000
#define HCRHPORT0STAT_GET_PAD2(HCRHPORT0STAT) \
	((((unsigned long)(HCRHPORT0STAT)) & HCRHPORT0STAT_PAD2_MASK) >> HCRHPORT0STAT_PAD2_SHIFT)
#define HCRHPORT0STAT_SET_PAD2(HCRHPORT0STAT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << HCRHPORT0STAT_PAD2_SIZE)-1))); \
	HCRHPORT0STAT = (((unsigned long)(HCRHPORT0STAT)) & ~HCRHPORT0STAT_PAD2_MASK) | (((unsigned long)(pad2)) << HCRHPORT0STAT_PAD2_SHIFT);\
}
#define HCRHPORT0STAT_TOTAL_SIZE	32
#define HCRHPORT0STAT(CCS, PES, PSS, POCI, PRS, PPS, LSDA, CSC, PESC, PSSC, OCIC, PRSC) \
	((((unsigned long)(CCS)) << HCRHPORT0STAT_CCS_SHIFT) | \
	 (((unsigned long)(PES)) << HCRHPORT0STAT_PES_SHIFT) | \
	 (((unsigned long)(PSS)) << HCRHPORT0STAT_PSS_SHIFT) | \
	 (((unsigned long)(POCI)) << HCRHPORT0STAT_POCI_SHIFT) | \
	 (((unsigned long)(PRS)) << HCRHPORT0STAT_PRS_SHIFT) | \
	 (((unsigned long)(PPS)) << HCRHPORT0STAT_PPS_SHIFT) | \
	 (((unsigned long)(LSDA)) << HCRHPORT0STAT_LSDA_SHIFT) | \
	 (((unsigned long)(CSC)) << HCRHPORT0STAT_CSC_SHIFT) | \
	 (((unsigned long)(PESC)) << HCRHPORT0STAT_PESC_SHIFT) | \
	 (((unsigned long)(PSSC)) << HCRHPORT0STAT_PSSC_SHIFT) | \
	 (((unsigned long)(OCIC)) << HCRHPORT0STAT_OCIC_SHIFT) | \
	 (((unsigned long)(PRSC)) << HCRHPORT0STAT_PRSC_SHIFT))

/*
 *  HCRHPORT1STAT struct
 */
#define HCRHPORT1STAT_CCS_SIZE	1
#define HCRHPORT1STAT_CCS_SHIFT	0
#define HCRHPORT1STAT_CCS_MASK	0x00000001
#define HCRHPORT1STAT_GET_CCS(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_CCS_MASK) >> HCRHPORT1STAT_CCS_SHIFT)
#define HCRHPORT1STAT_SET_CCS(HCRHPORT1STAT, CCS) { \
	FDL_ASSERT(!((CCS) & ~((1 << HCRHPORT1STAT_CCS_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_CCS_MASK) | (((unsigned long)(CCS)) << HCRHPORT1STAT_CCS_SHIFT);\
}
#define HCRHPORT1STAT_PES_SIZE	1
#define HCRHPORT1STAT_PES_SHIFT	1
#define HCRHPORT1STAT_PES_MASK	0x00000002
#define HCRHPORT1STAT_GET_PES(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PES_MASK) >> HCRHPORT1STAT_PES_SHIFT)
#define HCRHPORT1STAT_SET_PES(HCRHPORT1STAT, PES) { \
	FDL_ASSERT(!((PES) & ~((1 << HCRHPORT1STAT_PES_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PES_MASK) | (((unsigned long)(PES)) << HCRHPORT1STAT_PES_SHIFT);\
}
#define HCRHPORT1STAT_PSS_SIZE	1
#define HCRHPORT1STAT_PSS_SHIFT	2
#define HCRHPORT1STAT_PSS_MASK	0x00000004
#define HCRHPORT1STAT_GET_PSS(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PSS_MASK) >> HCRHPORT1STAT_PSS_SHIFT)
#define HCRHPORT1STAT_SET_PSS(HCRHPORT1STAT, PSS) { \
	FDL_ASSERT(!((PSS) & ~((1 << HCRHPORT1STAT_PSS_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PSS_MASK) | (((unsigned long)(PSS)) << HCRHPORT1STAT_PSS_SHIFT);\
}
#define HCRHPORT1STAT_POCI_SIZE	1
#define HCRHPORT1STAT_POCI_SHIFT	3
#define HCRHPORT1STAT_POCI_MASK	0x00000008
#define HCRHPORT1STAT_GET_POCI(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_POCI_MASK) >> HCRHPORT1STAT_POCI_SHIFT)
#define HCRHPORT1STAT_SET_POCI(HCRHPORT1STAT, POCI) { \
	FDL_ASSERT(!((POCI) & ~((1 << HCRHPORT1STAT_POCI_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_POCI_MASK) | (((unsigned long)(POCI)) << HCRHPORT1STAT_POCI_SHIFT);\
}
#define HCRHPORT1STAT_PRS_SIZE	1
#define HCRHPORT1STAT_PRS_SHIFT	4
#define HCRHPORT1STAT_PRS_MASK	0x00000010
#define HCRHPORT1STAT_GET_PRS(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PRS_MASK) >> HCRHPORT1STAT_PRS_SHIFT)
#define HCRHPORT1STAT_SET_PRS(HCRHPORT1STAT, PRS) { \
	FDL_ASSERT(!((PRS) & ~((1 << HCRHPORT1STAT_PRS_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PRS_MASK) | (((unsigned long)(PRS)) << HCRHPORT1STAT_PRS_SHIFT);\
}
#define HCRHPORT1STAT_PAD0_SIZE	3
#define HCRHPORT1STAT_PAD0_SHIFT	5
#define HCRHPORT1STAT_PAD0_MASK	0x000000e0
#define HCRHPORT1STAT_GET_PAD0(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PAD0_MASK) >> HCRHPORT1STAT_PAD0_SHIFT)
#define HCRHPORT1STAT_SET_PAD0(HCRHPORT1STAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCRHPORT1STAT_PAD0_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PAD0_MASK) | (((unsigned long)(pad0)) << HCRHPORT1STAT_PAD0_SHIFT);\
}
#define HCRHPORT1STAT_PPS_SIZE	1
#define HCRHPORT1STAT_PPS_SHIFT	8
#define HCRHPORT1STAT_PPS_MASK	0x00000100
#define HCRHPORT1STAT_GET_PPS(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PPS_MASK) >> HCRHPORT1STAT_PPS_SHIFT)
#define HCRHPORT1STAT_SET_PPS(HCRHPORT1STAT, PPS) { \
	FDL_ASSERT(!((PPS) & ~((1 << HCRHPORT1STAT_PPS_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PPS_MASK) | (((unsigned long)(PPS)) << HCRHPORT1STAT_PPS_SHIFT);\
}
#define HCRHPORT1STAT_LSDA_SIZE	1
#define HCRHPORT1STAT_LSDA_SHIFT	9
#define HCRHPORT1STAT_LSDA_MASK	0x00000200
#define HCRHPORT1STAT_GET_LSDA(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_LSDA_MASK) >> HCRHPORT1STAT_LSDA_SHIFT)
#define HCRHPORT1STAT_SET_LSDA(HCRHPORT1STAT, LSDA) { \
	FDL_ASSERT(!((LSDA) & ~((1 << HCRHPORT1STAT_LSDA_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_LSDA_MASK) | (((unsigned long)(LSDA)) << HCRHPORT1STAT_LSDA_SHIFT);\
}
#define HCRHPORT1STAT_PAD1_SIZE	6
#define HCRHPORT1STAT_PAD1_SHIFT	10
#define HCRHPORT1STAT_PAD1_MASK	0x0000fc00
#define HCRHPORT1STAT_GET_PAD1(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PAD1_MASK) >> HCRHPORT1STAT_PAD1_SHIFT)
#define HCRHPORT1STAT_SET_PAD1(HCRHPORT1STAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << HCRHPORT1STAT_PAD1_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PAD1_MASK) | (((unsigned long)(pad1)) << HCRHPORT1STAT_PAD1_SHIFT);\
}
#define HCRHPORT1STAT_CSC_SIZE	1
#define HCRHPORT1STAT_CSC_SHIFT	16
#define HCRHPORT1STAT_CSC_MASK	0x00010000
#define HCRHPORT1STAT_GET_CSC(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_CSC_MASK) >> HCRHPORT1STAT_CSC_SHIFT)
#define HCRHPORT1STAT_SET_CSC(HCRHPORT1STAT, CSC) { \
	FDL_ASSERT(!((CSC) & ~((1 << HCRHPORT1STAT_CSC_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_CSC_MASK) | (((unsigned long)(CSC)) << HCRHPORT1STAT_CSC_SHIFT);\
}
#define HCRHPORT1STAT_PESC_SIZE	1
#define HCRHPORT1STAT_PESC_SHIFT	17
#define HCRHPORT1STAT_PESC_MASK	0x00020000
#define HCRHPORT1STAT_GET_PESC(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PESC_MASK) >> HCRHPORT1STAT_PESC_SHIFT)
#define HCRHPORT1STAT_SET_PESC(HCRHPORT1STAT, PESC) { \
	FDL_ASSERT(!((PESC) & ~((1 << HCRHPORT1STAT_PESC_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PESC_MASK) | (((unsigned long)(PESC)) << HCRHPORT1STAT_PESC_SHIFT);\
}
#define HCRHPORT1STAT_PSSC_SIZE	1
#define HCRHPORT1STAT_PSSC_SHIFT	18
#define HCRHPORT1STAT_PSSC_MASK	0x00040000
#define HCRHPORT1STAT_GET_PSSC(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PSSC_MASK) >> HCRHPORT1STAT_PSSC_SHIFT)
#define HCRHPORT1STAT_SET_PSSC(HCRHPORT1STAT, PSSC) { \
	FDL_ASSERT(!((PSSC) & ~((1 << HCRHPORT1STAT_PSSC_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PSSC_MASK) | (((unsigned long)(PSSC)) << HCRHPORT1STAT_PSSC_SHIFT);\
}
#define HCRHPORT1STAT_OCIC_SIZE	1
#define HCRHPORT1STAT_OCIC_SHIFT	19
#define HCRHPORT1STAT_OCIC_MASK	0x00080000
#define HCRHPORT1STAT_GET_OCIC(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_OCIC_MASK) >> HCRHPORT1STAT_OCIC_SHIFT)
#define HCRHPORT1STAT_SET_OCIC(HCRHPORT1STAT, OCIC) { \
	FDL_ASSERT(!((OCIC) & ~((1 << HCRHPORT1STAT_OCIC_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_OCIC_MASK) | (((unsigned long)(OCIC)) << HCRHPORT1STAT_OCIC_SHIFT);\
}
#define HCRHPORT1STAT_PRSC_SIZE	1
#define HCRHPORT1STAT_PRSC_SHIFT	20
#define HCRHPORT1STAT_PRSC_MASK	0x00100000
#define HCRHPORT1STAT_GET_PRSC(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PRSC_MASK) >> HCRHPORT1STAT_PRSC_SHIFT)
#define HCRHPORT1STAT_SET_PRSC(HCRHPORT1STAT, PRSC) { \
	FDL_ASSERT(!((PRSC) & ~((1 << HCRHPORT1STAT_PRSC_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PRSC_MASK) | (((unsigned long)(PRSC)) << HCRHPORT1STAT_PRSC_SHIFT);\
}
#define HCRHPORT1STAT_PAD2_SIZE	11
#define HCRHPORT1STAT_PAD2_SHIFT	21
#define HCRHPORT1STAT_PAD2_MASK	0xffe00000
#define HCRHPORT1STAT_GET_PAD2(HCRHPORT1STAT) \
	((((unsigned long)(HCRHPORT1STAT)) & HCRHPORT1STAT_PAD2_MASK) >> HCRHPORT1STAT_PAD2_SHIFT)
#define HCRHPORT1STAT_SET_PAD2(HCRHPORT1STAT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << HCRHPORT1STAT_PAD2_SIZE)-1))); \
	HCRHPORT1STAT = (((unsigned long)(HCRHPORT1STAT)) & ~HCRHPORT1STAT_PAD2_MASK) | (((unsigned long)(pad2)) << HCRHPORT1STAT_PAD2_SHIFT);\
}
#define HCRHPORT1STAT_TOTAL_SIZE	32
#define HCRHPORT1STAT(CCS, PES, PSS, POCI, PRS, PPS, LSDA, CSC, PESC, PSSC, OCIC, PRSC) \
	((((unsigned long)(CCS)) << HCRHPORT1STAT_CCS_SHIFT) | \
	 (((unsigned long)(PES)) << HCRHPORT1STAT_PES_SHIFT) | \
	 (((unsigned long)(PSS)) << HCRHPORT1STAT_PSS_SHIFT) | \
	 (((unsigned long)(POCI)) << HCRHPORT1STAT_POCI_SHIFT) | \
	 (((unsigned long)(PRS)) << HCRHPORT1STAT_PRS_SHIFT) | \
	 (((unsigned long)(PPS)) << HCRHPORT1STAT_PPS_SHIFT) | \
	 (((unsigned long)(LSDA)) << HCRHPORT1STAT_LSDA_SHIFT) | \
	 (((unsigned long)(CSC)) << HCRHPORT1STAT_CSC_SHIFT) | \
	 (((unsigned long)(PESC)) << HCRHPORT1STAT_PESC_SHIFT) | \
	 (((unsigned long)(PSSC)) << HCRHPORT1STAT_PSSC_SHIFT) | \
	 (((unsigned long)(OCIC)) << HCRHPORT1STAT_OCIC_SHIFT) | \
	 (((unsigned long)(PRSC)) << HCRHPORT1STAT_PRSC_SHIFT))

/*
 *  HCRHPORT2STAT struct
 */
#define HCRHPORT2STAT_CCS_SIZE	1
#define HCRHPORT2STAT_CCS_SHIFT	0
#define HCRHPORT2STAT_CCS_MASK	0x00000001
#define HCRHPORT2STAT_GET_CCS(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_CCS_MASK) >> HCRHPORT2STAT_CCS_SHIFT)
#define HCRHPORT2STAT_SET_CCS(HCRHPORT2STAT, CCS) { \
	FDL_ASSERT(!((CCS) & ~((1 << HCRHPORT2STAT_CCS_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_CCS_MASK) | (((unsigned long)(CCS)) << HCRHPORT2STAT_CCS_SHIFT);\
}
#define HCRHPORT2STAT_PES_SIZE	1
#define HCRHPORT2STAT_PES_SHIFT	1
#define HCRHPORT2STAT_PES_MASK	0x00000002
#define HCRHPORT2STAT_GET_PES(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PES_MASK) >> HCRHPORT2STAT_PES_SHIFT)
#define HCRHPORT2STAT_SET_PES(HCRHPORT2STAT, PES) { \
	FDL_ASSERT(!((PES) & ~((1 << HCRHPORT2STAT_PES_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PES_MASK) | (((unsigned long)(PES)) << HCRHPORT2STAT_PES_SHIFT);\
}
#define HCRHPORT2STAT_PSS_SIZE	1
#define HCRHPORT2STAT_PSS_SHIFT	2
#define HCRHPORT2STAT_PSS_MASK	0x00000004
#define HCRHPORT2STAT_GET_PSS(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PSS_MASK) >> HCRHPORT2STAT_PSS_SHIFT)
#define HCRHPORT2STAT_SET_PSS(HCRHPORT2STAT, PSS) { \
	FDL_ASSERT(!((PSS) & ~((1 << HCRHPORT2STAT_PSS_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PSS_MASK) | (((unsigned long)(PSS)) << HCRHPORT2STAT_PSS_SHIFT);\
}
#define HCRHPORT2STAT_POCI_SIZE	1
#define HCRHPORT2STAT_POCI_SHIFT	3
#define HCRHPORT2STAT_POCI_MASK	0x00000008
#define HCRHPORT2STAT_GET_POCI(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_POCI_MASK) >> HCRHPORT2STAT_POCI_SHIFT)
#define HCRHPORT2STAT_SET_POCI(HCRHPORT2STAT, POCI) { \
	FDL_ASSERT(!((POCI) & ~((1 << HCRHPORT2STAT_POCI_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_POCI_MASK) | (((unsigned long)(POCI)) << HCRHPORT2STAT_POCI_SHIFT);\
}
#define HCRHPORT2STAT_PRS_SIZE	1
#define HCRHPORT2STAT_PRS_SHIFT	4
#define HCRHPORT2STAT_PRS_MASK	0x00000010
#define HCRHPORT2STAT_GET_PRS(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PRS_MASK) >> HCRHPORT2STAT_PRS_SHIFT)
#define HCRHPORT2STAT_SET_PRS(HCRHPORT2STAT, PRS) { \
	FDL_ASSERT(!((PRS) & ~((1 << HCRHPORT2STAT_PRS_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PRS_MASK) | (((unsigned long)(PRS)) << HCRHPORT2STAT_PRS_SHIFT);\
}
#define HCRHPORT2STAT_PAD0_SIZE	3
#define HCRHPORT2STAT_PAD0_SHIFT	5
#define HCRHPORT2STAT_PAD0_MASK	0x000000e0
#define HCRHPORT2STAT_GET_PAD0(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PAD0_MASK) >> HCRHPORT2STAT_PAD0_SHIFT)
#define HCRHPORT2STAT_SET_PAD0(HCRHPORT2STAT, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << HCRHPORT2STAT_PAD0_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PAD0_MASK) | (((unsigned long)(pad0)) << HCRHPORT2STAT_PAD0_SHIFT);\
}
#define HCRHPORT2STAT_PPS_SIZE	1
#define HCRHPORT2STAT_PPS_SHIFT	8
#define HCRHPORT2STAT_PPS_MASK	0x00000100
#define HCRHPORT2STAT_GET_PPS(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PPS_MASK) >> HCRHPORT2STAT_PPS_SHIFT)
#define HCRHPORT2STAT_SET_PPS(HCRHPORT2STAT, PPS) { \
	FDL_ASSERT(!((PPS) & ~((1 << HCRHPORT2STAT_PPS_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PPS_MASK) | (((unsigned long)(PPS)) << HCRHPORT2STAT_PPS_SHIFT);\
}
#define HCRHPORT2STAT_LSDA_SIZE	1
#define HCRHPORT2STAT_LSDA_SHIFT	9
#define HCRHPORT2STAT_LSDA_MASK	0x00000200
#define HCRHPORT2STAT_GET_LSDA(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_LSDA_MASK) >> HCRHPORT2STAT_LSDA_SHIFT)
#define HCRHPORT2STAT_SET_LSDA(HCRHPORT2STAT, LSDA) { \
	FDL_ASSERT(!((LSDA) & ~((1 << HCRHPORT2STAT_LSDA_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_LSDA_MASK) | (((unsigned long)(LSDA)) << HCRHPORT2STAT_LSDA_SHIFT);\
}
#define HCRHPORT2STAT_PAD1_SIZE	6
#define HCRHPORT2STAT_PAD1_SHIFT	10
#define HCRHPORT2STAT_PAD1_MASK	0x0000fc00
#define HCRHPORT2STAT_GET_PAD1(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PAD1_MASK) >> HCRHPORT2STAT_PAD1_SHIFT)
#define HCRHPORT2STAT_SET_PAD1(HCRHPORT2STAT, pad1) { \
	FDL_ASSERT(!((pad1) & ~((1 << HCRHPORT2STAT_PAD1_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PAD1_MASK) | (((unsigned long)(pad1)) << HCRHPORT2STAT_PAD1_SHIFT);\
}
#define HCRHPORT2STAT_CSC_SIZE	1
#define HCRHPORT2STAT_CSC_SHIFT	16
#define HCRHPORT2STAT_CSC_MASK	0x00010000
#define HCRHPORT2STAT_GET_CSC(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_CSC_MASK) >> HCRHPORT2STAT_CSC_SHIFT)
#define HCRHPORT2STAT_SET_CSC(HCRHPORT2STAT, CSC) { \
	FDL_ASSERT(!((CSC) & ~((1 << HCRHPORT2STAT_CSC_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_CSC_MASK) | (((unsigned long)(CSC)) << HCRHPORT2STAT_CSC_SHIFT);\
}
#define HCRHPORT2STAT_PESC_SIZE	1
#define HCRHPORT2STAT_PESC_SHIFT	17
#define HCRHPORT2STAT_PESC_MASK	0x00020000
#define HCRHPORT2STAT_GET_PESC(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PESC_MASK) >> HCRHPORT2STAT_PESC_SHIFT)
#define HCRHPORT2STAT_SET_PESC(HCRHPORT2STAT, PESC) { \
	FDL_ASSERT(!((PESC) & ~((1 << HCRHPORT2STAT_PESC_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PESC_MASK) | (((unsigned long)(PESC)) << HCRHPORT2STAT_PESC_SHIFT);\
}
#define HCRHPORT2STAT_PSSC_SIZE	1
#define HCRHPORT2STAT_PSSC_SHIFT	18
#define HCRHPORT2STAT_PSSC_MASK	0x00040000
#define HCRHPORT2STAT_GET_PSSC(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PSSC_MASK) >> HCRHPORT2STAT_PSSC_SHIFT)
#define HCRHPORT2STAT_SET_PSSC(HCRHPORT2STAT, PSSC) { \
	FDL_ASSERT(!((PSSC) & ~((1 << HCRHPORT2STAT_PSSC_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PSSC_MASK) | (((unsigned long)(PSSC)) << HCRHPORT2STAT_PSSC_SHIFT);\
}
#define HCRHPORT2STAT_OCIC_SIZE	1
#define HCRHPORT2STAT_OCIC_SHIFT	19
#define HCRHPORT2STAT_OCIC_MASK	0x00080000
#define HCRHPORT2STAT_GET_OCIC(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_OCIC_MASK) >> HCRHPORT2STAT_OCIC_SHIFT)
#define HCRHPORT2STAT_SET_OCIC(HCRHPORT2STAT, OCIC) { \
	FDL_ASSERT(!((OCIC) & ~((1 << HCRHPORT2STAT_OCIC_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_OCIC_MASK) | (((unsigned long)(OCIC)) << HCRHPORT2STAT_OCIC_SHIFT);\
}
#define HCRHPORT2STAT_PRSC_SIZE	1
#define HCRHPORT2STAT_PRSC_SHIFT	20
#define HCRHPORT2STAT_PRSC_MASK	0x00100000
#define HCRHPORT2STAT_GET_PRSC(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PRSC_MASK) >> HCRHPORT2STAT_PRSC_SHIFT)
#define HCRHPORT2STAT_SET_PRSC(HCRHPORT2STAT, PRSC) { \
	FDL_ASSERT(!((PRSC) & ~((1 << HCRHPORT2STAT_PRSC_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PRSC_MASK) | (((unsigned long)(PRSC)) << HCRHPORT2STAT_PRSC_SHIFT);\
}
#define HCRHPORT2STAT_PAD2_SIZE	11
#define HCRHPORT2STAT_PAD2_SHIFT	21
#define HCRHPORT2STAT_PAD2_MASK	0xffe00000
#define HCRHPORT2STAT_GET_PAD2(HCRHPORT2STAT) \
	((((unsigned long)(HCRHPORT2STAT)) & HCRHPORT2STAT_PAD2_MASK) >> HCRHPORT2STAT_PAD2_SHIFT)
#define HCRHPORT2STAT_SET_PAD2(HCRHPORT2STAT, pad2) { \
	FDL_ASSERT(!((pad2) & ~((1 << HCRHPORT2STAT_PAD2_SIZE)-1))); \
	HCRHPORT2STAT = (((unsigned long)(HCRHPORT2STAT)) & ~HCRHPORT2STAT_PAD2_MASK) | (((unsigned long)(pad2)) << HCRHPORT2STAT_PAD2_SHIFT);\
}
#define HCRHPORT2STAT_TOTAL_SIZE	32
#define HCRHPORT2STAT(CCS, PES, PSS, POCI, PRS, PPS, LSDA, CSC, PESC, PSSC, OCIC, PRSC) \
	((((unsigned long)(CCS)) << HCRHPORT2STAT_CCS_SHIFT) | \
	 (((unsigned long)(PES)) << HCRHPORT2STAT_PES_SHIFT) | \
	 (((unsigned long)(PSS)) << HCRHPORT2STAT_PSS_SHIFT) | \
	 (((unsigned long)(POCI)) << HCRHPORT2STAT_POCI_SHIFT) | \
	 (((unsigned long)(PRS)) << HCRHPORT2STAT_PRS_SHIFT) | \
	 (((unsigned long)(PPS)) << HCRHPORT2STAT_PPS_SHIFT) | \
	 (((unsigned long)(LSDA)) << HCRHPORT2STAT_LSDA_SHIFT) | \
	 (((unsigned long)(CSC)) << HCRHPORT2STAT_CSC_SHIFT) | \
	 (((unsigned long)(PESC)) << HCRHPORT2STAT_PESC_SHIFT) | \
	 (((unsigned long)(PSSC)) << HCRHPORT2STAT_PSSC_SHIFT) | \
	 (((unsigned long)(OCIC)) << HCRHPORT2STAT_OCIC_SHIFT) | \
	 (((unsigned long)(PRSC)) << HCRHPORT2STAT_PRSC_SHIFT))

/*
 *  AHMPROTFSPL struct
 */
#define AHMPROTFSPL_AHBEXIDISEC_F_SPL_SIZE	1
#define AHMPROTFSPL_AHBEXIDISEC_F_SPL_SHIFT	0
#define AHMPROTFSPL_AHBEXIDISEC_F_SPL_MASK	0x00000001
#define AHMPROTFSPL_GET_AHBEXIDISEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_AHBEXIDISEC_F_SPL_MASK) >> AHMPROTFSPL_AHBEXIDISEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_AHBEXIDISEC_F_SPL(AHMPROTFSPL, AHBEXIDISEC_F_SPL) { \
	FDL_ASSERT(!((AHBEXIDISEC_F_SPL) & ~((1 << AHMPROTFSPL_AHBEXIDISEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_AHBEXIDISEC_F_SPL_MASK) | (((unsigned long)(AHBEXIDISEC_F_SPL)) << AHMPROTFSPL_AHBEXIDISEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_FLASHSEC_F_SPL_SIZE	1
#define AHMPROTFSPL_FLASHSEC_F_SPL_SHIFT	1
#define AHMPROTFSPL_FLASHSEC_F_SPL_MASK	0x00000002
#define AHMPROTFSPL_GET_FLASHSEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_FLASHSEC_F_SPL_MASK) >> AHMPROTFSPL_FLASHSEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_FLASHSEC_F_SPL(AHMPROTFSPL, FLASHSEC_F_SPL) { \
	FDL_ASSERT(!((FLASHSEC_F_SPL) & ~((1 << AHMPROTFSPL_FLASHSEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_FLASHSEC_F_SPL_MASK) | (((unsigned long)(FLASHSEC_F_SPL)) << AHMPROTFSPL_FLASHSEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_AESSEC_F_SPL_SIZE	1
#define AHMPROTFSPL_AESSEC_F_SPL_SHIFT	2
#define AHMPROTFSPL_AESSEC_F_SPL_MASK	0x00000004
#define AHMPROTFSPL_GET_AESSEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_AESSEC_F_SPL_MASK) >> AHMPROTFSPL_AESSEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_AESSEC_F_SPL(AHMPROTFSPL, AESSEC_F_SPL) { \
	FDL_ASSERT(!((AESSEC_F_SPL) & ~((1 << AHMPROTFSPL_AESSEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_AESSEC_F_SPL_MASK) | (((unsigned long)(AESSEC_F_SPL)) << AHMPROTFSPL_AESSEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_SHASEC_F_SPL_SIZE	1
#define AHMPROTFSPL_SHASEC_F_SPL_SHIFT	3
#define AHMPROTFSPL_SHASEC_F_SPL_MASK	0x00000008
#define AHMPROTFSPL_GET_SHASEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_SHASEC_F_SPL_MASK) >> AHMPROTFSPL_SHASEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_SHASEC_F_SPL(AHMPROTFSPL, SHASEC_F_SPL) { \
	FDL_ASSERT(!((SHASEC_F_SPL) & ~((1 << AHMPROTFSPL_SHASEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_SHASEC_F_SPL_MASK) | (((unsigned long)(SHASEC_F_SPL)) << AHMPROTFSPL_SHASEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_EHCISEC_F_SPL_SIZE	1
#define AHMPROTFSPL_EHCISEC_F_SPL_SHIFT	4
#define AHMPROTFSPL_EHCISEC_F_SPL_MASK	0x00000010
#define AHMPROTFSPL_GET_EHCISEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_EHCISEC_F_SPL_MASK) >> AHMPROTFSPL_EHCISEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_EHCISEC_F_SPL(AHMPROTFSPL, EHCISEC_F_SPL) { \
	FDL_ASSERT(!((EHCISEC_F_SPL) & ~((1 << AHMPROTFSPL_EHCISEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_EHCISEC_F_SPL_MASK) | (((unsigned long)(EHCISEC_F_SPL)) << AHMPROTFSPL_EHCISEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_OHCI0SEC_F_SPL_SIZE	1
#define AHMPROTFSPL_OHCI0SEC_F_SPL_SHIFT	5
#define AHMPROTFSPL_OHCI0SEC_F_SPL_MASK	0x00000020
#define AHMPROTFSPL_GET_OHCI0SEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_OHCI0SEC_F_SPL_MASK) >> AHMPROTFSPL_OHCI0SEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_OHCI0SEC_F_SPL(AHMPROTFSPL, OHCI0SEC_F_SPL) { \
	FDL_ASSERT(!((OHCI0SEC_F_SPL) & ~((1 << AHMPROTFSPL_OHCI0SEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_OHCI0SEC_F_SPL_MASK) | (((unsigned long)(OHCI0SEC_F_SPL)) << AHMPROTFSPL_OHCI0SEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_OHCI1SEC_F_SPL_SIZE	1
#define AHMPROTFSPL_OHCI1SEC_F_SPL_SHIFT	6
#define AHMPROTFSPL_OHCI1SEC_F_SPL_MASK	0x00000040
#define AHMPROTFSPL_GET_OHCI1SEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_OHCI1SEC_F_SPL_MASK) >> AHMPROTFSPL_OHCI1SEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_OHCI1SEC_F_SPL(AHMPROTFSPL, OHCI1SEC_F_SPL) { \
	FDL_ASSERT(!((OHCI1SEC_F_SPL) & ~((1 << AHMPROTFSPL_OHCI1SEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_OHCI1SEC_F_SPL_MASK) | (((unsigned long)(OHCI1SEC_F_SPL)) << AHMPROTFSPL_OHCI1SEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_SDIO0SEC_F_SPL_SIZE	1
#define AHMPROTFSPL_SDIO0SEC_F_SPL_SHIFT	7
#define AHMPROTFSPL_SDIO0SEC_F_SPL_MASK	0x00000080
#define AHMPROTFSPL_GET_SDIO0SEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_SDIO0SEC_F_SPL_MASK) >> AHMPROTFSPL_SDIO0SEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_SDIO0SEC_F_SPL(AHMPROTFSPL, SDIO0SEC_F_SPL) { \
	FDL_ASSERT(!((SDIO0SEC_F_SPL) & ~((1 << AHMPROTFSPL_SDIO0SEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_SDIO0SEC_F_SPL_MASK) | (((unsigned long)(SDIO0SEC_F_SPL)) << AHMPROTFSPL_SDIO0SEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_SDIO1SEC_F_SPL_SIZE	1
#define AHMPROTFSPL_SDIO1SEC_F_SPL_SHIFT	8
#define AHMPROTFSPL_SDIO1SEC_F_SPL_MASK	0x00000100
#define AHMPROTFSPL_GET_SDIO1SEC_F_SPL(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_SDIO1SEC_F_SPL_MASK) >> AHMPROTFSPL_SDIO1SEC_F_SPL_SHIFT)
#define AHMPROTFSPL_SET_SDIO1SEC_F_SPL(AHMPROTFSPL, SDIO1SEC_F_SPL) { \
	FDL_ASSERT(!((SDIO1SEC_F_SPL) & ~((1 << AHMPROTFSPL_SDIO1SEC_F_SPL_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_SDIO1SEC_F_SPL_MASK) | (((unsigned long)(SDIO1SEC_F_SPL)) << AHMPROTFSPL_SDIO1SEC_F_SPL_SHIFT);\
}
#define AHMPROTFSPL_PAD0_SIZE	22
#define AHMPROTFSPL_PAD0_SHIFT	9
#define AHMPROTFSPL_PAD0_MASK	0x7ffffe00
#define AHMPROTFSPL_GET_PAD0(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_PAD0_MASK) >> AHMPROTFSPL_PAD0_SHIFT)
#define AHMPROTFSPL_SET_PAD0(AHMPROTFSPL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMPROTFSPL_PAD0_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_PAD0_MASK) | (((unsigned long)(pad0)) << AHMPROTFSPL_PAD0_SHIFT);\
}
#define AHMPROTFSPL_RD_VALID_SIZE	1
#define AHMPROTFSPL_RD_VALID_SHIFT	31
#define AHMPROTFSPL_RD_VALID_MASK	0x80000000
#define AHMPROTFSPL_GET_RD_VALID(AHMPROTFSPL) \
	((((unsigned long)(AHMPROTFSPL)) & AHMPROTFSPL_RD_VALID_MASK) >> AHMPROTFSPL_RD_VALID_SHIFT)
#define AHMPROTFSPL_SET_RD_VALID(AHMPROTFSPL, RD_VALID) { \
	FDL_ASSERT(!((RD_VALID) & ~((1 << AHMPROTFSPL_RD_VALID_SIZE)-1))); \
	AHMPROTFSPL = (((unsigned long)(AHMPROTFSPL)) & ~AHMPROTFSPL_RD_VALID_MASK) | (((unsigned long)(RD_VALID)) << AHMPROTFSPL_RD_VALID_SHIFT);\
}
#define AHMPROTFSPL_TOTAL_SIZE	32
#define AHMPROTFSPL(AHBEXIDISEC_F_SPL, FLASHSEC_F_SPL, AESSEC_F_SPL, SHASEC_F_SPL, EHCISEC_F_SPL, OHCI0SEC_F_SPL, OHCI1SEC_F_SPL, SDIO0SEC_F_SPL, SDIO1SEC_F_SPL, RD_VALID) \
	((((unsigned long)(AHBEXIDISEC_F_SPL)) << AHMPROTFSPL_AHBEXIDISEC_F_SPL_SHIFT) | \
	 (((unsigned long)(FLASHSEC_F_SPL)) << AHMPROTFSPL_FLASHSEC_F_SPL_SHIFT) | \
	 (((unsigned long)(AESSEC_F_SPL)) << AHMPROTFSPL_AESSEC_F_SPL_SHIFT) | \
	 (((unsigned long)(SHASEC_F_SPL)) << AHMPROTFSPL_SHASEC_F_SPL_SHIFT) | \
	 (((unsigned long)(EHCISEC_F_SPL)) << AHMPROTFSPL_EHCISEC_F_SPL_SHIFT) | \
	 (((unsigned long)(OHCI0SEC_F_SPL)) << AHMPROTFSPL_OHCI0SEC_F_SPL_SHIFT) | \
	 (((unsigned long)(OHCI1SEC_F_SPL)) << AHMPROTFSPL_OHCI1SEC_F_SPL_SHIFT) | \
	 (((unsigned long)(SDIO0SEC_F_SPL)) << AHMPROTFSPL_SDIO0SEC_F_SPL_SHIFT) | \
	 (((unsigned long)(SDIO1SEC_F_SPL)) << AHMPROTFSPL_SDIO1SEC_F_SPL_SHIFT) | \
	 (((unsigned long)(RD_VALID)) << AHMPROTFSPL_RD_VALID_SHIFT))

/*
 *  AHMPROTFDDR struct
 */
#define AHMPROTFDDR_AHBEXIDISEC_F_DDR_SIZE	1
#define AHMPROTFDDR_AHBEXIDISEC_F_DDR_SHIFT	0
#define AHMPROTFDDR_AHBEXIDISEC_F_DDR_MASK	0x00000001
#define AHMPROTFDDR_GET_AHBEXIDISEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_AHBEXIDISEC_F_DDR_MASK) >> AHMPROTFDDR_AHBEXIDISEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_AHBEXIDISEC_F_DDR(AHMPROTFDDR, AHBEXIDISEC_F_DDR) { \
	FDL_ASSERT(!((AHBEXIDISEC_F_DDR) & ~((1 << AHMPROTFDDR_AHBEXIDISEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_AHBEXIDISEC_F_DDR_MASK) | (((unsigned long)(AHBEXIDISEC_F_DDR)) << AHMPROTFDDR_AHBEXIDISEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_FLASHSEC_F_DDR_SIZE	1
#define AHMPROTFDDR_FLASHSEC_F_DDR_SHIFT	1
#define AHMPROTFDDR_FLASHSEC_F_DDR_MASK	0x00000002
#define AHMPROTFDDR_GET_FLASHSEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_FLASHSEC_F_DDR_MASK) >> AHMPROTFDDR_FLASHSEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_FLASHSEC_F_DDR(AHMPROTFDDR, FLASHSEC_F_DDR) { \
	FDL_ASSERT(!((FLASHSEC_F_DDR) & ~((1 << AHMPROTFDDR_FLASHSEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_FLASHSEC_F_DDR_MASK) | (((unsigned long)(FLASHSEC_F_DDR)) << AHMPROTFDDR_FLASHSEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_AESSEC_F_DDR_SIZE	1
#define AHMPROTFDDR_AESSEC_F_DDR_SHIFT	2
#define AHMPROTFDDR_AESSEC_F_DDR_MASK	0x00000004
#define AHMPROTFDDR_GET_AESSEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_AESSEC_F_DDR_MASK) >> AHMPROTFDDR_AESSEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_AESSEC_F_DDR(AHMPROTFDDR, AESSEC_F_DDR) { \
	FDL_ASSERT(!((AESSEC_F_DDR) & ~((1 << AHMPROTFDDR_AESSEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_AESSEC_F_DDR_MASK) | (((unsigned long)(AESSEC_F_DDR)) << AHMPROTFDDR_AESSEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_SHASEC_F_DDR_SIZE	1
#define AHMPROTFDDR_SHASEC_F_DDR_SHIFT	3
#define AHMPROTFDDR_SHASEC_F_DDR_MASK	0x00000008
#define AHMPROTFDDR_GET_SHASEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_SHASEC_F_DDR_MASK) >> AHMPROTFDDR_SHASEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_SHASEC_F_DDR(AHMPROTFDDR, SHASEC_F_DDR) { \
	FDL_ASSERT(!((SHASEC_F_DDR) & ~((1 << AHMPROTFDDR_SHASEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_SHASEC_F_DDR_MASK) | (((unsigned long)(SHASEC_F_DDR)) << AHMPROTFDDR_SHASEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_EHCISEC_F_DDR_SIZE	1
#define AHMPROTFDDR_EHCISEC_F_DDR_SHIFT	4
#define AHMPROTFDDR_EHCISEC_F_DDR_MASK	0x00000010
#define AHMPROTFDDR_GET_EHCISEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_EHCISEC_F_DDR_MASK) >> AHMPROTFDDR_EHCISEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_EHCISEC_F_DDR(AHMPROTFDDR, EHCISEC_F_DDR) { \
	FDL_ASSERT(!((EHCISEC_F_DDR) & ~((1 << AHMPROTFDDR_EHCISEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_EHCISEC_F_DDR_MASK) | (((unsigned long)(EHCISEC_F_DDR)) << AHMPROTFDDR_EHCISEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_OHCI0SEC_F_DDR_SIZE	1
#define AHMPROTFDDR_OHCI0SEC_F_DDR_SHIFT	5
#define AHMPROTFDDR_OHCI0SEC_F_DDR_MASK	0x00000020
#define AHMPROTFDDR_GET_OHCI0SEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_OHCI0SEC_F_DDR_MASK) >> AHMPROTFDDR_OHCI0SEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_OHCI0SEC_F_DDR(AHMPROTFDDR, OHCI0SEC_F_DDR) { \
	FDL_ASSERT(!((OHCI0SEC_F_DDR) & ~((1 << AHMPROTFDDR_OHCI0SEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_OHCI0SEC_F_DDR_MASK) | (((unsigned long)(OHCI0SEC_F_DDR)) << AHMPROTFDDR_OHCI0SEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_OHCI1SEC_F_DDR_SIZE	1
#define AHMPROTFDDR_OHCI1SEC_F_DDR_SHIFT	6
#define AHMPROTFDDR_OHCI1SEC_F_DDR_MASK	0x00000040
#define AHMPROTFDDR_GET_OHCI1SEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_OHCI1SEC_F_DDR_MASK) >> AHMPROTFDDR_OHCI1SEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_OHCI1SEC_F_DDR(AHMPROTFDDR, OHCI1SEC_F_DDR) { \
	FDL_ASSERT(!((OHCI1SEC_F_DDR) & ~((1 << AHMPROTFDDR_OHCI1SEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_OHCI1SEC_F_DDR_MASK) | (((unsigned long)(OHCI1SEC_F_DDR)) << AHMPROTFDDR_OHCI1SEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_SDIO0SEC_F_DDR_SIZE	1
#define AHMPROTFDDR_SDIO0SEC_F_DDR_SHIFT	7
#define AHMPROTFDDR_SDIO0SEC_F_DDR_MASK	0x00000080
#define AHMPROTFDDR_GET_SDIO0SEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_SDIO0SEC_F_DDR_MASK) >> AHMPROTFDDR_SDIO0SEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_SDIO0SEC_F_DDR(AHMPROTFDDR, SDIO0SEC_F_DDR) { \
	FDL_ASSERT(!((SDIO0SEC_F_DDR) & ~((1 << AHMPROTFDDR_SDIO0SEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_SDIO0SEC_F_DDR_MASK) | (((unsigned long)(SDIO0SEC_F_DDR)) << AHMPROTFDDR_SDIO0SEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_SDIO1SEC_F_DDR_SIZE	1
#define AHMPROTFDDR_SDIO1SEC_F_DDR_SHIFT	8
#define AHMPROTFDDR_SDIO1SEC_F_DDR_MASK	0x00000100
#define AHMPROTFDDR_GET_SDIO1SEC_F_DDR(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_SDIO1SEC_F_DDR_MASK) >> AHMPROTFDDR_SDIO1SEC_F_DDR_SHIFT)
#define AHMPROTFDDR_SET_SDIO1SEC_F_DDR(AHMPROTFDDR, SDIO1SEC_F_DDR) { \
	FDL_ASSERT(!((SDIO1SEC_F_DDR) & ~((1 << AHMPROTFDDR_SDIO1SEC_F_DDR_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_SDIO1SEC_F_DDR_MASK) | (((unsigned long)(SDIO1SEC_F_DDR)) << AHMPROTFDDR_SDIO1SEC_F_DDR_SHIFT);\
}
#define AHMPROTFDDR_PAD0_SIZE	22
#define AHMPROTFDDR_PAD0_SHIFT	9
#define AHMPROTFDDR_PAD0_MASK	0x7ffffe00
#define AHMPROTFDDR_GET_PAD0(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_PAD0_MASK) >> AHMPROTFDDR_PAD0_SHIFT)
#define AHMPROTFDDR_SET_PAD0(AHMPROTFDDR, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << AHMPROTFDDR_PAD0_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_PAD0_MASK) | (((unsigned long)(pad0)) << AHMPROTFDDR_PAD0_SHIFT);\
}
#define AHMPROTFDDR_RD_VALID_SIZE	1
#define AHMPROTFDDR_RD_VALID_SHIFT	31
#define AHMPROTFDDR_RD_VALID_MASK	0x80000000
#define AHMPROTFDDR_GET_RD_VALID(AHMPROTFDDR) \
	((((unsigned long)(AHMPROTFDDR)) & AHMPROTFDDR_RD_VALID_MASK) >> AHMPROTFDDR_RD_VALID_SHIFT)
#define AHMPROTFDDR_SET_RD_VALID(AHMPROTFDDR, RD_VALID) { \
	FDL_ASSERT(!((RD_VALID) & ~((1 << AHMPROTFDDR_RD_VALID_SIZE)-1))); \
	AHMPROTFDDR = (((unsigned long)(AHMPROTFDDR)) & ~AHMPROTFDDR_RD_VALID_MASK) | (((unsigned long)(RD_VALID)) << AHMPROTFDDR_RD_VALID_SHIFT);\
}
#define AHMPROTFDDR_TOTAL_SIZE	32
#define AHMPROTFDDR(AHBEXIDISEC_F_DDR, FLASHSEC_F_DDR, AESSEC_F_DDR, SHASEC_F_DDR, EHCISEC_F_DDR, OHCI0SEC_F_DDR, OHCI1SEC_F_DDR, SDIO0SEC_F_DDR, SDIO1SEC_F_DDR, RD_VALID) \
	((((unsigned long)(AHBEXIDISEC_F_DDR)) << AHMPROTFDDR_AHBEXIDISEC_F_DDR_SHIFT) | \
	 (((unsigned long)(FLASHSEC_F_DDR)) << AHMPROTFDDR_FLASHSEC_F_DDR_SHIFT) | \
	 (((unsigned long)(AESSEC_F_DDR)) << AHMPROTFDDR_AESSEC_F_DDR_SHIFT) | \
	 (((unsigned long)(SHASEC_F_DDR)) << AHMPROTFDDR_SHASEC_F_DDR_SHIFT) | \
	 (((unsigned long)(EHCISEC_F_DDR)) << AHMPROTFDDR_EHCISEC_F_DDR_SHIFT) | \
	 (((unsigned long)(OHCI0SEC_F_DDR)) << AHMPROTFDDR_OHCI0SEC_F_DDR_SHIFT) | \
	 (((unsigned long)(OHCI1SEC_F_DDR)) << AHMPROTFDDR_OHCI1SEC_F_DDR_SHIFT) | \
	 (((unsigned long)(SDIO0SEC_F_DDR)) << AHMPROTFDDR_SDIO0SEC_F_DDR_SHIFT) | \
	 (((unsigned long)(SDIO1SEC_F_DDR)) << AHMPROTFDDR_SDIO1SEC_F_DDR_SHIFT) | \
	 (((unsigned long)(RD_VALID)) << AHMPROTFDDR_RD_VALID_SHIFT))


#endif /* __FDL_AHB_FDL_DEFS_H__ */
