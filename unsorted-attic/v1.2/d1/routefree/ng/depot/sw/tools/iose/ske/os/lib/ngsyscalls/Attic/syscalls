SKThreadId CreateThread(SKEntryProc entry, void *arg, void *stack, u32 stackSize, u32 priority);
SKThreadId Fork(SKEntryProc entry, void *arg, void *stack, u32 stackSize, u32 priority);
SKError DestroyThread(SKThreadId id);
SKThreadId GetThreadId(void);
SKProcessId GetProcessId(void);
SKError StartThread(SKThreadId id);
SKError StopThread(SKThreadId id);
void YieldThread(void);
u32 GetThreadPriority(SKThreadId id);
SKError SetThreadPriority(SKThreadId id, u32 priority);

SKMessageQueueId CreateMessageQueue(SKMessage *msgarray, u32 count, u32 pIdMask);
SKError DestroyMessageQueue(SKMessageQueueId id);
SKError SendMessage(SKMessageQueueId mq, SKMessage msg, u32 flag);
SKError JamMessage(SKMessageQueueId mq, SKMessage msg, u32 flag);
SKError ReceiveMessage(SKMessageQueueId mq, SKMessage *msg, u32 flag);
SKError HandleEvent(SKEvent event, SKMessageQueueId mq, SKMessage mesg);
SKError UnhandleEvent(SKEvent event);

void *Alloc(u32 size);
SKError Free(void *ptr);

void DebugMemDump(void);

SKError StopTimer(SKTimerId id);

void DebugTimerListDump(void);
void EmuStartProg(const char *prog, u32 pri);
