IOSError CreateObject(u32 *handle, IOSCObjectType type, IOSCObjectSubType subtype);
IOSError DeleteObject(u32 handle);
IOSError ImportSecretKey(IOSCSecretKeyHandle importedHandle, IOSCSecretKeyHandle verifyHandle, IOSCSecretKeyHandle decryptHandle, IOSCSecretKeySecurity flag, u8 *signbuffer, u8 * ivData, u8 * keybuffer);
IOSError ExportSecretKey(IOSCSecretKeyHandle exportedHandle,  IOSCSecretKeyHandle signHandle, IOSCSecretKeyHandle encryptHandle, IOSCSecretKeySecurity flag, u8 *signbuffer, u8 * ivData, u8 * keybuffer);
IOSError ImportPublicKey(u8 * publicKeyData, u8 * exponent, IOSCPublicKeyHandle publicKeyHandle);
IOSError ExportPublicKey(u8 * publicKeyData, u8 * exponent, IOSCPublicKeyHandle publicKeyHandle);
IOSError ComputeSharedKey (IOSCSecretKeyHandle privateHandle, IOSCPublicKeyHandle publicHandle, IOSCSecretKeyHandle sharedHandle);
IOSError SetData(IOSCDataHandle dataHandle, u32 value);
IOSError GetData(IOSCDataHandle dataHandle, u32 *value);
IOSError GetKeySize(u32 *keySize, IOSCKeyHandle handle);
IOSError GetSignatureSize(u32 *signSize, IOSCKeyHandle handle);
IOSError GenerateHashAsync(u8 * context, u8 * inputData, u32 inputSize, u32 chainingFlag, u8 * hashData, IOSMessageQueueId mq, IOSResourceRequest *reply);
IOSError GenerateHash(u8 * context, u8 * inputData, u32 inputSize, u32 chainingFlag, u8 * hashData);
IOSError EncryptAsync(IOSCSecretKeyHandle encryptHandle, u8 * ivData, u8 * inputData, u32 inputSize, u8 * outputData, IOSMessageQueueId mq, IOSResourceRequest *reply);
IOSError Encrypt(IOSCSecretKeyHandle encryptHandle, u8 * ivData, u8 * inputData, u32 inputSize, u8 * outputData);
IOSError DecryptAsync(IOSCSecretKeyHandle decryptHandle, u8 * ivData, u8 * inputData, u32 inputSize, u8 * outputData, IOSMessageQueueId mq, IOSResourceRequest *reply);
IOSError Decrypt(IOSCSecretKeyHandle decryptHandle, u8 * ivData, u8 * inputData, u32 inputSize, u8 * outputData);
IOSError VerifyPublicKeySign(u8 * inputData, u32 inputSize, IOSCPublicKeyHandle publicHandle, u8 * signData);
IOSError GenerateBlockMAC(u8 *context, u8 * inputData, u32 inputSize, u8 *customData, u32 customDataSize, IOSCSecretKeyHandle signerHandle, u32 chainingFlag, u8 * signData);
IOSError GenerateBlockMACAsync(u8 *context, u8 * inputData, u32 inputSize, u8 *customData, u32 customDataSize, IOSCSecretKeyHandle signerHandle, u32 chainingFlag, u8 * signData, IOSMessageQueueId mq, IOSResourceRequest *reply);
IOSError ImportCertificate(u8 * certData, IOSCPublicKeyHandle signerHandle, IOSCPublicKeyHandle publicKeyHandle);
IOSError GetDeviceCertificate(IOSCEccSignedCert *certificate);
IOSError SetOwnership(u32 handle, u32 users);
IOSError GetOwnership(u32 handle, u32 *users);
IOSError GenerateRand(u8 *randBytes, u32 numBytes);
IOSError GenerateKey (IOSCKeyHandle handle);
IOSError GeneratePublicKeySign(u8 * inputData, u32 inputSize, IOSCSecretKeyHandle signerHandle, u8 * signData);
IOSError GenerateCertificate(IOSCSecretKeyHandle privateHandle, IOSCCertName certname, IOSCEccSignedCert *certificate);
